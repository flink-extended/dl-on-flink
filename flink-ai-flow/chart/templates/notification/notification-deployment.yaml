##
## Licensed to the Apache Software Foundation (ASF) under one
## or more contributor license agreements.  See the NOTICE file
## distributed with this work for additional information
## regarding copyright ownership.  The ASF licenses this file
## to you under the Apache License, Version 2.0 (the
## "License"); you may not use this file except in compliance
## with the License.  You may obtain a copy of the License at
##
##   http://www.apache.org/licenses/LICENSE-2.0
##
## Unless required by applicable law or agreed to in writing,
## software distributed under the License is distributed on an
## "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
## KIND, either express or implied.  See the License for the
## specific language governing permissions and limitations
## under the License.
##
{{- $nodeSelector := or .Values.notification.nodeSelector .Values.nodeSelector }}
{{- $affinity := or .Values.notification.affinity .Values.affinity }}
{{- $tolerations := or .Values.notification.tolerations .Values.tolerations }}
kind: Deployment
apiVersion: apps/v1
metadata:
  name: {{ .Release.Name }}-notification
  labels:
    tier: aiflow
    component: notification
    release: {{ .Release.Name }}
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    heritage: {{ .Release.Service }}
{{- with .Values.labels }}
{{ toYaml . | indent 4 }}
{{- end }}
spec:
  replicas: 1
  selector:
    matchLabels:
      tier: aiflow
      component: notification
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        tier: aiflow
        component: notification
        release: {{ .Release.Name }}
{{- with .Values.labels }}
{{ toYaml . | indent 8 }}
{{- end }}
      annotations:
        {{- if .Values.airflowPodAnnotations }}
        {{- toYaml .Values.airflowPodAnnotations | nindent 8 }}
        {{- end }}
    spec:
      nodeSelector:
{{ toYaml $nodeSelector | indent 8 }}
      affinity:
{{ toYaml $affinity | indent 8 }}
      tolerations:
{{ toYaml $tolerations | indent 8 }}
      restartPolicy: Always
      securityContext:
        runAsUser: {{ .Values.uid }}
        fsGroup: {{ .Values.gid }}
      {{- if or .Values.registry.secretName .Values.registry.connection }}
      imagePullSecrets:
        - name: {{ template "registry_secret" . }}
      {{- end }}
      containers:
        - name: ai-flow-notification
          livenessProbe:
            exec:
              command:
                - "/bin/sh"
                - "-c"
                - "curl localhost:50052 --output -"
            initialDelaySeconds: {{ .Values.notification.livenessProbe.initialDelaySeconds | default 15 }}
            timeoutSeconds: {{ .Values.notification.livenessProbe.timeoutSeconds | default 30 }}
            failureThreshold: {{ .Values.notification.livenessProbe.failureThreshold | default 20 }}
            periodSeconds: {{ .Values.notification.livenessProbe.periodSeconds | default 5 }}
          image: {{ template "notification_image" . }}
          args:
            - "start_notification_service.py"
            - "--database-conn=$(NOTIFICATION_DB_CONN)"
          imagePullPolicy: {{ .Values.images.notification.pullPolicy }}
          ports:
            - containerPort: 50052
              name: ai-notification
          resources:
{{ toYaml .Values.notification.resources | indent 12 }}
          env:
            - name: NOTIFICATION_DB_CONN
              valueFrom:
                secretKeyRef:
                  name: {{ template "airflow_metadata_secret" . }}
                  key: connection
            - name: PYTHONUNBUFFERED
              value: '1'
            - name: PYTHONIOENCODING
              value: 'UTF-8'

# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

################################
## Airflow Webserver Deployment
#################################
{{- $nodeSelector := or .Values.aiflowWebserver.nodeSelector .Values.nodeSelector }}
{{- $affinity := or .Values.aiflowWebserver.affinity .Values.affinity }}
{{- $tolerations := or .Values.aiflowWebserver.tolerations .Values.tolerations }}

#{{- $metadataHost := .Values.data.metadataConnection.host | default (printf "%s-%s.%s" .Release.Name "mysql" .Release.Namespace) }}
#{{- $pgbouncerHost := (printf "%s-%s.%s" .Release.Name "pgbouncer" .Release.Namespace) }}
{{- $host := ternary $pgbouncerHost $metadataHost .Values.pgbouncer.enabled }}
{{- $port := ((ternary .Values.ports.pgbouncer .Values.data.metadataConnection.port .Values.pgbouncer.enabled) | toString) }}
{{- $database := (ternary (printf "%s-%s" .Release.Name "metadata") .Values.data.metadataConnection.db .Values.pgbouncer.enabled) }}
#{{- $query := ternary (printf "sslmode=%s" .Values.data.metadataConnection.sslmode) "" (eq .Values.data.metadataConnection.protocol "postgresql") }}
kind: Deployment
apiVersion: apps/v1
metadata:
  name: {{ .Release.Name }}-aiflow-webserver
  labels:
    tier: aiflow
    component: webserver
    release: {{ .Release.Name }}
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    heritage: {{ .Release.Service }}
{{- with .Values.labels }}
{{ toYaml . | indent 4 }}
{{- end }}
spec:
  replicas: {{ .Values.aiflowWebserver.replicas }}
  strategy:
    {{- if .Values.aiflowWebserver.strategy }}
    {{- toYaml .Values.aiflowWebserver.strategy | nindent 4 }}
    {{- else }}
    {{- if semverCompare ">=2.0.0" .Values.airflowVersion }}
    # Here we define the rolling update strategy
    # - maxSurge define how many pod we can add at a time
    # - maxUnavailable define how many pod can be unavailable
    #   during the rolling update
    # Setting maxUnavailable to 0 would make sure we have the appropriate
    # capacity during the rolling update.
    # You can also use percentage based value instead of integer.
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
    {{- else }}
    type: Recreate
    {{- end}}
    {{- end}}
  selector:
    matchLabels:
      tier: aiflow
      component: webserver
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        tier: aiflow
        component: webserver
        release: {{ .Release.Name }}
{{- with .Values.labels }}
{{ toYaml . | indent 8 }}
{{- end }}
    spec:
      serviceAccountName: {{ include "webserver.serviceAccountName" . }}
      nodeSelector:
{{ toYaml $nodeSelector | indent 8 }}
      affinity:
{{ toYaml $affinity | indent 8 }}
      tolerations:
{{ toYaml $tolerations | indent 8 }}
      restartPolicy: Always
      securityContext:
        runAsUser: {{ .Values.uid }}
        fsGroup: {{ .Values.gid }}
      {{- if or .Values.registry.secretName .Values.registry.connection }}
      imagePullSecrets:
        - name: {{ template "registry_secret" . }}
      {{- end }}
      containers:
        - name: aiflow-webserver
          image: {{ template "airflow_image" . }}
          imagePullPolicy: {{ .Values.images.airflow.pullPolicy }}
          {{- if .Values.aiflowWebserver.command }}
          command: {{ tpl (toYaml .Values.aiflowWebserver.command) . | nindent 12 }}
          {{- end }}
          {{- if .Values.aiflowWebserver.args }}
          args: {{ tpl (toYaml .Values.aiflowWebserver.args) . | nindent 12 }}
          {{- end }}
          resources:
{{ toYaml .Values.aiflowWebserver.resources | indent 12 }}
          volumeMounts:
{{- if .Values.aiflowWebserver.extraVolumeMounts }}
{{ toYaml .Values.aiflowWebserver.extraVolumeMounts | indent 12 }}
{{- end }}
          ports:
            - name: aiflow-ui
              containerPort: {{ .Values.ports.aiflowUI }}
          livenessProbe:
            httpGet:
              port: {{ .Values.ports.aiflowUI }}
            initialDelaySeconds: {{ .Values.aiflowWebserver.readinessProbe.initialDelaySeconds | default 15 }}
            timeoutSeconds: {{ .Values.aiflowWebserver.readinessProbe.timeoutSeconds | default 30 }}
            failureThreshold: {{ .Values.aiflowWebserver.readinessProbe.failureThreshold | default 20 }}
            periodSeconds: {{ .Values.aiflowWebserver.readinessProbe.periodSeconds | default 5 }}
          volumeMounts:
            - name: config
              mountPath: {{ template "airflow_config_path" . }}
              subPath: airflow.cfg
              readOnly: true
          env:
          {{- include "standard_airflow_environment" . | indent 10 }}
            - name: AIFLOW_WEB_SERVER_PORT
              value: "{{ .Values.ports.aiflowUI }}"
            - name: AIFLOW_WEB_SERVER_HOST
              value: "0.0.0.0"
            {{- with .Values.data.metadataConnection }}
            - name: AIFLOW_DB_CONN
              value: {{ urlJoin (dict "scheme" .protocol "userinfo" (printf "%s:%s" (.user | urlquery) (.pass | urlquery) ) "host" (printf "%s:%s" $host $port) "path" (printf "/%s" $database) "query" $query) | quote }}
            {{- end }}
            {{- if .Values.ingress.enabled }}
            - name: AIFLOW_WEB_SERVER_AIRFLOW_WEB_SERVER_URI
              value: http{{ if .Values.ingress.web.tls.enabled }}s{{ end }}://{{ .Values.ingress.web.host }}{{ .Values.ingress.web.path }}
            {{- end}}
{{- if .Values.aiflowWebserver.extraContainers }}
{{- toYaml .Values.aiflowWebserver.extraContainers | nindent 8 }}
{{- end }}
      volumes:
        - name: config
          configMap:
            name: {{ template "airflow_config" . }}
{{- if .Values.aiflowWebserver.extraVolumes }}
{{ toYaml .Values.aiflowWebserver.extraVolumes | indent 8 }}
{{- end }}

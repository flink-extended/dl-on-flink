//
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
//
// Code generated by protoc-gen-go. DO NOT EDIT.
// source: deploy_service.proto

package ai_flow

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	//_ "github.com/grpc-ecosystem/grpc-gateway/third_party/googleapis/google/api"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type WorkflowRequest struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	WorkflowJson         string   `protobuf:"bytes,2,opt,name=workflow_json,json=workflowJson,proto3" json:"workflow_json,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WorkflowRequest) Reset()         { *m = WorkflowRequest{} }
func (m *WorkflowRequest) String() string { return proto.CompactTextString(m) }
func (*WorkflowRequest) ProtoMessage()    {}
func (*WorkflowRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4f431ac2f5cae27c, []int{0}
}

func (m *WorkflowRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WorkflowRequest.Unmarshal(m, b)
}
func (m *WorkflowRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WorkflowRequest.Marshal(b, m, deterministic)
}
func (m *WorkflowRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorkflowRequest.Merge(m, src)
}
func (m *WorkflowRequest) XXX_Size() int {
	return xxx_messageInfo_WorkflowRequest.Size(m)
}
func (m *WorkflowRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_WorkflowRequest.DiscardUnknown(m)
}

var xxx_messageInfo_WorkflowRequest proto.InternalMessageInfo

func (m *WorkflowRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *WorkflowRequest) GetWorkflowJson() string {
	if m != nil {
		return m.WorkflowJson
	}
	return ""
}

type ScheduleResponse struct {
	ReturnCode           int64    `protobuf:"varint,1,opt,name=return_code,json=returnCode,proto3" json:"return_code,omitempty"`
	ReturnMsg            string   `protobuf:"bytes,2,opt,name=return_msg,json=returnMsg,proto3" json:"return_msg,omitempty"`
	Data                 string   `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ScheduleResponse) Reset()         { *m = ScheduleResponse{} }
func (m *ScheduleResponse) String() string { return proto.CompactTextString(m) }
func (*ScheduleResponse) ProtoMessage()    {}
func (*ScheduleResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4f431ac2f5cae27c, []int{1}
}

func (m *ScheduleResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ScheduleResponse.Unmarshal(m, b)
}
func (m *ScheduleResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ScheduleResponse.Marshal(b, m, deterministic)
}
func (m *ScheduleResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScheduleResponse.Merge(m, src)
}
func (m *ScheduleResponse) XXX_Size() int {
	return xxx_messageInfo_ScheduleResponse.Size(m)
}
func (m *ScheduleResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ScheduleResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ScheduleResponse proto.InternalMessageInfo

func (m *ScheduleResponse) GetReturnCode() int64 {
	if m != nil {
		return m.ReturnCode
	}
	return 0
}

func (m *ScheduleResponse) GetReturnMsg() string {
	if m != nil {
		return m.ReturnMsg
	}
	return ""
}

func (m *ScheduleResponse) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

type MasterConfigRequest struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MasterConfigRequest) Reset()         { *m = MasterConfigRequest{} }
func (m *MasterConfigRequest) String() string { return proto.CompactTextString(m) }
func (*MasterConfigRequest) ProtoMessage()    {}
func (*MasterConfigRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4f431ac2f5cae27c, []int{2}
}

func (m *MasterConfigRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MasterConfigRequest.Unmarshal(m, b)
}
func (m *MasterConfigRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MasterConfigRequest.Marshal(b, m, deterministic)
}
func (m *MasterConfigRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MasterConfigRequest.Merge(m, src)
}
func (m *MasterConfigRequest) XXX_Size() int {
	return xxx_messageInfo_MasterConfigRequest.Size(m)
}
func (m *MasterConfigRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MasterConfigRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MasterConfigRequest proto.InternalMessageInfo

func (m *MasterConfigRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type MasterConfigResponse struct {
	ReturnCode           int64             `protobuf:"varint,1,opt,name=return_code,json=returnCode,proto3" json:"return_code,omitempty"`
	ReturnMsg            string            `protobuf:"bytes,2,opt,name=return_msg,json=returnMsg,proto3" json:"return_msg,omitempty"`
	Config               map[string]string `protobuf:"bytes,3,rep,name=config,proto3" json:"config,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *MasterConfigResponse) Reset()         { *m = MasterConfigResponse{} }
func (m *MasterConfigResponse) String() string { return proto.CompactTextString(m) }
func (*MasterConfigResponse) ProtoMessage()    {}
func (*MasterConfigResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4f431ac2f5cae27c, []int{3}
}

func (m *MasterConfigResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MasterConfigResponse.Unmarshal(m, b)
}
func (m *MasterConfigResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MasterConfigResponse.Marshal(b, m, deterministic)
}
func (m *MasterConfigResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MasterConfigResponse.Merge(m, src)
}
func (m *MasterConfigResponse) XXX_Size() int {
	return xxx_messageInfo_MasterConfigResponse.Size(m)
}
func (m *MasterConfigResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MasterConfigResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MasterConfigResponse proto.InternalMessageInfo

func (m *MasterConfigResponse) GetReturnCode() int64 {
	if m != nil {
		return m.ReturnCode
	}
	return 0
}

func (m *MasterConfigResponse) GetReturnMsg() string {
	if m != nil {
		return m.ReturnMsg
	}
	return ""
}

func (m *MasterConfigResponse) GetConfig() map[string]string {
	if m != nil {
		return m.Config
	}
	return nil
}

func init() {
	proto.RegisterType((*WorkflowRequest)(nil), "ai_flow.WorkflowRequest")
	proto.RegisterType((*ScheduleResponse)(nil), "ai_flow.ScheduleResponse")
	proto.RegisterType((*MasterConfigRequest)(nil), "ai_flow.MasterConfigRequest")
	proto.RegisterType((*MasterConfigResponse)(nil), "ai_flow.MasterConfigResponse")
	proto.RegisterMapType((map[string]string)(nil), "ai_flow.MasterConfigResponse.ConfigEntry")
}

func init() { proto.RegisterFile("deploy_service.proto", fileDescriptor_4f431ac2f5cae27c) }

var fileDescriptor_4f431ac2f5cae27c = []byte{
	// 494 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x94, 0x41, 0x6f, 0xd3, 0x30,
	0x14, 0xc7, 0xe5, 0x96, 0x0d, 0xf5, 0x95, 0xb1, 0xca, 0x14, 0x29, 0x54, 0x1b, 0xab, 0x3c, 0x26,
	0xba, 0x82, 0x1a, 0xa9, 0x5c, 0xa0, 0xb7, 0x31, 0xc6, 0x01, 0x69, 0x97, 0xec, 0xc0, 0x31, 0x32,
	0xc9, 0x6b, 0x30, 0x4b, 0xe3, 0x60, 0x3b, 0xdd, 0x2a, 0x24, 0x0e, 0xe3, 0xc2, 0x11, 0x89, 0x8f,
	0x06, 0x1f, 0x81, 0x0f, 0x82, 0x62, 0x27, 0xd3, 0x18, 0x74, 0x07, 0xb4, 0xdd, 0xf2, 0x9e, 0x9f,
	0xff, 0xbf, 0x27, 0xff, 0xff, 0x0a, 0x74, 0x63, 0xcc, 0x53, 0xb9, 0x08, 0x35, 0xaa, 0xb9, 0x88,
	0x70, 0x94, 0x2b, 0x69, 0x24, 0xbd, 0xcd, 0x45, 0x38, 0x4d, 0xe5, 0x49, 0x6f, 0x23, 0x91, 0x32,
	0x49, 0xd1, 0xe7, 0xb9, 0xf0, 0x79, 0x96, 0x49, 0xc3, 0x8d, 0x90, 0x99, 0x76, 0x63, 0xec, 0x35,
	0xac, 0xbf, 0x95, 0xea, 0xb8, 0x9c, 0x0c, 0xf0, 0x63, 0x81, 0xda, 0xd0, 0xbb, 0xd0, 0x10, 0xb1,
	0x47, 0xfa, 0x64, 0xd0, 0x0c, 0x1a, 0x22, 0xa6, 0xdb, 0xb0, 0x76, 0x52, 0x8d, 0x84, 0x1f, 0xb4,
	0xcc, 0xbc, 0x46, 0x9f, 0x0c, 0x5a, 0xc1, 0x9d, 0xba, 0xf9, 0x46, 0xcb, 0x8c, 0x4d, 0xa1, 0x73,
	0x14, 0xbd, 0xc7, 0xb8, 0x48, 0x31, 0x40, 0x9d, 0xcb, 0x4c, 0x23, 0xdd, 0x82, 0xb6, 0x42, 0x53,
	0xa8, 0x2c, 0x8c, 0x64, 0x8c, 0x95, 0x22, 0xb8, 0xd6, 0xbe, 0x8c, 0x91, 0x6e, 0x42, 0x55, 0x85,
	0x33, 0x9d, 0x54, 0xb2, 0x2d, 0xd7, 0x39, 0xd4, 0x09, 0xa5, 0x70, 0x2b, 0xe6, 0x86, 0x7b, 0x4d,
	0x7b, 0x60, 0xbf, 0xd9, 0x0e, 0xdc, 0x3b, 0xe4, 0xda, 0xa0, 0xda, 0x97, 0xd9, 0x54, 0x24, 0x4b,
	0x76, 0x66, 0x3f, 0x09, 0x74, 0xff, 0x9c, 0xbb, 0xa6, 0x9d, 0xf6, 0x60, 0x35, 0xb2, 0x8a, 0x5e,
	0xb3, 0xdf, 0x1c, 0xb4, 0xc7, 0xbb, 0xa3, 0xea, 0x9d, 0x47, 0xff, 0xc2, 0x8d, 0x5c, 0x79, 0x90,
	0x19, 0xb5, 0x08, 0xaa, 0x8b, 0xbd, 0x17, 0xd0, 0xbe, 0xd0, 0xa6, 0x1d, 0x68, 0x1e, 0xe3, 0xc2,
	0x6e, 0xd2, 0x0a, 0xca, 0x4f, 0xda, 0x85, 0x95, 0x39, 0x4f, 0x0b, 0xac, 0xe8, 0xae, 0x98, 0x34,
	0x9e, 0x93, 0xf1, 0x97, 0x15, 0x58, 0x7b, 0x65, 0xdd, 0x3e, 0x72, 0x66, 0xd3, 0x53, 0xb8, 0xaf,
	0x0d, 0x57, 0xa6, 0x7e, 0xfc, 0xda, 0x4c, 0xea, 0x9d, 0x2f, 0x76, 0xc9, 0xdf, 0xde, 0x83, 0xf3,
	0x93, 0xcb, 0x8e, 0xb1, 0xe1, 0xd9, 0x8f, 0x5f, 0xdf, 0x1b, 0x8f, 0xd8, 0x96, 0xcf, 0x45, 0x39,
	0xe1, 0xbb, 0x68, 0xa1, 0xf2, 0x6b, 0xb3, 0x7d, 0x4b, 0x9b, 0x90, 0x21, 0x9d, 0x43, 0x57, 0x1b,
	0x99, 0x5f, 0x0f, 0x78, 0xd7, 0x82, 0xb7, 0xd9, 0xc3, 0xab, 0xc0, 0x32, 0x2f, 0xb9, 0x9f, 0xa1,
	0x97, 0xa0, 0xa9, 0xb5, 0x0f, 0x4e, 0x31, 0x2a, 0xca, 0x40, 0x07, 0xa8, 0x8b, 0xd4, 0xfc, 0x1f,
	0xfd, 0x89, 0xa5, 0xef, 0xb0, 0xfe, 0x72, 0xba, 0xb2, 0xf2, 0x25, 0xff, 0x13, 0x78, 0x42, 0xff,
	0x85, 0xdf, 0x4b, 0xc5, 0x1c, 0x6f, 0xec, 0xd1, 0x79, 0xa9, 0x5e, 0xc2, 0xcf, 0x08, 0xac, 0x27,
	0x68, 0x2e, 0x66, 0x8d, 0x6e, 0x2c, 0x89, 0xa0, 0x03, 0x6f, 0x5e, 0x19, 0x50, 0x36, 0xb6, 0xf0,
	0xa7, 0xec, 0xf1, 0x72, 0xf8, 0xcc, 0xde, 0x0b, 0x5d, 0x7a, 0x27, 0x64, 0xf8, 0xd2, 0x83, 0x4e,
	0x24, 0x67, 0x23, 0x77, 0xc1, 0xfd, 0x47, 0xbe, 0x12, 0xf2, 0x8d, 0x90, 0x77, 0xab, 0xb6, 0x78,
	0xf6, 0x3b, 0x00, 0x00, 0xff, 0xff, 0x0c, 0x0b, 0x2a, 0x34, 0x93, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DeployServiceClient is the client API for DeployService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DeployServiceClient interface {
	StartScheduleWorkflow(ctx context.Context, in *WorkflowRequest, opts ...grpc.CallOption) (*ScheduleResponse, error)
	StopScheduleWorkflow(ctx context.Context, in *WorkflowRequest, opts ...grpc.CallOption) (*ScheduleResponse, error)
	GetWorkflowExecutionResult(ctx context.Context, in *WorkflowRequest, opts ...grpc.CallOption) (*ScheduleResponse, error)
	IsWorkflowExecutionAlive(ctx context.Context, in *WorkflowRequest, opts ...grpc.CallOption) (*ScheduleResponse, error)
	GetMasterConfig(ctx context.Context, in *MasterConfigRequest, opts ...grpc.CallOption) (*MasterConfigResponse, error)
}

type deployServiceClient struct {
	cc *grpc.ClientConn
}

func NewDeployServiceClient(cc *grpc.ClientConn) DeployServiceClient {
	return &deployServiceClient{cc}
}

func (c *deployServiceClient) StartScheduleWorkflow(ctx context.Context, in *WorkflowRequest, opts ...grpc.CallOption) (*ScheduleResponse, error) {
	out := new(ScheduleResponse)
	err := c.cc.Invoke(ctx, "/ai_flow.DeployService/startScheduleWorkflow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deployServiceClient) StopScheduleWorkflow(ctx context.Context, in *WorkflowRequest, opts ...grpc.CallOption) (*ScheduleResponse, error) {
	out := new(ScheduleResponse)
	err := c.cc.Invoke(ctx, "/ai_flow.DeployService/stopScheduleWorkflow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deployServiceClient) GetWorkflowExecutionResult(ctx context.Context, in *WorkflowRequest, opts ...grpc.CallOption) (*ScheduleResponse, error) {
	out := new(ScheduleResponse)
	err := c.cc.Invoke(ctx, "/ai_flow.DeployService/getWorkflowExecutionResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deployServiceClient) IsWorkflowExecutionAlive(ctx context.Context, in *WorkflowRequest, opts ...grpc.CallOption) (*ScheduleResponse, error) {
	out := new(ScheduleResponse)
	err := c.cc.Invoke(ctx, "/ai_flow.DeployService/isWorkflowExecutionAlive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deployServiceClient) GetMasterConfig(ctx context.Context, in *MasterConfigRequest, opts ...grpc.CallOption) (*MasterConfigResponse, error) {
	out := new(MasterConfigResponse)
	err := c.cc.Invoke(ctx, "/ai_flow.DeployService/getMasterConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeployServiceServer is the server API for DeployService service.
type DeployServiceServer interface {
	StartScheduleWorkflow(context.Context, *WorkflowRequest) (*ScheduleResponse, error)
	StopScheduleWorkflow(context.Context, *WorkflowRequest) (*ScheduleResponse, error)
	GetWorkflowExecutionResult(context.Context, *WorkflowRequest) (*ScheduleResponse, error)
	IsWorkflowExecutionAlive(context.Context, *WorkflowRequest) (*ScheduleResponse, error)
	GetMasterConfig(context.Context, *MasterConfigRequest) (*MasterConfigResponse, error)
}

// UnimplementedDeployServiceServer can be embedded to have forward compatible implementations.
type UnimplementedDeployServiceServer struct {
}

func (*UnimplementedDeployServiceServer) StartScheduleWorkflow(ctx context.Context, req *WorkflowRequest) (*ScheduleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartScheduleWorkflow not implemented")
}
func (*UnimplementedDeployServiceServer) StopScheduleWorkflow(ctx context.Context, req *WorkflowRequest) (*ScheduleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopScheduleWorkflow not implemented")
}
func (*UnimplementedDeployServiceServer) GetWorkflowExecutionResult(ctx context.Context, req *WorkflowRequest) (*ScheduleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkflowExecutionResult not implemented")
}
func (*UnimplementedDeployServiceServer) IsWorkflowExecutionAlive(ctx context.Context, req *WorkflowRequest) (*ScheduleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsWorkflowExecutionAlive not implemented")
}
func (*UnimplementedDeployServiceServer) GetMasterConfig(ctx context.Context, req *MasterConfigRequest) (*MasterConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMasterConfig not implemented")
}

func RegisterDeployServiceServer(s *grpc.Server, srv DeployServiceServer) {
	s.RegisterService(&_DeployService_serviceDesc, srv)
}

func _DeployService_StartScheduleWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkflowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeployServiceServer).StartScheduleWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai_flow.DeployService/StartScheduleWorkflow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeployServiceServer).StartScheduleWorkflow(ctx, req.(*WorkflowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeployService_StopScheduleWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkflowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeployServiceServer).StopScheduleWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai_flow.DeployService/StopScheduleWorkflow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeployServiceServer).StopScheduleWorkflow(ctx, req.(*WorkflowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeployService_GetWorkflowExecutionResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkflowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeployServiceServer).GetWorkflowExecutionResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai_flow.DeployService/GetWorkflowExecutionResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeployServiceServer).GetWorkflowExecutionResult(ctx, req.(*WorkflowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeployService_IsWorkflowExecutionAlive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkflowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeployServiceServer).IsWorkflowExecutionAlive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai_flow.DeployService/IsWorkflowExecutionAlive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeployServiceServer).IsWorkflowExecutionAlive(ctx, req.(*WorkflowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeployService_GetMasterConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MasterConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeployServiceServer).GetMasterConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai_flow.DeployService/GetMasterConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeployServiceServer).GetMasterConfig(ctx, req.(*MasterConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DeployService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ai_flow.DeployService",
	HandlerType: (*DeployServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "startScheduleWorkflow",
			Handler:    _DeployService_StartScheduleWorkflow_Handler,
		},
		{
			MethodName: "stopScheduleWorkflow",
			Handler:    _DeployService_StopScheduleWorkflow_Handler,
		},
		{
			MethodName: "getWorkflowExecutionResult",
			Handler:    _DeployService_GetWorkflowExecutionResult_Handler,
		},
		{
			MethodName: "isWorkflowExecutionAlive",
			Handler:    _DeployService_IsWorkflowExecutionAlive_Handler,
		},
		{
			MethodName: "getMasterConfig",
			Handler:    _DeployService_GetMasterConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "deploy_service.proto",
}

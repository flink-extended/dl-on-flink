//
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.11.3
// source: scheduling_service.proto

package ai_flow

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	//_ "github.com/grpc-ecosystem/grpc-gateway/third_party/googleapis/google/api"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	_ "google.golang.org/protobuf/types/known/wrapperspb"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ScheduleWorkflowRequest struct {
	Namespace            string            `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	WorkflowName         string            `protobuf:"bytes,2,opt,name=workflow_name,json=workflowName,proto3" json:"workflow_name,omitempty"`
	Args                 map[string]string `protobuf:"bytes,3,rep,name=args,proto3" json:"args,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	WorkflowJson         string            `protobuf:"bytes,4,opt,name=workflow_json,json=workflowJson,proto3" json:"workflow_json,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ScheduleWorkflowRequest) Reset()         { *m = ScheduleWorkflowRequest{} }
func (m *ScheduleWorkflowRequest) String() string { return proto.CompactTextString(m) }
func (*ScheduleWorkflowRequest) ProtoMessage()    {}
func (*ScheduleWorkflowRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a1e357d293bda59, []int{0}
}

func (m *ScheduleWorkflowRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ScheduleWorkflowRequest.Unmarshal(m, b)
}
func (m *ScheduleWorkflowRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ScheduleWorkflowRequest.Marshal(b, m, deterministic)
}
func (m *ScheduleWorkflowRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScheduleWorkflowRequest.Merge(m, src)
}
func (m *ScheduleWorkflowRequest) XXX_Size() int {
	return xxx_messageInfo_ScheduleWorkflowRequest.Size(m)
}
func (m *ScheduleWorkflowRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ScheduleWorkflowRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ScheduleWorkflowRequest proto.InternalMessageInfo

func (m *ScheduleWorkflowRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *ScheduleWorkflowRequest) GetWorkflowName() string {
	if m != nil {
		return m.WorkflowName
	}
	return ""
}

func (m *ScheduleWorkflowRequest) GetArgs() map[string]string {
	if m != nil {
		return m.Args
	}
	return nil
}

func (m *ScheduleWorkflowRequest) GetWorkflowJson() string {
	if m != nil {
		return m.WorkflowJson
	}
	return ""
}

type WorkflowExecutionRequest struct {
	Namespace            string            `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	ExecutionId          string            `protobuf:"bytes,2,opt,name=execution_id,json=executionId,proto3" json:"execution_id,omitempty"`
	WorkflowName         string            `protobuf:"bytes,3,opt,name=workflow_name,json=workflowName,proto3" json:"workflow_name,omitempty"`
	Args                 map[string]string `protobuf:"bytes,4,rep,name=args,proto3" json:"args,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *WorkflowExecutionRequest) Reset()         { *m = WorkflowExecutionRequest{} }
func (m *WorkflowExecutionRequest) String() string { return proto.CompactTextString(m) }
func (*WorkflowExecutionRequest) ProtoMessage()    {}
func (*WorkflowExecutionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a1e357d293bda59, []int{1}
}

func (m *WorkflowExecutionRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WorkflowExecutionRequest.Unmarshal(m, b)
}
func (m *WorkflowExecutionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WorkflowExecutionRequest.Marshal(b, m, deterministic)
}
func (m *WorkflowExecutionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorkflowExecutionRequest.Merge(m, src)
}
func (m *WorkflowExecutionRequest) XXX_Size() int {
	return xxx_messageInfo_WorkflowExecutionRequest.Size(m)
}
func (m *WorkflowExecutionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_WorkflowExecutionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_WorkflowExecutionRequest proto.InternalMessageInfo

func (m *WorkflowExecutionRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *WorkflowExecutionRequest) GetExecutionId() string {
	if m != nil {
		return m.ExecutionId
	}
	return ""
}

func (m *WorkflowExecutionRequest) GetWorkflowName() string {
	if m != nil {
		return m.WorkflowName
	}
	return ""
}

func (m *WorkflowExecutionRequest) GetArgs() map[string]string {
	if m != nil {
		return m.Args
	}
	return nil
}

type ScheduleJobRequest struct {
	Namespace            string   `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	JobName              string   `protobuf:"bytes,2,opt,name=job_name,json=jobName,proto3" json:"job_name,omitempty"`
	ExecutionId          string   `protobuf:"bytes,3,opt,name=execution_id,json=executionId,proto3" json:"execution_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ScheduleJobRequest) Reset()         { *m = ScheduleJobRequest{} }
func (m *ScheduleJobRequest) String() string { return proto.CompactTextString(m) }
func (*ScheduleJobRequest) ProtoMessage()    {}
func (*ScheduleJobRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a1e357d293bda59, []int{2}
}

func (m *ScheduleJobRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ScheduleJobRequest.Unmarshal(m, b)
}
func (m *ScheduleJobRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ScheduleJobRequest.Marshal(b, m, deterministic)
}
func (m *ScheduleJobRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScheduleJobRequest.Merge(m, src)
}
func (m *ScheduleJobRequest) XXX_Size() int {
	return xxx_messageInfo_ScheduleJobRequest.Size(m)
}
func (m *ScheduleJobRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ScheduleJobRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ScheduleJobRequest proto.InternalMessageInfo

func (m *ScheduleJobRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *ScheduleJobRequest) GetJobName() string {
	if m != nil {
		return m.JobName
	}
	return ""
}

func (m *ScheduleJobRequest) GetExecutionId() string {
	if m != nil {
		return m.ExecutionId
	}
	return ""
}

type WorkflowInfoResponse struct {
	Result               *ResultProto   `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	Workflow             *WorkflowProto `protobuf:"bytes,2,opt,name=workflow,proto3" json:"workflow,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *WorkflowInfoResponse) Reset()         { *m = WorkflowInfoResponse{} }
func (m *WorkflowInfoResponse) String() string { return proto.CompactTextString(m) }
func (*WorkflowInfoResponse) ProtoMessage()    {}
func (*WorkflowInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a1e357d293bda59, []int{3}
}

func (m *WorkflowInfoResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WorkflowInfoResponse.Unmarshal(m, b)
}
func (m *WorkflowInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WorkflowInfoResponse.Marshal(b, m, deterministic)
}
func (m *WorkflowInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorkflowInfoResponse.Merge(m, src)
}
func (m *WorkflowInfoResponse) XXX_Size() int {
	return xxx_messageInfo_WorkflowInfoResponse.Size(m)
}
func (m *WorkflowInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_WorkflowInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_WorkflowInfoResponse proto.InternalMessageInfo

func (m *WorkflowInfoResponse) GetResult() *ResultProto {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *WorkflowInfoResponse) GetWorkflow() *WorkflowProto {
	if m != nil {
		return m.Workflow
	}
	return nil
}

type ListWorkflowInfoResponse struct {
	Result               *ResultProto     `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	WorkflowList         []*WorkflowProto `protobuf:"bytes,2,rep,name=workflow_list,json=workflowList,proto3" json:"workflow_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *ListWorkflowInfoResponse) Reset()         { *m = ListWorkflowInfoResponse{} }
func (m *ListWorkflowInfoResponse) String() string { return proto.CompactTextString(m) }
func (*ListWorkflowInfoResponse) ProtoMessage()    {}
func (*ListWorkflowInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a1e357d293bda59, []int{4}
}

func (m *ListWorkflowInfoResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListWorkflowInfoResponse.Unmarshal(m, b)
}
func (m *ListWorkflowInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListWorkflowInfoResponse.Marshal(b, m, deterministic)
}
func (m *ListWorkflowInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListWorkflowInfoResponse.Merge(m, src)
}
func (m *ListWorkflowInfoResponse) XXX_Size() int {
	return xxx_messageInfo_ListWorkflowInfoResponse.Size(m)
}
func (m *ListWorkflowInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListWorkflowInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListWorkflowInfoResponse proto.InternalMessageInfo

func (m *ListWorkflowInfoResponse) GetResult() *ResultProto {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *ListWorkflowInfoResponse) GetWorkflowList() []*WorkflowProto {
	if m != nil {
		return m.WorkflowList
	}
	return nil
}

type WorkflowExecutionResponse struct {
	Result               *ResultProto            `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	WorkflowExecution    *WorkflowExecutionProto `protobuf:"bytes,2,opt,name=workflow_execution,json=workflowExecution,proto3" json:"workflow_execution,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *WorkflowExecutionResponse) Reset()         { *m = WorkflowExecutionResponse{} }
func (m *WorkflowExecutionResponse) String() string { return proto.CompactTextString(m) }
func (*WorkflowExecutionResponse) ProtoMessage()    {}
func (*WorkflowExecutionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a1e357d293bda59, []int{5}
}

func (m *WorkflowExecutionResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WorkflowExecutionResponse.Unmarshal(m, b)
}
func (m *WorkflowExecutionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WorkflowExecutionResponse.Marshal(b, m, deterministic)
}
func (m *WorkflowExecutionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorkflowExecutionResponse.Merge(m, src)
}
func (m *WorkflowExecutionResponse) XXX_Size() int {
	return xxx_messageInfo_WorkflowExecutionResponse.Size(m)
}
func (m *WorkflowExecutionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_WorkflowExecutionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_WorkflowExecutionResponse proto.InternalMessageInfo

func (m *WorkflowExecutionResponse) GetResult() *ResultProto {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *WorkflowExecutionResponse) GetWorkflowExecution() *WorkflowExecutionProto {
	if m != nil {
		return m.WorkflowExecution
	}
	return nil
}

type ListWorkflowExecutionResponse struct {
	Result                *ResultProto              `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	WorkflowExecutionList []*WorkflowExecutionProto `protobuf:"bytes,2,rep,name=workflow_execution_list,json=workflowExecutionList,proto3" json:"workflow_execution_list,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}                  `json:"-"`
	XXX_unrecognized      []byte                    `json:"-"`
	XXX_sizecache         int32                     `json:"-"`
}

func (m *ListWorkflowExecutionResponse) Reset()         { *m = ListWorkflowExecutionResponse{} }
func (m *ListWorkflowExecutionResponse) String() string { return proto.CompactTextString(m) }
func (*ListWorkflowExecutionResponse) ProtoMessage()    {}
func (*ListWorkflowExecutionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a1e357d293bda59, []int{6}
}

func (m *ListWorkflowExecutionResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListWorkflowExecutionResponse.Unmarshal(m, b)
}
func (m *ListWorkflowExecutionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListWorkflowExecutionResponse.Marshal(b, m, deterministic)
}
func (m *ListWorkflowExecutionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListWorkflowExecutionResponse.Merge(m, src)
}
func (m *ListWorkflowExecutionResponse) XXX_Size() int {
	return xxx_messageInfo_ListWorkflowExecutionResponse.Size(m)
}
func (m *ListWorkflowExecutionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListWorkflowExecutionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListWorkflowExecutionResponse proto.InternalMessageInfo

func (m *ListWorkflowExecutionResponse) GetResult() *ResultProto {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *ListWorkflowExecutionResponse) GetWorkflowExecutionList() []*WorkflowExecutionProto {
	if m != nil {
		return m.WorkflowExecutionList
	}
	return nil
}

type JobInfoResponse struct {
	Result               *ResultProto `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	Job                  *JobProto    `protobuf:"bytes,2,opt,name=job,proto3" json:"job,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *JobInfoResponse) Reset()         { *m = JobInfoResponse{} }
func (m *JobInfoResponse) String() string { return proto.CompactTextString(m) }
func (*JobInfoResponse) ProtoMessage()    {}
func (*JobInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a1e357d293bda59, []int{7}
}

func (m *JobInfoResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_JobInfoResponse.Unmarshal(m, b)
}
func (m *JobInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_JobInfoResponse.Marshal(b, m, deterministic)
}
func (m *JobInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JobInfoResponse.Merge(m, src)
}
func (m *JobInfoResponse) XXX_Size() int {
	return xxx_messageInfo_JobInfoResponse.Size(m)
}
func (m *JobInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_JobInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_JobInfoResponse proto.InternalMessageInfo

func (m *JobInfoResponse) GetResult() *ResultProto {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *JobInfoResponse) GetJob() *JobProto {
	if m != nil {
		return m.Job
	}
	return nil
}

type ListJobInfoResponse struct {
	Result               *ResultProto `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	JobList              []*JobProto  `protobuf:"bytes,2,rep,name=job_list,json=jobList,proto3" json:"job_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *ListJobInfoResponse) Reset()         { *m = ListJobInfoResponse{} }
func (m *ListJobInfoResponse) String() string { return proto.CompactTextString(m) }
func (*ListJobInfoResponse) ProtoMessage()    {}
func (*ListJobInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a1e357d293bda59, []int{8}
}

func (m *ListJobInfoResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListJobInfoResponse.Unmarshal(m, b)
}
func (m *ListJobInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListJobInfoResponse.Marshal(b, m, deterministic)
}
func (m *ListJobInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListJobInfoResponse.Merge(m, src)
}
func (m *ListJobInfoResponse) XXX_Size() int {
	return xxx_messageInfo_ListJobInfoResponse.Size(m)
}
func (m *ListJobInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListJobInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListJobInfoResponse proto.InternalMessageInfo

func (m *ListJobInfoResponse) GetResult() *ResultProto {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *ListJobInfoResponse) GetJobList() []*JobProto {
	if m != nil {
		return m.JobList
	}
	return nil
}

func init() {
	proto.RegisterType((*ScheduleWorkflowRequest)(nil), "ai_flow.ScheduleWorkflowRequest")
	proto.RegisterMapType((map[string]string)(nil), "ai_flow.ScheduleWorkflowRequest.ArgsEntry")
	proto.RegisterType((*WorkflowExecutionRequest)(nil), "ai_flow.WorkflowExecutionRequest")
	proto.RegisterMapType((map[string]string)(nil), "ai_flow.WorkflowExecutionRequest.ArgsEntry")
	proto.RegisterType((*ScheduleJobRequest)(nil), "ai_flow.ScheduleJobRequest")
	proto.RegisterType((*WorkflowInfoResponse)(nil), "ai_flow.WorkflowInfoResponse")
	proto.RegisterType((*ListWorkflowInfoResponse)(nil), "ai_flow.ListWorkflowInfoResponse")
	proto.RegisterType((*WorkflowExecutionResponse)(nil), "ai_flow.WorkflowExecutionResponse")
	proto.RegisterType((*ListWorkflowExecutionResponse)(nil), "ai_flow.ListWorkflowExecutionResponse")
	proto.RegisterType((*JobInfoResponse)(nil), "ai_flow.JobInfoResponse")
	proto.RegisterType((*ListJobInfoResponse)(nil), "ai_flow.ListJobInfoResponse")
}

func init() { proto.RegisterFile("scheduling_service.proto", fileDescriptor_3a1e357d293bda59) }

var fileDescriptor_3a1e357d293bda59 = []byte{
	// 949 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x97, 0x41, 0x6f, 0x1b, 0x45,
	0x14, 0xc7, 0x35, 0x71, 0x48, 0x9c, 0xe7, 0x06, 0x92, 0x25, 0x6d, 0x36, 0xdb, 0xb4, 0xb1, 0x27,
	0x34, 0x6d, 0xd3, 0xe0, 0x95, 0xdc, 0x22, 0x20, 0x48, 0xa0, 0x22, 0xf5, 0x50, 0x0b, 0x45, 0xc8,
	0x39, 0x54, 0xe2, 0x62, 0xed, 0xda, 0x93, 0xed, 0x3a, 0xe3, 0x9d, 0xed, 0xce, 0x6e, 0xdd, 0x72,
	0x02, 0x24, 0xa4, 0x8a, 0x13, 0x52, 0xc5, 0x01, 0x0e, 0x48, 0x5c, 0xf8, 0x42, 0xdc, 0x39, 0xf1,
	0x29, 0x38, 0xa1, 0x99, 0x9d, 0x5d, 0x6f, 0xb2, 0x5e, 0x67, 0x5b, 0x3b, 0xdc, 0xe2, 0xf1, 0x1b,
	0xff, 0x7e, 0xf3, 0x7f, 0x6f, 0xc7, 0x0e, 0xe8, 0xbc, 0xf7, 0x94, 0xf4, 0x23, 0xea, 0x7a, 0x4e,
	0x97, 0x93, 0xe0, 0xb9, 0xdb, 0x23, 0x4d, 0x3f, 0x60, 0x21, 0xd3, 0x96, 0x2d, 0xb7, 0x7b, 0x42,
	0xd9, 0xc8, 0xb8, 0xe9, 0x30, 0xe6, 0x50, 0x62, 0xca, 0x65, 0x3b, 0x3a, 0x31, 0x47, 0x81, 0xe5,
	0xfb, 0x24, 0xe0, 0x71, 0xa1, 0xb1, 0x3a, 0x24, 0x9c, 0x5b, 0x8e, 0xda, 0x67, 0x6c, 0xab, 0x72,
	0xcb, 0x77, 0x4d, 0xcb, 0xf3, 0x58, 0x68, 0x85, 0x2e, 0xf3, 0x54, 0x31, 0xfe, 0x17, 0xc1, 0xe6,
	0x71, 0x8c, 0x24, 0x4f, 0x58, 0x70, 0x2a, 0x08, 0x1d, 0xf2, 0x2c, 0x22, 0x3c, 0xd4, 0xb6, 0x61,
	0xc5, 0xb3, 0x86, 0x84, 0xfb, 0x56, 0x8f, 0xe8, 0xa8, 0x8e, 0xee, 0xac, 0x74, 0xc6, 0x0b, 0xda,
	0x2e, 0xac, 0x8e, 0xd4, 0x86, 0xae, 0x58, 0xd5, 0x17, 0x64, 0xc5, 0x95, 0x64, 0xf1, 0xc8, 0x1a,
	0x12, 0xed, 0x73, 0x58, 0xb4, 0x02, 0x87, 0xeb, 0x95, 0x7a, 0xe5, 0x4e, 0xad, 0xb5, 0xdf, 0x54,
	0x67, 0x68, 0x16, 0x20, 0x9b, 0x0f, 0x03, 0x87, 0x3f, 0xf2, 0xc2, 0xe0, 0x65, 0x47, 0xee, 0x3b,
	0x03, 0x19, 0x70, 0xe6, 0xe9, 0x8b, 0x67, 0x21, 0x6d, 0xce, 0x3c, 0xe3, 0x63, 0x58, 0x49, 0xf7,
	0x69, 0x6b, 0x50, 0x39, 0x25, 0x2f, 0x95, 0xae, 0xf8, 0x53, 0xdb, 0x80, 0x77, 0x9e, 0x5b, 0x34,
	0x4a, 0x04, 0xe3, 0x17, 0x87, 0x0b, 0x9f, 0x20, 0x71, 0x78, 0x3d, 0x31, 0x78, 0xf4, 0x82, 0xf4,
	0x22, 0x91, 0x4c, 0xb9, 0xd3, 0x37, 0xe0, 0x0a, 0x49, 0x76, 0x74, 0xdd, 0xbe, 0xfa, 0xec, 0x5a,
	0xba, 0xf6, 0xb8, 0x9f, 0x0f, 0xa8, 0x32, 0x21, 0xa0, 0x2f, 0x54, 0x40, 0x8b, 0x32, 0xa0, 0x7b,
	0x69, 0x40, 0x45, 0x5a, 0xe7, 0x13, 0x7a, 0xfb, 0xc3, 0xfb, 0xa0, 0x25, 0x5d, 0x68, 0x33, 0xbb,
	0xdc, 0xa9, 0xb7, 0xa0, 0x3a, 0x60, 0x76, 0xb6, 0xdd, 0xcb, 0x03, 0x66, 0xcb, 0x83, 0x9c, 0x0f,
	0xa4, 0x92, 0x0b, 0x04, 0xbf, 0x80, 0x8d, 0xe4, 0x58, 0x8f, 0xbd, 0x13, 0xd6, 0x21, 0xdc, 0x67,
	0x1e, 0x27, 0xda, 0x01, 0x2c, 0x05, 0x84, 0x47, 0x34, 0x94, 0xc0, 0x5a, 0x6b, 0x23, 0x4d, 0xa1,
	0x23, 0x97, 0xbf, 0x16, 0x93, 0xda, 0x51, 0x35, 0x5a, 0x0b, 0xaa, 0x49, 0x82, 0xd2, 0xa1, 0xd6,
	0xba, 0x96, 0x4b, 0x2d, 0xde, 0x91, 0xd6, 0xe1, 0x1f, 0x11, 0xe8, 0x5f, 0xb9, 0x3c, 0x9c, 0x03,
	0xfe, 0xb3, 0x4c, 0x57, 0xa9, 0xcb, 0x43, 0x7d, 0x41, 0x76, 0xae, 0xc8, 0x21, 0xed, 0xb6, 0xc0,
	0xe3, 0x5f, 0x11, 0x6c, 0x4d, 0xe8, 0xec, 0x5b, 0x89, 0x1c, 0x81, 0x96, 0x8a, 0xa4, 0x29, 0xab,
	0x44, 0x76, 0x8a, 0xe7, 0x28, 0xfe, 0x90, 0xf5, 0xd1, 0xf9, 0x75, 0xfc, 0x27, 0x82, 0x1b, 0xd9,
	0x8c, 0x66, 0xf5, 0x7b, 0x02, 0x9b, 0x79, 0xbf, 0x6c, 0x64, 0x17, 0x4a, 0x5e, 0xcd, 0x49, 0xca,
	0x10, 0xfb, 0xf0, 0x5e, 0x9b, 0xd9, 0x33, 0xb4, 0x70, 0x17, 0x2a, 0x03, 0x66, 0xab, 0xa8, 0xd6,
	0xd3, 0xd2, 0x36, 0xb3, 0xe3, 0x3a, 0xf1, 0x2e, 0x7e, 0x06, 0xef, 0x0b, 0xda, 0x6c, 0xa4, 0x83,
	0xf8, 0x79, 0xc9, 0x1c, 0x7a, 0x02, 0x4e, 0x3c, 0x42, 0x02, 0xd5, 0xfa, 0x7b, 0x0d, 0xd6, 0x8f,
	0xd3, 0xeb, 0xff, 0x38, 0xbe, 0xfd, 0xb5, 0xef, 0x10, 0xbc, 0xcb, 0x23, 0x7b, 0xe8, 0xa6, 0x9d,
	0xd1, 0xea, 0x17, 0xdd, 0xa3, 0xc6, 0x8d, 0x5c, 0xb6, 0xd9, 0x53, 0xe0, 0x0f, 0x7f, 0xf8, 0xeb,
	0x9f, 0xd7, 0x0b, 0xb7, 0x31, 0x36, 0x2d, 0x57, 0xbc, 0x69, 0x8e, 0xbf, 0x75, 0xcc, 0x24, 0x74,
	0x33, 0x86, 0x1e, 0xa2, 0x7d, 0xa9, 0xd0, 0x27, 0x94, 0x84, 0xe4, 0x7f, 0x56, 0x88, 0xa1, 0x42,
	0xe1, 0x15, 0x82, 0x4d, 0xdf, 0x8a, 0x78, 0x8a, 0x19, 0x07, 0x35, 0xbb, 0xcb, 0x81, 0x74, 0xd9,
	0xc3, 0x8d, 0x69, 0x2e, 0x92, 0x2e, 0x54, 0x7e, 0x42, 0xa0, 0x8b, 0xfe, 0x0e, 0x2f, 0xc5, 0xa5,
	0x54, 0x2e, 0x31, 0x5e, 0xc8, 0x7c, 0x0b, 0x35, 0x87, 0xcc, 0x71, 0x32, 0xf6, 0x25, 0xfe, 0x03,
	0xbc, 0x33, 0x0d, 0xef, 0x10, 0x39, 0x16, 0xdf, 0x23, 0x58, 0xa5, 0x99, 0x1b, 0x83, 0x97, 0xc0,
	0x37, 0xd2, 0x8a, 0xa2, 0xfb, 0x18, 0xdf, 0x93, 0x0a, 0xb7, 0x70, 0x7d, 0x9a, 0x82, 0xe0, 0x0a,
	0x87, 0xdf, 0x11, 0x6c, 0xf1, 0xd0, 0x0a, 0xc2, 0x23, 0x32, 0xca, 0x5d, 0x23, 0x5a, 0xe3, 0xc2,
	0xef, 0x53, 0x03, 0x4f, 0x2b, 0x51, 0x46, 0x87, 0xd2, 0xe8, 0x01, 0x36, 0xa7, 0x18, 0x8d, 0xef,
	0x38, 0x53, 0xfa, 0x74, 0x3d, 0x32, 0x12, 0x82, 0x7f, 0x20, 0xd8, 0x3a, 0x75, 0x29, 0x7d, 0x48,
	0x69, 0x0e, 0xc0, 0xcb, 0x08, 0xee, 0x4d, 0x4c, 0x2c, 0x2f, 0xf9, 0xa9, 0x94, 0xbc, 0x8f, 0x9b,
	0xe5, 0x24, 0x85, 0x53, 0xd7, 0xa2, 0x54, 0x38, 0xfe, 0x82, 0xe0, 0xaa, 0x78, 0x7d, 0x69, 0x01,
	0x7e, 0x24, 0xdd, 0x4c, 0xbc, 0x5f, 0xde, 0x4d, 0x78, 0xbd, 0x46, 0xb0, 0x91, 0x99, 0xee, 0xb9,
	0x6b, 0x3d, 0x90, 0x5a, 0x4d, 0x7c, 0xb7, 0x9c, 0x96, 0x1a, 0xfb, 0xdf, 0x10, 0x5c, 0xa3, 0x93,
	0x5a, 0x31, 0xd7, 0x76, 0xbe, 0x61, 0x64, 0xc9, 0xf3, 0x30, 0x80, 0xaa, 0x1c, 0xbf, 0x36, 0xb3,
	0xb5, 0xeb, 0xb9, 0xa7, 0x71, 0xfc, 0x43, 0xcf, 0xd0, 0xb3, 0x5f, 0x44, 0x67, 0x9e, 0xbf, 0xdb,
	0x92, 0xdc, 0xc0, 0xdb, 0x13, 0xc8, 0x03, 0x66, 0xc7, 0xe3, 0x2d, 0x58, 0x4f, 0x61, 0x99, 0x87,
	0xcc, 0x9f, 0x01, 0xb5, 0x27, 0x51, 0x75, 0x7c, 0xbd, 0x10, 0xc5, 0x7c, 0x41, 0xf2, 0x00, 0x02,
	0x32, 0xeb, 0xb9, 0xee, 0x4a, 0xd8, 0x2e, 0xbe, 0x59, 0x00, 0x53, 0x04, 0xc1, 0x3b, 0x81, 0x25,
	0x87, 0xcc, 0xc2, 0xba, 0x25, 0x59, 0x3b, 0xd8, 0x28, 0x60, 0xa9, 0x51, 0x1a, 0x42, 0x95, 0xc6,
	0x3f, 0x32, 0xf8, 0x74, 0xd2, 0xf6, 0x99, 0xa9, 0x79, 0xd3, 0x18, 0xd5, 0x70, 0x7c, 0x89, 0x61,
	0xad, 0xc7, 0x86, 0xcd, 0xb8, 0x28, 0xfe, 0x07, 0xf0, 0x9b, 0xaa, 0xa9, 0x3e, 0xf9, 0x15, 0x42,
	0x3f, 0x23, 0x64, 0x2f, 0xc9, 0xe5, 0xfb, 0xff, 0x05, 0x00, 0x00, 0xff, 0xff, 0xea, 0x3e, 0x44,
	0x30, 0x89, 0x0e, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// SchedulingServiceClient is the client API for SchedulingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SchedulingServiceClient interface {
	// workflow api
	SubmitWorkflow(ctx context.Context, in *ScheduleWorkflowRequest, opts ...grpc.CallOption) (*WorkflowInfoResponse, error)
	DeleteWorkflow(ctx context.Context, in *ScheduleWorkflowRequest, opts ...grpc.CallOption) (*WorkflowInfoResponse, error)
	PauseWorkflowScheduling(ctx context.Context, in *ScheduleWorkflowRequest, opts ...grpc.CallOption) (*WorkflowInfoResponse, error)
	ResumeWorkflowScheduling(ctx context.Context, in *ScheduleWorkflowRequest, opts ...grpc.CallOption) (*WorkflowInfoResponse, error)
	GetWorkflow(ctx context.Context, in *ScheduleWorkflowRequest, opts ...grpc.CallOption) (*WorkflowInfoResponse, error)
	ListWorkflows(ctx context.Context, in *ScheduleWorkflowRequest, opts ...grpc.CallOption) (*ListWorkflowInfoResponse, error)
	// workflow execution api
	StartNewWorkflowExecution(ctx context.Context, in *WorkflowExecutionRequest, opts ...grpc.CallOption) (*WorkflowExecutionResponse, error)
	KillAllWorkflowExecutions(ctx context.Context, in *WorkflowExecutionRequest, opts ...grpc.CallOption) (*ListWorkflowExecutionResponse, error)
	KillWorkflowExecution(ctx context.Context, in *WorkflowExecutionRequest, opts ...grpc.CallOption) (*WorkflowExecutionResponse, error)
	GetWorkflowExecution(ctx context.Context, in *WorkflowExecutionRequest, opts ...grpc.CallOption) (*WorkflowExecutionResponse, error)
	ListWorkflowExecutions(ctx context.Context, in *WorkflowExecutionRequest, opts ...grpc.CallOption) (*ListWorkflowExecutionResponse, error)
	// job api
	StartJob(ctx context.Context, in *ScheduleJobRequest, opts ...grpc.CallOption) (*JobInfoResponse, error)
	StopJob(ctx context.Context, in *ScheduleJobRequest, opts ...grpc.CallOption) (*JobInfoResponse, error)
	RestartJob(ctx context.Context, in *ScheduleJobRequest, opts ...grpc.CallOption) (*JobInfoResponse, error)
	GetJob(ctx context.Context, in *ScheduleJobRequest, opts ...grpc.CallOption) (*JobInfoResponse, error)
	ListJobs(ctx context.Context, in *ScheduleJobRequest, opts ...grpc.CallOption) (*ListJobInfoResponse, error)
}

type schedulingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSchedulingServiceClient(cc grpc.ClientConnInterface) SchedulingServiceClient {
	return &schedulingServiceClient{cc}
}

func (c *schedulingServiceClient) SubmitWorkflow(ctx context.Context, in *ScheduleWorkflowRequest, opts ...grpc.CallOption) (*WorkflowInfoResponse, error) {
	out := new(WorkflowInfoResponse)
	err := c.cc.Invoke(ctx, "/ai_flow.SchedulingService/submitWorkflow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulingServiceClient) DeleteWorkflow(ctx context.Context, in *ScheduleWorkflowRequest, opts ...grpc.CallOption) (*WorkflowInfoResponse, error) {
	out := new(WorkflowInfoResponse)
	err := c.cc.Invoke(ctx, "/ai_flow.SchedulingService/deleteWorkflow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulingServiceClient) PauseWorkflowScheduling(ctx context.Context, in *ScheduleWorkflowRequest, opts ...grpc.CallOption) (*WorkflowInfoResponse, error) {
	out := new(WorkflowInfoResponse)
	err := c.cc.Invoke(ctx, "/ai_flow.SchedulingService/pauseWorkflowScheduling", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulingServiceClient) ResumeWorkflowScheduling(ctx context.Context, in *ScheduleWorkflowRequest, opts ...grpc.CallOption) (*WorkflowInfoResponse, error) {
	out := new(WorkflowInfoResponse)
	err := c.cc.Invoke(ctx, "/ai_flow.SchedulingService/resumeWorkflowScheduling", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulingServiceClient) GetWorkflow(ctx context.Context, in *ScheduleWorkflowRequest, opts ...grpc.CallOption) (*WorkflowInfoResponse, error) {
	out := new(WorkflowInfoResponse)
	err := c.cc.Invoke(ctx, "/ai_flow.SchedulingService/getWorkflow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulingServiceClient) ListWorkflows(ctx context.Context, in *ScheduleWorkflowRequest, opts ...grpc.CallOption) (*ListWorkflowInfoResponse, error) {
	out := new(ListWorkflowInfoResponse)
	err := c.cc.Invoke(ctx, "/ai_flow.SchedulingService/listWorkflows", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulingServiceClient) StartNewWorkflowExecution(ctx context.Context, in *WorkflowExecutionRequest, opts ...grpc.CallOption) (*WorkflowExecutionResponse, error) {
	out := new(WorkflowExecutionResponse)
	err := c.cc.Invoke(ctx, "/ai_flow.SchedulingService/startNewWorkflowExecution", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulingServiceClient) KillAllWorkflowExecutions(ctx context.Context, in *WorkflowExecutionRequest, opts ...grpc.CallOption) (*ListWorkflowExecutionResponse, error) {
	out := new(ListWorkflowExecutionResponse)
	err := c.cc.Invoke(ctx, "/ai_flow.SchedulingService/killAllWorkflowExecutions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulingServiceClient) KillWorkflowExecution(ctx context.Context, in *WorkflowExecutionRequest, opts ...grpc.CallOption) (*WorkflowExecutionResponse, error) {
	out := new(WorkflowExecutionResponse)
	err := c.cc.Invoke(ctx, "/ai_flow.SchedulingService/killWorkflowExecution", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulingServiceClient) GetWorkflowExecution(ctx context.Context, in *WorkflowExecutionRequest, opts ...grpc.CallOption) (*WorkflowExecutionResponse, error) {
	out := new(WorkflowExecutionResponse)
	err := c.cc.Invoke(ctx, "/ai_flow.SchedulingService/getWorkflowExecution", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulingServiceClient) ListWorkflowExecutions(ctx context.Context, in *WorkflowExecutionRequest, opts ...grpc.CallOption) (*ListWorkflowExecutionResponse, error) {
	out := new(ListWorkflowExecutionResponse)
	err := c.cc.Invoke(ctx, "/ai_flow.SchedulingService/listWorkflowExecutions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulingServiceClient) StartJob(ctx context.Context, in *ScheduleJobRequest, opts ...grpc.CallOption) (*JobInfoResponse, error) {
	out := new(JobInfoResponse)
	err := c.cc.Invoke(ctx, "/ai_flow.SchedulingService/startJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulingServiceClient) StopJob(ctx context.Context, in *ScheduleJobRequest, opts ...grpc.CallOption) (*JobInfoResponse, error) {
	out := new(JobInfoResponse)
	err := c.cc.Invoke(ctx, "/ai_flow.SchedulingService/stopJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulingServiceClient) RestartJob(ctx context.Context, in *ScheduleJobRequest, opts ...grpc.CallOption) (*JobInfoResponse, error) {
	out := new(JobInfoResponse)
	err := c.cc.Invoke(ctx, "/ai_flow.SchedulingService/restartJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulingServiceClient) GetJob(ctx context.Context, in *ScheduleJobRequest, opts ...grpc.CallOption) (*JobInfoResponse, error) {
	out := new(JobInfoResponse)
	err := c.cc.Invoke(ctx, "/ai_flow.SchedulingService/getJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulingServiceClient) ListJobs(ctx context.Context, in *ScheduleJobRequest, opts ...grpc.CallOption) (*ListJobInfoResponse, error) {
	out := new(ListJobInfoResponse)
	err := c.cc.Invoke(ctx, "/ai_flow.SchedulingService/listJobs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SchedulingServiceServer is the server API for SchedulingService service.
type SchedulingServiceServer interface {
	// workflow api
	SubmitWorkflow(context.Context, *ScheduleWorkflowRequest) (*WorkflowInfoResponse, error)
	DeleteWorkflow(context.Context, *ScheduleWorkflowRequest) (*WorkflowInfoResponse, error)
	PauseWorkflowScheduling(context.Context, *ScheduleWorkflowRequest) (*WorkflowInfoResponse, error)
	ResumeWorkflowScheduling(context.Context, *ScheduleWorkflowRequest) (*WorkflowInfoResponse, error)
	GetWorkflow(context.Context, *ScheduleWorkflowRequest) (*WorkflowInfoResponse, error)
	ListWorkflows(context.Context, *ScheduleWorkflowRequest) (*ListWorkflowInfoResponse, error)
	// workflow execution api
	StartNewWorkflowExecution(context.Context, *WorkflowExecutionRequest) (*WorkflowExecutionResponse, error)
	KillAllWorkflowExecutions(context.Context, *WorkflowExecutionRequest) (*ListWorkflowExecutionResponse, error)
	KillWorkflowExecution(context.Context, *WorkflowExecutionRequest) (*WorkflowExecutionResponse, error)
	GetWorkflowExecution(context.Context, *WorkflowExecutionRequest) (*WorkflowExecutionResponse, error)
	ListWorkflowExecutions(context.Context, *WorkflowExecutionRequest) (*ListWorkflowExecutionResponse, error)
	// job api
	StartJob(context.Context, *ScheduleJobRequest) (*JobInfoResponse, error)
	StopJob(context.Context, *ScheduleJobRequest) (*JobInfoResponse, error)
	RestartJob(context.Context, *ScheduleJobRequest) (*JobInfoResponse, error)
	GetJob(context.Context, *ScheduleJobRequest) (*JobInfoResponse, error)
	ListJobs(context.Context, *ScheduleJobRequest) (*ListJobInfoResponse, error)
}

// UnimplementedSchedulingServiceServer can be embedded to have forward compatible implementations.
type UnimplementedSchedulingServiceServer struct {
}

func (*UnimplementedSchedulingServiceServer) SubmitWorkflow(ctx context.Context, req *ScheduleWorkflowRequest) (*WorkflowInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitWorkflow not implemented")
}
func (*UnimplementedSchedulingServiceServer) DeleteWorkflow(ctx context.Context, req *ScheduleWorkflowRequest) (*WorkflowInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWorkflow not implemented")
}
func (*UnimplementedSchedulingServiceServer) PauseWorkflowScheduling(ctx context.Context, req *ScheduleWorkflowRequest) (*WorkflowInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PauseWorkflowScheduling not implemented")
}
func (*UnimplementedSchedulingServiceServer) ResumeWorkflowScheduling(ctx context.Context, req *ScheduleWorkflowRequest) (*WorkflowInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResumeWorkflowScheduling not implemented")
}
func (*UnimplementedSchedulingServiceServer) GetWorkflow(ctx context.Context, req *ScheduleWorkflowRequest) (*WorkflowInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkflow not implemented")
}
func (*UnimplementedSchedulingServiceServer) ListWorkflows(ctx context.Context, req *ScheduleWorkflowRequest) (*ListWorkflowInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWorkflows not implemented")
}
func (*UnimplementedSchedulingServiceServer) StartNewWorkflowExecution(ctx context.Context, req *WorkflowExecutionRequest) (*WorkflowExecutionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartNewWorkflowExecution not implemented")
}
func (*UnimplementedSchedulingServiceServer) KillAllWorkflowExecutions(ctx context.Context, req *WorkflowExecutionRequest) (*ListWorkflowExecutionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KillAllWorkflowExecutions not implemented")
}
func (*UnimplementedSchedulingServiceServer) KillWorkflowExecution(ctx context.Context, req *WorkflowExecutionRequest) (*WorkflowExecutionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KillWorkflowExecution not implemented")
}
func (*UnimplementedSchedulingServiceServer) GetWorkflowExecution(ctx context.Context, req *WorkflowExecutionRequest) (*WorkflowExecutionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkflowExecution not implemented")
}
func (*UnimplementedSchedulingServiceServer) ListWorkflowExecutions(ctx context.Context, req *WorkflowExecutionRequest) (*ListWorkflowExecutionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWorkflowExecutions not implemented")
}
func (*UnimplementedSchedulingServiceServer) StartJob(ctx context.Context, req *ScheduleJobRequest) (*JobInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartJob not implemented")
}
func (*UnimplementedSchedulingServiceServer) StopJob(ctx context.Context, req *ScheduleJobRequest) (*JobInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopJob not implemented")
}
func (*UnimplementedSchedulingServiceServer) RestartJob(ctx context.Context, req *ScheduleJobRequest) (*JobInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestartJob not implemented")
}
func (*UnimplementedSchedulingServiceServer) GetJob(ctx context.Context, req *ScheduleJobRequest) (*JobInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJob not implemented")
}
func (*UnimplementedSchedulingServiceServer) ListJobs(ctx context.Context, req *ScheduleJobRequest) (*ListJobInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListJobs not implemented")
}

func RegisterSchedulingServiceServer(s *grpc.Server, srv SchedulingServiceServer) {
	s.RegisterService(&_SchedulingService_serviceDesc, srv)
}

func _SchedulingService_SubmitWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScheduleWorkflowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulingServiceServer).SubmitWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai_flow.SchedulingService/SubmitWorkflow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulingServiceServer).SubmitWorkflow(ctx, req.(*ScheduleWorkflowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchedulingService_DeleteWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScheduleWorkflowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulingServiceServer).DeleteWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai_flow.SchedulingService/DeleteWorkflow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulingServiceServer).DeleteWorkflow(ctx, req.(*ScheduleWorkflowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchedulingService_PauseWorkflowScheduling_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScheduleWorkflowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulingServiceServer).PauseWorkflowScheduling(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai_flow.SchedulingService/PauseWorkflowScheduling",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulingServiceServer).PauseWorkflowScheduling(ctx, req.(*ScheduleWorkflowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchedulingService_ResumeWorkflowScheduling_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScheduleWorkflowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulingServiceServer).ResumeWorkflowScheduling(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai_flow.SchedulingService/ResumeWorkflowScheduling",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulingServiceServer).ResumeWorkflowScheduling(ctx, req.(*ScheduleWorkflowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchedulingService_GetWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScheduleWorkflowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulingServiceServer).GetWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai_flow.SchedulingService/GetWorkflow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulingServiceServer).GetWorkflow(ctx, req.(*ScheduleWorkflowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchedulingService_ListWorkflows_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScheduleWorkflowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulingServiceServer).ListWorkflows(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai_flow.SchedulingService/ListWorkflows",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulingServiceServer).ListWorkflows(ctx, req.(*ScheduleWorkflowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchedulingService_StartNewWorkflowExecution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkflowExecutionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulingServiceServer).StartNewWorkflowExecution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai_flow.SchedulingService/StartNewWorkflowExecution",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulingServiceServer).StartNewWorkflowExecution(ctx, req.(*WorkflowExecutionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchedulingService_KillAllWorkflowExecutions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkflowExecutionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulingServiceServer).KillAllWorkflowExecutions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai_flow.SchedulingService/KillAllWorkflowExecutions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulingServiceServer).KillAllWorkflowExecutions(ctx, req.(*WorkflowExecutionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchedulingService_KillWorkflowExecution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkflowExecutionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulingServiceServer).KillWorkflowExecution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai_flow.SchedulingService/KillWorkflowExecution",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulingServiceServer).KillWorkflowExecution(ctx, req.(*WorkflowExecutionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchedulingService_GetWorkflowExecution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkflowExecutionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulingServiceServer).GetWorkflowExecution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai_flow.SchedulingService/GetWorkflowExecution",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulingServiceServer).GetWorkflowExecution(ctx, req.(*WorkflowExecutionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchedulingService_ListWorkflowExecutions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkflowExecutionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulingServiceServer).ListWorkflowExecutions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai_flow.SchedulingService/ListWorkflowExecutions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulingServiceServer).ListWorkflowExecutions(ctx, req.(*WorkflowExecutionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchedulingService_StartJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScheduleJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulingServiceServer).StartJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai_flow.SchedulingService/StartJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulingServiceServer).StartJob(ctx, req.(*ScheduleJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchedulingService_StopJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScheduleJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulingServiceServer).StopJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai_flow.SchedulingService/StopJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulingServiceServer).StopJob(ctx, req.(*ScheduleJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchedulingService_RestartJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScheduleJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulingServiceServer).RestartJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai_flow.SchedulingService/RestartJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulingServiceServer).RestartJob(ctx, req.(*ScheduleJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchedulingService_GetJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScheduleJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulingServiceServer).GetJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai_flow.SchedulingService/GetJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulingServiceServer).GetJob(ctx, req.(*ScheduleJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchedulingService_ListJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScheduleJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulingServiceServer).ListJobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai_flow.SchedulingService/ListJobs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulingServiceServer).ListJobs(ctx, req.(*ScheduleJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SchedulingService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ai_flow.SchedulingService",
	HandlerType: (*SchedulingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "submitWorkflow",
			Handler:    _SchedulingService_SubmitWorkflow_Handler,
		},
		{
			MethodName: "deleteWorkflow",
			Handler:    _SchedulingService_DeleteWorkflow_Handler,
		},
		{
			MethodName: "pauseWorkflowScheduling",
			Handler:    _SchedulingService_PauseWorkflowScheduling_Handler,
		},
		{
			MethodName: "resumeWorkflowScheduling",
			Handler:    _SchedulingService_ResumeWorkflowScheduling_Handler,
		},
		{
			MethodName: "getWorkflow",
			Handler:    _SchedulingService_GetWorkflow_Handler,
		},
		{
			MethodName: "listWorkflows",
			Handler:    _SchedulingService_ListWorkflows_Handler,
		},
		{
			MethodName: "startNewWorkflowExecution",
			Handler:    _SchedulingService_StartNewWorkflowExecution_Handler,
		},
		{
			MethodName: "killAllWorkflowExecutions",
			Handler:    _SchedulingService_KillAllWorkflowExecutions_Handler,
		},
		{
			MethodName: "killWorkflowExecution",
			Handler:    _SchedulingService_KillWorkflowExecution_Handler,
		},
		{
			MethodName: "getWorkflowExecution",
			Handler:    _SchedulingService_GetWorkflowExecution_Handler,
		},
		{
			MethodName: "listWorkflowExecutions",
			Handler:    _SchedulingService_ListWorkflowExecutions_Handler,
		},
		{
			MethodName: "startJob",
			Handler:    _SchedulingService_StartJob_Handler,
		},
		{
			MethodName: "stopJob",
			Handler:    _SchedulingService_StopJob_Handler,
		},
		{
			MethodName: "restartJob",
			Handler:    _SchedulingService_RestartJob_Handler,
		},
		{
			MethodName: "getJob",
			Handler:    _SchedulingService_GetJob_Handler,
		},
		{
			MethodName: "listJobs",
			Handler:    _SchedulingService_ListJobs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "scheduling_service.proto",
}

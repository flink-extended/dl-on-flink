//
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.11.3
// source: message.proto

package ai_flow

import (
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ReturnCode int32

const (
	// Success response, which represents request execution success.
	ReturnCode_SUCCESS ReturnCode = 0
	//
	// Internal, system-level error codes, which generally cannot be resolved by the user, but
	// instead are due to service issues.
	//
	// Generic internal error occurred.
	ReturnCode_INTERNAL_ERROR ReturnCode = 1
	// An internal system could not be contacted due to a period of unavailability.
	ReturnCode_TEMPORARILY_UNAVAILABLE ReturnCode = 2
	// Indicates that an IOException has been internally thrown.
	ReturnCode_IO_ERROR ReturnCode = 3
	// The request is invalid.
	ReturnCode_BAD_REQUEST ReturnCode = 4
	//
	// Common application-level error codes, which were caused by the user input but may be returned
	// by multiple services.
	//
	// Supplied value for a parameter was invalid (e.g., giving a number for a string parameter).
	ReturnCode_INVALID_PARAMETER_VALUE ReturnCode = 1000
	// Indicates that the given API endpoint does not exist.
	ReturnCode_ENDPOINT_NOT_FOUND ReturnCode = 1001
	// Indicates that the given API request was malformed.
	ReturnCode_MALFORMED_REQUEST ReturnCode = 1002
	// If one or more of the inputs to a given RPC are not in a valid state for the action.
	ReturnCode_INVALID_STATE ReturnCode = 1003
	// If a given user/entity doesn't have the required permission(s) to perform an action
	ReturnCode_PERMISSION_DENIED ReturnCode = 1004
	// If a given user/entity is trying to use a feature which has been disabled
	ReturnCode_FEATURE_DISABLED ReturnCode = 1005
	// If customer-provided credentials are not authorized to perform an operation
	ReturnCode_CUSTOMER_UNAUTHORIZED ReturnCode = 1006
	// If the API request is rejected due to throttling
	ReturnCode_REQUEST_LIMIT_EXCEEDED ReturnCode = 1007
	// Operation was performed on a resource that already exists.
	ReturnCode_RESOURCE_ALREADY_EXISTS ReturnCode = 2001
	// Operation was performed on a resource that does not exist.
	ReturnCode_RESOURCE_DOES_NOT_EXIST ReturnCode = 2002
	// DBFS
	ReturnCode_QUOTA_EXCEEDED          ReturnCode = 3001
	ReturnCode_MAX_BLOCK_SIZE_EXCEEDED ReturnCode = 3002
	ReturnCode_MAX_READ_SIZE_EXCEEDED  ReturnCode = 3003
)

// Enum value maps for ReturnCode.
var (
	ReturnCode_name = map[int32]string{
		0:    "SUCCESS",
		1:    "INTERNAL_ERROR",
		2:    "TEMPORARILY_UNAVAILABLE",
		3:    "IO_ERROR",
		4:    "BAD_REQUEST",
		1000: "INVALID_PARAMETER_VALUE",
		1001: "ENDPOINT_NOT_FOUND",
		1002: "MALFORMED_REQUEST",
		1003: "INVALID_STATE",
		1004: "PERMISSION_DENIED",
		1005: "FEATURE_DISABLED",
		1006: "CUSTOMER_UNAUTHORIZED",
		1007: "REQUEST_LIMIT_EXCEEDED",
		2001: "RESOURCE_ALREADY_EXISTS",
		2002: "RESOURCE_DOES_NOT_EXIST",
		3001: "QUOTA_EXCEEDED",
		3002: "MAX_BLOCK_SIZE_EXCEEDED",
		3003: "MAX_READ_SIZE_EXCEEDED",
	}
	ReturnCode_value = map[string]int32{
		"SUCCESS":                 0,
		"INTERNAL_ERROR":          1,
		"TEMPORARILY_UNAVAILABLE": 2,
		"IO_ERROR":                3,
		"BAD_REQUEST":             4,
		"INVALID_PARAMETER_VALUE": 1000,
		"ENDPOINT_NOT_FOUND":      1001,
		"MALFORMED_REQUEST":       1002,
		"INVALID_STATE":           1003,
		"PERMISSION_DENIED":       1004,
		"FEATURE_DISABLED":        1005,
		"CUSTOMER_UNAUTHORIZED":   1006,
		"REQUEST_LIMIT_EXCEEDED":  1007,
		"RESOURCE_ALREADY_EXISTS": 2001,
		"RESOURCE_DOES_NOT_EXIST": 2002,
		"QUOTA_EXCEEDED":          3001,
		"MAX_BLOCK_SIZE_EXCEEDED": 3002,
		"MAX_READ_SIZE_EXCEEDED":  3003,
	}
)

func (x ReturnCode) Enum() *ReturnCode {
	p := new(ReturnCode)
	*p = x
	return p
}

func (x ReturnCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReturnCode) Descriptor() protoreflect.EnumDescriptor {
	return file_message_proto_enumTypes[0].Descriptor()
}

func (ReturnCode) Type() protoreflect.EnumType {
	return &file_message_proto_enumTypes[0]
}

func (x ReturnCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReturnCode.Descriptor instead.
func (ReturnCode) EnumDescriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{0}
}

type StatusProto int32

const (
	StatusProto_OK    StatusProto = 0
	StatusProto_ERROR StatusProto = 1
)

// Enum value maps for StatusProto.
var (
	StatusProto_name = map[int32]string{
		0: "OK",
		1: "ERROR",
	}
	StatusProto_value = map[string]int32{
		"OK":    0,
		"ERROR": 1,
	}
)

func (x StatusProto) Enum() *StatusProto {
	p := new(StatusProto)
	*p = x
	return p
}

func (x StatusProto) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StatusProto) Descriptor() protoreflect.EnumDescriptor {
	return file_message_proto_enumTypes[1].Descriptor()
}

func (StatusProto) Type() protoreflect.EnumType {
	return &file_message_proto_enumTypes[1]
}

func (x StatusProto) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StatusProto.Descriptor instead.
func (StatusProto) EnumDescriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{1}
}

type DataTypeProto int32

const (
	DataTypeProto_DATA_TYPE_UNSPECIFIED DataTypeProto = 0
	DataTypeProto_INT32                 DataTypeProto = 1
	DataTypeProto_INT64                 DataTypeProto = 2
	DataTypeProto_FLOAT32               DataTypeProto = 3
	DataTypeProto_FLOAT64               DataTypeProto = 4
	DataTypeProto_STRING                DataTypeProto = 5
	DataTypeProto_INT32ARRAY            DataTypeProto = 6
	DataTypeProto_INT64ARRAY            DataTypeProto = 7
	DataTypeProto_FlOAT32ARRAY          DataTypeProto = 8
	DataTypeProto_FLOAT64ARRAY          DataTypeProto = 9
	DataTypeProto_STRINGARRAY           DataTypeProto = 10
	DataTypeProto_BYTES                 DataTypeProto = 11
	DataTypeProto_BYTESARRAY            DataTypeProto = 12
)

// Enum value maps for DataTypeProto.
var (
	DataTypeProto_name = map[int32]string{
		0:  "DATA_TYPE_UNSPECIFIED",
		1:  "INT32",
		2:  "INT64",
		3:  "FLOAT32",
		4:  "FLOAT64",
		5:  "STRING",
		6:  "INT32ARRAY",
		7:  "INT64ARRAY",
		8:  "FlOAT32ARRAY",
		9:  "FLOAT64ARRAY",
		10: "STRINGARRAY",
		11: "BYTES",
		12: "BYTESARRAY",
	}
	DataTypeProto_value = map[string]int32{
		"DATA_TYPE_UNSPECIFIED": 0,
		"INT32":                 1,
		"INT64":                 2,
		"FLOAT32":               3,
		"FLOAT64":               4,
		"STRING":                5,
		"INT32ARRAY":            6,
		"INT64ARRAY":            7,
		"FlOAT32ARRAY":          8,
		"FLOAT64ARRAY":          9,
		"STRINGARRAY":           10,
		"BYTES":                 11,
		"BYTESARRAY":            12,
	}
)

func (x DataTypeProto) Enum() *DataTypeProto {
	p := new(DataTypeProto)
	*p = x
	return p
}

func (x DataTypeProto) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DataTypeProto) Descriptor() protoreflect.EnumDescriptor {
	return file_message_proto_enumTypes[2].Descriptor()
}

func (DataTypeProto) Type() protoreflect.EnumType {
	return &file_message_proto_enumTypes[2]
}

func (x DataTypeProto) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DataTypeProto.Descriptor instead.
func (DataTypeProto) EnumDescriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{2}
}

type ExampleSupportTypeProto int32

const (
	ExampleSupportTypeProto_EXAMPLE_SUPPORT_TYPE_UNSPECIFIED ExampleSupportTypeProto = 0
	ExampleSupportTypeProto_EXAMPLE_STREAM                   ExampleSupportTypeProto = 1
	ExampleSupportTypeProto_EXAMPLE_BATCH                    ExampleSupportTypeProto = 2
	ExampleSupportTypeProto_EXAMPLE_BOTH                     ExampleSupportTypeProto = 3
)

// Enum value maps for ExampleSupportTypeProto.
var (
	ExampleSupportTypeProto_name = map[int32]string{
		0: "EXAMPLE_SUPPORT_TYPE_UNSPECIFIED",
		1: "EXAMPLE_STREAM",
		2: "EXAMPLE_BATCH",
		3: "EXAMPLE_BOTH",
	}
	ExampleSupportTypeProto_value = map[string]int32{
		"EXAMPLE_SUPPORT_TYPE_UNSPECIFIED": 0,
		"EXAMPLE_STREAM":                   1,
		"EXAMPLE_BATCH":                    2,
		"EXAMPLE_BOTH":                     3,
	}
)

func (x ExampleSupportTypeProto) Enum() *ExampleSupportTypeProto {
	p := new(ExampleSupportTypeProto)
	*p = x
	return p
}

func (x ExampleSupportTypeProto) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExampleSupportTypeProto) Descriptor() protoreflect.EnumDescriptor {
	return file_message_proto_enumTypes[3].Descriptor()
}

func (ExampleSupportTypeProto) Type() protoreflect.EnumType {
	return &file_message_proto_enumTypes[3]
}

func (x ExampleSupportTypeProto) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExampleSupportTypeProto.Descriptor instead.
func (ExampleSupportTypeProto) EnumDescriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{3}
}

type StateProto int32

const (
	StateProto_STATE_UNSPECIFIED StateProto = 0
	StateProto_INIT              StateProto = 1
	StateProto_STARTING          StateProto = 2
	StateProto_RUNNING           StateProto = 3
	StateProto_FINISHED          StateProto = 4
	StateProto_FAILED            StateProto = 5
	StateProto_KILLING           StateProto = 6
	StateProto_KILLED            StateProto = 7
)

// Enum value maps for StateProto.
var (
	StateProto_name = map[int32]string{
		0: "STATE_UNSPECIFIED",
		1: "INIT",
		2: "STARTING",
		3: "RUNNING",
		4: "FINISHED",
		5: "FAILED",
		6: "KILLING",
		7: "KILLED",
	}
	StateProto_value = map[string]int32{
		"STATE_UNSPECIFIED": 0,
		"INIT":              1,
		"STARTING":          2,
		"RUNNING":           3,
		"FINISHED":          4,
		"FAILED":            5,
		"KILLING":           6,
		"KILLED":            7,
	}
)

func (x StateProto) Enum() *StateProto {
	p := new(StateProto)
	*p = x
	return p
}

func (x StateProto) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StateProto) Descriptor() protoreflect.EnumDescriptor {
	return file_message_proto_enumTypes[4].Descriptor()
}

func (StateProto) Type() protoreflect.EnumType {
	return &file_message_proto_enumTypes[4]
}

func (x StateProto) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StateProto.Descriptor instead.
func (StateProto) EnumDescriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{4}
}

type ExecutionMode int32

const (
	ExecutionMode_EXECUTION_MODE_UNSPECIFIED ExecutionMode = 0
	ExecutionMode_BATCH                      ExecutionMode = 1
	ExecutionMode_STREAM                     ExecutionMode = 2
)

// Enum value maps for ExecutionMode.
var (
	ExecutionMode_name = map[int32]string{
		0: "EXECUTION_MODE_UNSPECIFIED",
		1: "BATCH",
		2: "STREAM",
	}
	ExecutionMode_value = map[string]int32{
		"EXECUTION_MODE_UNSPECIFIED": 0,
		"BATCH":                      1,
		"STREAM":                     2,
	}
)

func (x ExecutionMode) Enum() *ExecutionMode {
	p := new(ExecutionMode)
	*p = x
	return p
}

func (x ExecutionMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExecutionMode) Descriptor() protoreflect.EnumDescriptor {
	return file_message_proto_enumTypes[5].Descriptor()
}

func (ExecutionMode) Type() protoreflect.EnumType {
	return &file_message_proto_enumTypes[5]
}

func (x ExecutionMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExecutionMode.Descriptor instead.
func (ExecutionMode) EnumDescriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{5}
}

type ModelType int32

const (
	ModelType_NONE_TYPE   ModelType = 0
	ModelType_CHECKPOINT  ModelType = 1
	ModelType_SAVED_MODEL ModelType = 2
	ModelType_H5          ModelType = 3
)

// Enum value maps for ModelType.
var (
	ModelType_name = map[int32]string{
		0: "NONE_TYPE",
		1: "CHECKPOINT",
		2: "SAVED_MODEL",
		3: "H5",
	}
	ModelType_value = map[string]int32{
		"NONE_TYPE":   0,
		"CHECKPOINT":  1,
		"SAVED_MODEL": 2,
		"H5":          3,
	}
)

func (x ModelType) Enum() *ModelType {
	p := new(ModelType)
	*p = x
	return p
}

func (x ModelType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ModelType) Descriptor() protoreflect.EnumDescriptor {
	return file_message_proto_enumTypes[6].Descriptor()
}

func (ModelType) Type() protoreflect.EnumType {
	return &file_message_proto_enumTypes[6]
}

func (x ModelType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ModelType.Descriptor instead.
func (ModelType) EnumDescriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{6}
}

type ModelVersionStatus int32

const (
	// Request to register a new model version is pending as server performs background tasks.
	ModelVersionStatus_PENDING_REGISTRATION ModelVersionStatus = 0
	// Request to register a new model version has failed.
	ModelVersionStatus_FAILED_REGISTRATION ModelVersionStatus = 1
	// Model version is ready for use.
	ModelVersionStatus_READY ModelVersionStatus = 3
	// Request to delete an existing model version is pending as server performs background tasks.
	ModelVersionStatus_PENDING_DELETION ModelVersionStatus = 4
	// Request to delete an existing model version has failed.
	ModelVersionStatus_FAILED_DELETION ModelVersionStatus = 5
)

// Enum value maps for ModelVersionStatus.
var (
	ModelVersionStatus_name = map[int32]string{
		0: "PENDING_REGISTRATION",
		1: "FAILED_REGISTRATION",
		3: "READY",
		4: "PENDING_DELETION",
		5: "FAILED_DELETION",
	}
	ModelVersionStatus_value = map[string]int32{
		"PENDING_REGISTRATION": 0,
		"FAILED_REGISTRATION":  1,
		"READY":                3,
		"PENDING_DELETION":     4,
		"FAILED_DELETION":      5,
	}
)

func (x ModelVersionStatus) Enum() *ModelVersionStatus {
	p := new(ModelVersionStatus)
	*p = x
	return p
}

func (x ModelVersionStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ModelVersionStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_message_proto_enumTypes[7].Descriptor()
}

func (ModelVersionStatus) Type() protoreflect.EnumType {
	return &file_message_proto_enumTypes[7]
}

func (x ModelVersionStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ModelVersionStatus.Descriptor instead.
func (ModelVersionStatus) EnumDescriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{7}
}

type ModelVersionStage int32

const (
	ModelVersionStage_GENERATED  ModelVersionStage = 0
	ModelVersionStage_VALIDATED  ModelVersionStage = 1
	ModelVersionStage_DEPLOYED   ModelVersionStage = 2
	ModelVersionStage_DEPRECATED ModelVersionStage = 3
	ModelVersionStage_DELETED    ModelVersionStage = 4
)

// Enum value maps for ModelVersionStage.
var (
	ModelVersionStage_name = map[int32]string{
		0: "GENERATED",
		1: "VALIDATED",
		2: "DEPLOYED",
		3: "DEPRECATED",
		4: "DELETED",
	}
	ModelVersionStage_value = map[string]int32{
		"GENERATED":  0,
		"VALIDATED":  1,
		"DEPLOYED":   2,
		"DEPRECATED": 3,
		"DELETED":    4,
	}
)

func (x ModelVersionStage) Enum() *ModelVersionStage {
	p := new(ModelVersionStage)
	*p = x
	return p
}

func (x ModelVersionStage) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ModelVersionStage) Descriptor() protoreflect.EnumDescriptor {
	return file_message_proto_enumTypes[8].Descriptor()
}

func (ModelVersionStage) Type() protoreflect.EnumType {
	return &file_message_proto_enumTypes[8]
}

func (x ModelVersionStage) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ModelVersionStage.Descriptor instead.
func (ModelVersionStage) EnumDescriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{8}
}

type MetricTypeProto int32

const (
	MetricTypeProto_DATASET MetricTypeProto = 0
	MetricTypeProto_MODEL   MetricTypeProto = 1
)

// Enum value maps for MetricTypeProto.
var (
	MetricTypeProto_name = map[int32]string{
		0: "DATASET",
		1: "MODEL",
	}
	MetricTypeProto_value = map[string]int32{
		"DATASET": 0,
		"MODEL":   1,
	}
)

func (x MetricTypeProto) Enum() *MetricTypeProto {
	p := new(MetricTypeProto)
	*p = x
	return p
}

func (x MetricTypeProto) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MetricTypeProto) Descriptor() protoreflect.EnumDescriptor {
	return file_message_proto_enumTypes[9].Descriptor()
}

func (MetricTypeProto) Type() protoreflect.EnumType {
	return &file_message_proto_enumTypes[9]
}

func (x MetricTypeProto) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MetricTypeProto.Descriptor instead.
func (MetricTypeProto) EnumDescriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{9}
}

type SchemaProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NameList []string        `protobuf:"bytes,1,rep,name=name_list,json=nameList,proto3" json:"name_list,omitempty"`
	TypeList []DataTypeProto `protobuf:"varint,2,rep,packed,name=type_list,json=typeList,proto3,enum=ai_flow.DataTypeProto" json:"type_list,omitempty"`
}

func (x *SchemaProto) Reset() {
	*x = SchemaProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SchemaProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchemaProto) ProtoMessage() {}

func (x *SchemaProto) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchemaProto.ProtoReflect.Descriptor instead.
func (*SchemaProto) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{0}
}

func (x *SchemaProto) GetNameList() []string {
	if x != nil {
		return x.NameList
	}
	return nil
}

func (x *SchemaProto) GetTypeList() []DataTypeProto {
	if x != nil {
		return x.TypeList
	}
	return nil
}

type ExampleProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid                 int64                   `protobuf:"varint,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Name                 string                  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Properties           map[string]string       `protobuf:"bytes,3,rep,name=properties,proto3" json:"properties,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	SupportType          ExampleSupportTypeProto `protobuf:"varint,4,opt,name=support_type,json=supportType,proto3,enum=ai_flow.ExampleSupportTypeProto" json:"support_type,omitempty"`
	Schema               *SchemaProto            `protobuf:"bytes,5,opt,name=schema,proto3" json:"schema,omitempty"`
	DataType             *wrappers.StringValue   `protobuf:"bytes,6,opt,name=data_type,json=dataType,proto3" json:"data_type,omitempty"`
	DataFormat           *wrappers.StringValue   `protobuf:"bytes,7,opt,name=data_format,json=dataFormat,proto3" json:"data_format,omitempty"`
	BatchUri             *wrappers.StringValue   `protobuf:"bytes,8,opt,name=batch_uri,json=batchUri,proto3" json:"batch_uri,omitempty"`
	StreamUri            *wrappers.StringValue   `protobuf:"bytes,9,opt,name=stream_uri,json=streamUri,proto3" json:"stream_uri,omitempty"`
	Description          *wrappers.StringValue   `protobuf:"bytes,10,opt,name=description,proto3" json:"description,omitempty"`
	CreateTime           *wrappers.Int64Value    `protobuf:"bytes,11,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	UpdateTime           *wrappers.Int64Value    `protobuf:"bytes,12,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	CatalogName          *wrappers.StringValue   `protobuf:"bytes,13,opt,name=catalog_name,json=catalogName,proto3" json:"catalog_name,omitempty"`
	CatalogType          *wrappers.StringValue   `protobuf:"bytes,14,opt,name=catalog_type,json=catalogType,proto3" json:"catalog_type,omitempty"`
	CatalogDatabase      *wrappers.StringValue   `protobuf:"bytes,15,opt,name=catalog_database,json=catalogDatabase,proto3" json:"catalog_database,omitempty"`
	CatalogConnectionUri *wrappers.StringValue   `protobuf:"bytes,16,opt,name=catalog_connection_uri,json=catalogConnectionUri,proto3" json:"catalog_connection_uri,omitempty"`
	CatalogVersion       *wrappers.StringValue   `protobuf:"bytes,17,opt,name=catalog_version,json=catalogVersion,proto3" json:"catalog_version,omitempty"`
	CatalogTable         *wrappers.StringValue   `protobuf:"bytes,18,opt,name=catalog_table,json=catalogTable,proto3" json:"catalog_table,omitempty"`
}

func (x *ExampleProto) Reset() {
	*x = ExampleProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExampleProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExampleProto) ProtoMessage() {}

func (x *ExampleProto) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExampleProto.ProtoReflect.Descriptor instead.
func (*ExampleProto) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{1}
}

func (x *ExampleProto) GetUuid() int64 {
	if x != nil {
		return x.Uuid
	}
	return 0
}

func (x *ExampleProto) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ExampleProto) GetProperties() map[string]string {
	if x != nil {
		return x.Properties
	}
	return nil
}

func (x *ExampleProto) GetSupportType() ExampleSupportTypeProto {
	if x != nil {
		return x.SupportType
	}
	return ExampleSupportTypeProto_EXAMPLE_SUPPORT_TYPE_UNSPECIFIED
}

func (x *ExampleProto) GetSchema() *SchemaProto {
	if x != nil {
		return x.Schema
	}
	return nil
}

func (x *ExampleProto) GetDataType() *wrappers.StringValue {
	if x != nil {
		return x.DataType
	}
	return nil
}

func (x *ExampleProto) GetDataFormat() *wrappers.StringValue {
	if x != nil {
		return x.DataFormat
	}
	return nil
}

func (x *ExampleProto) GetBatchUri() *wrappers.StringValue {
	if x != nil {
		return x.BatchUri
	}
	return nil
}

func (x *ExampleProto) GetStreamUri() *wrappers.StringValue {
	if x != nil {
		return x.StreamUri
	}
	return nil
}

func (x *ExampleProto) GetDescription() *wrappers.StringValue {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *ExampleProto) GetCreateTime() *wrappers.Int64Value {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *ExampleProto) GetUpdateTime() *wrappers.Int64Value {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *ExampleProto) GetCatalogName() *wrappers.StringValue {
	if x != nil {
		return x.CatalogName
	}
	return nil
}

func (x *ExampleProto) GetCatalogType() *wrappers.StringValue {
	if x != nil {
		return x.CatalogType
	}
	return nil
}

func (x *ExampleProto) GetCatalogDatabase() *wrappers.StringValue {
	if x != nil {
		return x.CatalogDatabase
	}
	return nil
}

func (x *ExampleProto) GetCatalogConnectionUri() *wrappers.StringValue {
	if x != nil {
		return x.CatalogConnectionUri
	}
	return nil
}

func (x *ExampleProto) GetCatalogVersion() *wrappers.StringValue {
	if x != nil {
		return x.CatalogVersion
	}
	return nil
}

func (x *ExampleProto) GetCatalogTable() *wrappers.StringValue {
	if x != nil {
		return x.CatalogTable
	}
	return nil
}

type ModelRelationProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid      int64                `protobuf:"varint,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Name      string               `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ProjectId *wrappers.Int64Value `protobuf:"bytes,3,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
}

func (x *ModelRelationProto) Reset() {
	*x = ModelRelationProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModelRelationProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelRelationProto) ProtoMessage() {}

func (x *ModelRelationProto) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelRelationProto.ProtoReflect.Descriptor instead.
func (*ModelRelationProto) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{2}
}

func (x *ModelRelationProto) GetUuid() int64 {
	if x != nil {
		return x.Uuid
	}
	return 0
}

func (x *ModelRelationProto) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ModelRelationProto) GetProjectId() *wrappers.Int64Value {
	if x != nil {
		return x.ProjectId
	}
	return nil
}

type ModelProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid      int64                 `protobuf:"varint,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Name      string                `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ProjectId *wrappers.Int64Value  `protobuf:"bytes,3,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	ModelType ModelType             `protobuf:"varint,4,opt,name=model_type,json=modelType,proto3,enum=ai_flow.ModelType" json:"model_type,omitempty"`
	ModelDesc *wrappers.StringValue `protobuf:"bytes,5,opt,name=model_desc,json=modelDesc,proto3" json:"model_desc,omitempty"`
}

func (x *ModelProto) Reset() {
	*x = ModelProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModelProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelProto) ProtoMessage() {}

func (x *ModelProto) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelProto.ProtoReflect.Descriptor instead.
func (*ModelProto) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{3}
}

func (x *ModelProto) GetUuid() int64 {
	if x != nil {
		return x.Uuid
	}
	return 0
}

func (x *ModelProto) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ModelProto) GetProjectId() *wrappers.Int64Value {
	if x != nil {
		return x.ProjectId
	}
	return nil
}

func (x *ModelProto) GetModelType() ModelType {
	if x != nil {
		return x.ModelType
	}
	return ModelType_NONE_TYPE
}

func (x *ModelProto) GetModelDesc() *wrappers.StringValue {
	if x != nil {
		return x.ModelDesc
	}
	return nil
}

type ModelVersionRelationProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version             *wrappers.StringValue `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	ModelId             *wrappers.Int64Value  `protobuf:"bytes,2,opt,name=model_id,json=modelId,proto3" json:"model_id,omitempty"`
	WorkflowExecutionId *wrappers.Int64Value  `protobuf:"bytes,3,opt,name=workflow_execution_id,json=workflowExecutionId,proto3" json:"workflow_execution_id,omitempty"`
}

func (x *ModelVersionRelationProto) Reset() {
	*x = ModelVersionRelationProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModelVersionRelationProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelVersionRelationProto) ProtoMessage() {}

func (x *ModelVersionRelationProto) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelVersionRelationProto.ProtoReflect.Descriptor instead.
func (*ModelVersionRelationProto) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{4}
}

func (x *ModelVersionRelationProto) GetVersion() *wrappers.StringValue {
	if x != nil {
		return x.Version
	}
	return nil
}

func (x *ModelVersionRelationProto) GetModelId() *wrappers.Int64Value {
	if x != nil {
		return x.ModelId
	}
	return nil
}

func (x *ModelVersionRelationProto) GetWorkflowExecutionId() *wrappers.Int64Value {
	if x != nil {
		return x.WorkflowExecutionId
	}
	return nil
}

type ModelVersionProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version             *wrappers.StringValue `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	ModelId             *wrappers.Int64Value  `protobuf:"bytes,2,opt,name=model_id,json=modelId,proto3" json:"model_id,omitempty"`
	WorkflowExecutionId *wrappers.Int64Value  `protobuf:"bytes,3,opt,name=workflow_execution_id,json=workflowExecutionId,proto3" json:"workflow_execution_id,omitempty"`
	ModelPath           *wrappers.StringValue `protobuf:"bytes,4,opt,name=model_path,json=modelPath,proto3" json:"model_path,omitempty"`
	ModelMetric         *wrappers.StringValue `protobuf:"bytes,5,opt,name=model_metric,json=modelMetric,proto3" json:"model_metric,omitempty"`
	ModelFlavor         *wrappers.StringValue `protobuf:"bytes,6,opt,name=model_flavor,json=modelFlavor,proto3" json:"model_flavor,omitempty"`
	VersionDesc         *wrappers.StringValue `protobuf:"bytes,7,opt,name=version_desc,json=versionDesc,proto3" json:"version_desc,omitempty"`
	CurrentStage        ModelVersionStage     `protobuf:"varint,8,opt,name=current_stage,json=currentStage,proto3,enum=ai_flow.ModelVersionStage" json:"current_stage,omitempty"`
}

func (x *ModelVersionProto) Reset() {
	*x = ModelVersionProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModelVersionProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelVersionProto) ProtoMessage() {}

func (x *ModelVersionProto) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelVersionProto.ProtoReflect.Descriptor instead.
func (*ModelVersionProto) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{5}
}

func (x *ModelVersionProto) GetVersion() *wrappers.StringValue {
	if x != nil {
		return x.Version
	}
	return nil
}

func (x *ModelVersionProto) GetModelId() *wrappers.Int64Value {
	if x != nil {
		return x.ModelId
	}
	return nil
}

func (x *ModelVersionProto) GetWorkflowExecutionId() *wrappers.Int64Value {
	if x != nil {
		return x.WorkflowExecutionId
	}
	return nil
}

func (x *ModelVersionProto) GetModelPath() *wrappers.StringValue {
	if x != nil {
		return x.ModelPath
	}
	return nil
}

func (x *ModelVersionProto) GetModelMetric() *wrappers.StringValue {
	if x != nil {
		return x.ModelMetric
	}
	return nil
}

func (x *ModelVersionProto) GetModelFlavor() *wrappers.StringValue {
	if x != nil {
		return x.ModelFlavor
	}
	return nil
}

func (x *ModelVersionProto) GetVersionDesc() *wrappers.StringValue {
	if x != nil {
		return x.VersionDesc
	}
	return nil
}

func (x *ModelVersionProto) GetCurrentStage() ModelVersionStage {
	if x != nil {
		return x.CurrentStage
	}
	return ModelVersionStage_GENERATED
}

type JobProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid                int64                   `protobuf:"varint,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Name                string                  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	WorkflowExecutionId *wrappers.Int64Value    `protobuf:"bytes,3,opt,name=workflow_execution_id,json=workflowExecutionId,proto3" json:"workflow_execution_id,omitempty"`
	JobState            StateProto              `protobuf:"varint,4,opt,name=job_state,json=jobState,proto3,enum=ai_flow.StateProto" json:"job_state,omitempty"`
	Properties          map[string]string       `protobuf:"bytes,5,rep,name=properties,proto3" json:"properties,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	JobId               *wrappers.StringValue   `protobuf:"bytes,6,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	StartTime           *wrappers.Int64Value    `protobuf:"bytes,7,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime             *wrappers.Int64Value    `protobuf:"bytes,8,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	LogUri              *wrappers.StringValue   `protobuf:"bytes,9,opt,name=log_uri,json=logUri,proto3" json:"log_uri,omitempty"`
	Signature           *wrappers.StringValue   `protobuf:"bytes,10,opt,name=signature,proto3" json:"signature,omitempty"`
	WorkflowExecution   *WorkflowExecutionProto `protobuf:"bytes,11,opt,name=workflow_execution,json=workflowExecution,proto3" json:"workflow_execution,omitempty"`
}

func (x *JobProto) Reset() {
	*x = JobProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobProto) ProtoMessage() {}

func (x *JobProto) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobProto.ProtoReflect.Descriptor instead.
func (*JobProto) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{6}
}

func (x *JobProto) GetUuid() int64 {
	if x != nil {
		return x.Uuid
	}
	return 0
}

func (x *JobProto) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *JobProto) GetWorkflowExecutionId() *wrappers.Int64Value {
	if x != nil {
		return x.WorkflowExecutionId
	}
	return nil
}

func (x *JobProto) GetJobState() StateProto {
	if x != nil {
		return x.JobState
	}
	return StateProto_STATE_UNSPECIFIED
}

func (x *JobProto) GetProperties() map[string]string {
	if x != nil {
		return x.Properties
	}
	return nil
}

func (x *JobProto) GetJobId() *wrappers.StringValue {
	if x != nil {
		return x.JobId
	}
	return nil
}

func (x *JobProto) GetStartTime() *wrappers.Int64Value {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *JobProto) GetEndTime() *wrappers.Int64Value {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *JobProto) GetLogUri() *wrappers.StringValue {
	if x != nil {
		return x.LogUri
	}
	return nil
}

func (x *JobProto) GetSignature() *wrappers.StringValue {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *JobProto) GetWorkflowExecution() *WorkflowExecutionProto {
	if x != nil {
		return x.WorkflowExecution
	}
	return nil
}

type WorkflowProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid         int64                 `protobuf:"varint,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Name         string                `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	WorkflowJson *wrappers.StringValue `protobuf:"bytes,3,opt,name=workflow_json,json=workflowJson,proto3" json:"workflow_json,omitempty"`
	Properties   map[string]string     `protobuf:"bytes,4,rep,name=properties,proto3" json:"properties,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Namespace    string                `protobuf:"bytes,5,opt,name=namespace,proto3" json:"namespace,omitempty"`
}

func (x *WorkflowProto) Reset() {
	*x = WorkflowProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkflowProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowProto) ProtoMessage() {}

func (x *WorkflowProto) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowProto.ProtoReflect.Descriptor instead.
func (*WorkflowProto) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{7}
}

func (x *WorkflowProto) GetUuid() int64 {
	if x != nil {
		return x.Uuid
	}
	return 0
}

func (x *WorkflowProto) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *WorkflowProto) GetWorkflowJson() *wrappers.StringValue {
	if x != nil {
		return x.WorkflowJson
	}
	return nil
}

func (x *WorkflowProto) GetProperties() map[string]string {
	if x != nil {
		return x.Properties
	}
	return nil
}

func (x *WorkflowProto) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

type WorkflowExecutionProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid           int64                 `protobuf:"varint,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Name           string                `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ProjectId      *wrappers.Int64Value  `protobuf:"bytes,3,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	ExecutionState StateProto            `protobuf:"varint,4,opt,name=execution_state,json=executionState,proto3,enum=ai_flow.StateProto" json:"execution_state,omitempty"`
	Properties     map[string]string     `protobuf:"bytes,5,rep,name=properties,proto3" json:"properties,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	StartTime      *wrappers.Int64Value  `protobuf:"bytes,6,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime        *wrappers.Int64Value  `protobuf:"bytes,7,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	LogUri         *wrappers.StringValue `protobuf:"bytes,8,opt,name=log_uri,json=logUri,proto3" json:"log_uri,omitempty"`
	WorkflowJson   *wrappers.StringValue `protobuf:"bytes,9,opt,name=workflow_json,json=workflowJson,proto3" json:"workflow_json,omitempty"`
	Signature      *wrappers.StringValue `protobuf:"bytes,10,opt,name=signature,proto3" json:"signature,omitempty"`
	ExecutionId    string                `protobuf:"bytes,11,opt,name=execution_id,json=executionId,proto3" json:"execution_id,omitempty"`
	Workflow       *WorkflowProto        `protobuf:"bytes,12,opt,name=workflow,proto3" json:"workflow,omitempty"`
}

func (x *WorkflowExecutionProto) Reset() {
	*x = WorkflowExecutionProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkflowExecutionProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowExecutionProto) ProtoMessage() {}

func (x *WorkflowExecutionProto) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowExecutionProto.ProtoReflect.Descriptor instead.
func (*WorkflowExecutionProto) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{8}
}

func (x *WorkflowExecutionProto) GetUuid() int64 {
	if x != nil {
		return x.Uuid
	}
	return 0
}

func (x *WorkflowExecutionProto) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *WorkflowExecutionProto) GetProjectId() *wrappers.Int64Value {
	if x != nil {
		return x.ProjectId
	}
	return nil
}

func (x *WorkflowExecutionProto) GetExecutionState() StateProto {
	if x != nil {
		return x.ExecutionState
	}
	return StateProto_STATE_UNSPECIFIED
}

func (x *WorkflowExecutionProto) GetProperties() map[string]string {
	if x != nil {
		return x.Properties
	}
	return nil
}

func (x *WorkflowExecutionProto) GetStartTime() *wrappers.Int64Value {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *WorkflowExecutionProto) GetEndTime() *wrappers.Int64Value {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *WorkflowExecutionProto) GetLogUri() *wrappers.StringValue {
	if x != nil {
		return x.LogUri
	}
	return nil
}

func (x *WorkflowExecutionProto) GetWorkflowJson() *wrappers.StringValue {
	if x != nil {
		return x.WorkflowJson
	}
	return nil
}

func (x *WorkflowExecutionProto) GetSignature() *wrappers.StringValue {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *WorkflowExecutionProto) GetExecutionId() string {
	if x != nil {
		return x.ExecutionId
	}
	return ""
}

func (x *WorkflowExecutionProto) GetWorkflow() *WorkflowProto {
	if x != nil {
		return x.Workflow
	}
	return nil
}

type ProjectProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid        int64                 `protobuf:"varint,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Name        string                `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Properties  map[string]string     `protobuf:"bytes,3,rep,name=properties,proto3" json:"properties,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ProjectType *wrappers.StringValue `protobuf:"bytes,4,opt,name=project_type,json=projectType,proto3" json:"project_type,omitempty"`
	Uri         *wrappers.StringValue `protobuf:"bytes,5,opt,name=uri,proto3" json:"uri,omitempty"`
	User        *wrappers.StringValue `protobuf:"bytes,6,opt,name=user,proto3" json:"user,omitempty"`
	Password    *wrappers.StringValue `protobuf:"bytes,7,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *ProjectProto) Reset() {
	*x = ProjectProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProjectProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectProto) ProtoMessage() {}

func (x *ProjectProto) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectProto.ProtoReflect.Descriptor instead.
func (*ProjectProto) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{9}
}

func (x *ProjectProto) GetUuid() int64 {
	if x != nil {
		return x.Uuid
	}
	return 0
}

func (x *ProjectProto) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProjectProto) GetProperties() map[string]string {
	if x != nil {
		return x.Properties
	}
	return nil
}

func (x *ProjectProto) GetProjectType() *wrappers.StringValue {
	if x != nil {
		return x.ProjectType
	}
	return nil
}

func (x *ProjectProto) GetUri() *wrappers.StringValue {
	if x != nil {
		return x.Uri
	}
	return nil
}

func (x *ProjectProto) GetUser() *wrappers.StringValue {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *ProjectProto) GetPassword() *wrappers.StringValue {
	if x != nil {
		return x.Password
	}
	return nil
}

type ArtifactProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid        int64                 `protobuf:"varint,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Name        string                `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Properties  map[string]string     `protobuf:"bytes,3,rep,name=properties,proto3" json:"properties,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	DataFormat  *wrappers.StringValue `protobuf:"bytes,4,opt,name=data_format,json=dataFormat,proto3" json:"data_format,omitempty"`
	BatchUri    *wrappers.StringValue `protobuf:"bytes,5,opt,name=batch_uri,json=batchUri,proto3" json:"batch_uri,omitempty"`
	StreamUri   *wrappers.StringValue `protobuf:"bytes,6,opt,name=stream_uri,json=streamUri,proto3" json:"stream_uri,omitempty"`
	Description *wrappers.StringValue `protobuf:"bytes,7,opt,name=description,proto3" json:"description,omitempty"`
	CreateTime  *wrappers.Int64Value  `protobuf:"bytes,8,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	UpdateTime  *wrappers.Int64Value  `protobuf:"bytes,9,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
}

func (x *ArtifactProto) Reset() {
	*x = ArtifactProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArtifactProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArtifactProto) ProtoMessage() {}

func (x *ArtifactProto) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArtifactProto.ProtoReflect.Descriptor instead.
func (*ArtifactProto) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{10}
}

func (x *ArtifactProto) GetUuid() int64 {
	if x != nil {
		return x.Uuid
	}
	return 0
}

func (x *ArtifactProto) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ArtifactProto) GetProperties() map[string]string {
	if x != nil {
		return x.Properties
	}
	return nil
}

func (x *ArtifactProto) GetDataFormat() *wrappers.StringValue {
	if x != nil {
		return x.DataFormat
	}
	return nil
}

func (x *ArtifactProto) GetBatchUri() *wrappers.StringValue {
	if x != nil {
		return x.BatchUri
	}
	return nil
}

func (x *ArtifactProto) GetStreamUri() *wrappers.StringValue {
	if x != nil {
		return x.StreamUri
	}
	return nil
}

func (x *ArtifactProto) GetDescription() *wrappers.StringValue {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *ArtifactProto) GetCreateTime() *wrappers.Int64Value {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *ArtifactProto) GetUpdateTime() *wrappers.Int64Value {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

type RegisteredModelParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModelName *wrappers.StringValue `protobuf:"bytes,1,opt,name=model_name,json=modelName,proto3" json:"model_name,omitempty"`
	ModelType ModelType             `protobuf:"varint,2,opt,name=model_type,json=modelType,proto3,enum=ai_flow.ModelType" json:"model_type,omitempty"`
	ModelDesc *wrappers.StringValue `protobuf:"bytes,3,opt,name=model_desc,json=modelDesc,proto3" json:"model_desc,omitempty"`
}

func (x *RegisteredModelParam) Reset() {
	*x = RegisteredModelParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisteredModelParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisteredModelParam) ProtoMessage() {}

func (x *RegisteredModelParam) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisteredModelParam.ProtoReflect.Descriptor instead.
func (*RegisteredModelParam) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{11}
}

func (x *RegisteredModelParam) GetModelName() *wrappers.StringValue {
	if x != nil {
		return x.ModelName
	}
	return nil
}

func (x *RegisteredModelParam) GetModelType() ModelType {
	if x != nil {
		return x.ModelType
	}
	return ModelType_NONE_TYPE
}

func (x *RegisteredModelParam) GetModelDesc() *wrappers.StringValue {
	if x != nil {
		return x.ModelDesc
	}
	return nil
}

type ModelVersionParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModelPath    *wrappers.StringValue `protobuf:"bytes,1,opt,name=model_path,json=modelPath,proto3" json:"model_path,omitempty"`
	ModelMetric  *wrappers.StringValue `protobuf:"bytes,2,opt,name=model_metric,json=modelMetric,proto3" json:"model_metric,omitempty"`
	ModelFlavor  *wrappers.StringValue `protobuf:"bytes,3,opt,name=model_flavor,json=modelFlavor,proto3" json:"model_flavor,omitempty"`
	VersionDesc  *wrappers.StringValue `protobuf:"bytes,4,opt,name=version_desc,json=versionDesc,proto3" json:"version_desc,omitempty"`
	CurrentStage ModelVersionStage     `protobuf:"varint,5,opt,name=current_stage,json=currentStage,proto3,enum=ai_flow.ModelVersionStage" json:"current_stage,omitempty"`
}

func (x *ModelVersionParam) Reset() {
	*x = ModelVersionParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModelVersionParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelVersionParam) ProtoMessage() {}

func (x *ModelVersionParam) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelVersionParam.ProtoReflect.Descriptor instead.
func (*ModelVersionParam) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{12}
}

func (x *ModelVersionParam) GetModelPath() *wrappers.StringValue {
	if x != nil {
		return x.ModelPath
	}
	return nil
}

func (x *ModelVersionParam) GetModelMetric() *wrappers.StringValue {
	if x != nil {
		return x.ModelMetric
	}
	return nil
}

func (x *ModelVersionParam) GetModelFlavor() *wrappers.StringValue {
	if x != nil {
		return x.ModelFlavor
	}
	return nil
}

func (x *ModelVersionParam) GetVersionDesc() *wrappers.StringValue {
	if x != nil {
		return x.VersionDesc
	}
	return nil
}

func (x *ModelVersionParam) GetCurrentStage() ModelVersionStage {
	if x != nil {
		return x.CurrentStage
	}
	return ModelVersionStage_GENERATED
}

type ModelMetaParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModelName    *wrappers.StringValue `protobuf:"bytes,1,opt,name=model_name,json=modelName,proto3" json:"model_name,omitempty"`
	ModelVersion *wrappers.StringValue `protobuf:"bytes,2,opt,name=model_version,json=modelVersion,proto3" json:"model_version,omitempty"`
}

func (x *ModelMetaParam) Reset() {
	*x = ModelMetaParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModelMetaParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelMetaParam) ProtoMessage() {}

func (x *ModelMetaParam) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelMetaParam.ProtoReflect.Descriptor instead.
func (*ModelMetaParam) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{13}
}

func (x *ModelMetaParam) GetModelName() *wrappers.StringValue {
	if x != nil {
		return x.ModelName
	}
	return nil
}

func (x *ModelMetaParam) GetModelVersion() *wrappers.StringValue {
	if x != nil {
		return x.ModelVersion
	}
	return nil
}

type Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReturnCode string `protobuf:"bytes,1,opt,name=return_code,json=returnCode,proto3" json:"return_code,omitempty"`
	ReturnMsg  string `protobuf:"bytes,2,opt,name=return_msg,json=returnMsg,proto3" json:"return_msg,omitempty"`
	Data       string `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *Response) Reset() {
	*x = Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response) ProtoMessage() {}

func (x *Response) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response.ProtoReflect.Descriptor instead.
func (*Response) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{14}
}

func (x *Response) GetReturnCode() string {
	if x != nil {
		return x.ReturnCode
	}
	return ""
}

func (x *Response) GetReturnMsg() string {
	if x != nil {
		return x.ReturnMsg
	}
	return ""
}

func (x *Response) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type RegisteredModelMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModelName string                `protobuf:"bytes,1,opt,name=model_name,json=modelName,proto3" json:"model_name,omitempty"`
	ModelType ModelType             `protobuf:"varint,2,opt,name=model_type,json=modelType,proto3,enum=ai_flow.ModelType" json:"model_type,omitempty"`
	ModelDesc *wrappers.StringValue `protobuf:"bytes,3,opt,name=model_desc,json=modelDesc,proto3" json:"model_desc,omitempty"`
}

func (x *RegisteredModelMeta) Reset() {
	*x = RegisteredModelMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisteredModelMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisteredModelMeta) ProtoMessage() {}

func (x *RegisteredModelMeta) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisteredModelMeta.ProtoReflect.Descriptor instead.
func (*RegisteredModelMeta) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{15}
}

func (x *RegisteredModelMeta) GetModelName() string {
	if x != nil {
		return x.ModelName
	}
	return ""
}

func (x *RegisteredModelMeta) GetModelType() ModelType {
	if x != nil {
		return x.ModelType
	}
	return ModelType_NONE_TYPE
}

func (x *RegisteredModelMeta) GetModelDesc() *wrappers.StringValue {
	if x != nil {
		return x.ModelDesc
	}
	return nil
}

type ModelVersionMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModelName     string                `protobuf:"bytes,1,opt,name=model_name,json=modelName,proto3" json:"model_name,omitempty"`
	ModelVersion  string                `protobuf:"bytes,2,opt,name=model_version,json=modelVersion,proto3" json:"model_version,omitempty"`
	ModelPath     *wrappers.StringValue `protobuf:"bytes,3,opt,name=model_path,json=modelPath,proto3" json:"model_path,omitempty"`
	ModelMetric   *wrappers.StringValue `protobuf:"bytes,4,opt,name=model_metric,json=modelMetric,proto3" json:"model_metric,omitempty"`
	ModelFlavor   *wrappers.StringValue `protobuf:"bytes,5,opt,name=model_flavor,json=modelFlavor,proto3" json:"model_flavor,omitempty"`
	VersionDesc   *wrappers.StringValue `protobuf:"bytes,6,opt,name=version_desc,json=versionDesc,proto3" json:"version_desc,omitempty"`
	VersionStatus ModelVersionStatus    `protobuf:"varint,7,opt,name=version_status,json=versionStatus,proto3,enum=ai_flow.ModelVersionStatus" json:"version_status,omitempty"`
	CurrentStage  ModelVersionStage     `protobuf:"varint,8,opt,name=current_stage,json=currentStage,proto3,enum=ai_flow.ModelVersionStage" json:"current_stage,omitempty"`
}

func (x *ModelVersionMeta) Reset() {
	*x = ModelVersionMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModelVersionMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelVersionMeta) ProtoMessage() {}

func (x *ModelVersionMeta) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelVersionMeta.ProtoReflect.Descriptor instead.
func (*ModelVersionMeta) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{16}
}

func (x *ModelVersionMeta) GetModelName() string {
	if x != nil {
		return x.ModelName
	}
	return ""
}

func (x *ModelVersionMeta) GetModelVersion() string {
	if x != nil {
		return x.ModelVersion
	}
	return ""
}

func (x *ModelVersionMeta) GetModelPath() *wrappers.StringValue {
	if x != nil {
		return x.ModelPath
	}
	return nil
}

func (x *ModelVersionMeta) GetModelMetric() *wrappers.StringValue {
	if x != nil {
		return x.ModelMetric
	}
	return nil
}

func (x *ModelVersionMeta) GetModelFlavor() *wrappers.StringValue {
	if x != nil {
		return x.ModelFlavor
	}
	return nil
}

func (x *ModelVersionMeta) GetVersionDesc() *wrappers.StringValue {
	if x != nil {
		return x.VersionDesc
	}
	return nil
}

func (x *ModelVersionMeta) GetVersionStatus() ModelVersionStatus {
	if x != nil {
		return x.VersionStatus
	}
	return ModelVersionStatus_PENDING_REGISTRATION
}

func (x *ModelVersionMeta) GetCurrentStage() ModelVersionStage {
	if x != nil {
		return x.CurrentStage
	}
	return ModelVersionStage_GENERATED
}

type RegisteredModelDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegisteredModel *RegisteredModelMeta `protobuf:"bytes,1,opt,name=registered_model,json=registeredModel,proto3" json:"registered_model,omitempty"`
	ModelVersion    *ModelVersionMeta    `protobuf:"bytes,2,opt,name=model_version,json=modelVersion,proto3" json:"model_version,omitempty"`
}

func (x *RegisteredModelDetail) Reset() {
	*x = RegisteredModelDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisteredModelDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisteredModelDetail) ProtoMessage() {}

func (x *RegisteredModelDetail) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisteredModelDetail.ProtoReflect.Descriptor instead.
func (*RegisteredModelDetail) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{17}
}

func (x *RegisteredModelDetail) GetRegisteredModel() *RegisteredModelMeta {
	if x != nil {
		return x.RegisteredModel
	}
	return nil
}

func (x *RegisteredModelDetail) GetModelVersion() *ModelVersionMeta {
	if x != nil {
		return x.ModelVersion
	}
	return nil
}

type RegisteredModelMetas struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegisteredModels []*RegisteredModelMeta `protobuf:"bytes,1,rep,name=registered_models,json=registeredModels,proto3" json:"registered_models,omitempty"`
}

func (x *RegisteredModelMetas) Reset() {
	*x = RegisteredModelMetas{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisteredModelMetas) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisteredModelMetas) ProtoMessage() {}

func (x *RegisteredModelMetas) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisteredModelMetas.ProtoReflect.Descriptor instead.
func (*RegisteredModelMetas) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{18}
}

func (x *RegisteredModelMetas) GetRegisteredModels() []*RegisteredModelMeta {
	if x != nil {
		return x.RegisteredModels
	}
	return nil
}

type ResultProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status       StatusProto `protobuf:"varint,1,opt,name=status,proto3,enum=ai_flow.StatusProto" json:"status,omitempty"`
	ErrorMessage string      `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
}

func (x *ResultProto) Reset() {
	*x = ResultProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResultProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResultProto) ProtoMessage() {}

func (x *ResultProto) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResultProto.ProtoReflect.Descriptor instead.
func (*ResultProto) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{19}
}

func (x *ResultProto) GetStatus() StatusProto {
	if x != nil {
		return x.Status
	}
	return StatusProto_OK
}

func (x *ResultProto) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

type MetricMetaProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid              int64                 `protobuf:"varint,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Name              *wrappers.StringValue `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	DatasetId         *wrappers.Int64Value  `protobuf:"bytes,3,opt,name=dataset_id,json=datasetId,proto3" json:"dataset_id,omitempty"`
	ModelName         *wrappers.StringValue `protobuf:"bytes,4,opt,name=model_name,json=modelName,proto3" json:"model_name,omitempty"`
	ModelVersion      *wrappers.StringValue `protobuf:"bytes,5,opt,name=model_version,json=modelVersion,proto3" json:"model_version,omitempty"`
	JobId             *wrappers.Int64Value  `protobuf:"bytes,6,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	StartTime         *wrappers.Int64Value  `protobuf:"bytes,7,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime           *wrappers.Int64Value  `protobuf:"bytes,8,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	MetricType        MetricTypeProto       `protobuf:"varint,9,opt,name=metric_type,json=metricType,proto3,enum=ai_flow.MetricTypeProto" json:"metric_type,omitempty"`
	Uri               *wrappers.StringValue `protobuf:"bytes,10,opt,name=uri,proto3" json:"uri,omitempty"`
	Tags              *wrappers.StringValue `protobuf:"bytes,11,opt,name=tags,proto3" json:"tags,omitempty"`
	MetricDescription *wrappers.StringValue `protobuf:"bytes,12,opt,name=metric_description,json=metricDescription,proto3" json:"metric_description,omitempty"`
	Properties        map[string]string     `protobuf:"bytes,13,rep,name=properties,proto3" json:"properties,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *MetricMetaProto) Reset() {
	*x = MetricMetaProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricMetaProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricMetaProto) ProtoMessage() {}

func (x *MetricMetaProto) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricMetaProto.ProtoReflect.Descriptor instead.
func (*MetricMetaProto) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{20}
}

func (x *MetricMetaProto) GetUuid() int64 {
	if x != nil {
		return x.Uuid
	}
	return 0
}

func (x *MetricMetaProto) GetName() *wrappers.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *MetricMetaProto) GetDatasetId() *wrappers.Int64Value {
	if x != nil {
		return x.DatasetId
	}
	return nil
}

func (x *MetricMetaProto) GetModelName() *wrappers.StringValue {
	if x != nil {
		return x.ModelName
	}
	return nil
}

func (x *MetricMetaProto) GetModelVersion() *wrappers.StringValue {
	if x != nil {
		return x.ModelVersion
	}
	return nil
}

func (x *MetricMetaProto) GetJobId() *wrappers.Int64Value {
	if x != nil {
		return x.JobId
	}
	return nil
}

func (x *MetricMetaProto) GetStartTime() *wrappers.Int64Value {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *MetricMetaProto) GetEndTime() *wrappers.Int64Value {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *MetricMetaProto) GetMetricType() MetricTypeProto {
	if x != nil {
		return x.MetricType
	}
	return MetricTypeProto_DATASET
}

func (x *MetricMetaProto) GetUri() *wrappers.StringValue {
	if x != nil {
		return x.Uri
	}
	return nil
}

func (x *MetricMetaProto) GetTags() *wrappers.StringValue {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *MetricMetaProto) GetMetricDescription() *wrappers.StringValue {
	if x != nil {
		return x.MetricDescription
	}
	return nil
}

func (x *MetricMetaProto) GetProperties() map[string]string {
	if x != nil {
		return x.Properties
	}
	return nil
}

type MetricSummaryProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid        int64                 `protobuf:"varint,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	MetricId    *wrappers.Int64Value  `protobuf:"bytes,2,opt,name=metric_id,json=metricId,proto3" json:"metric_id,omitempty"`
	MetricKey   *wrappers.StringValue `protobuf:"bytes,3,opt,name=metric_key,json=metricKey,proto3" json:"metric_key,omitempty"`
	MetricValue *wrappers.StringValue `protobuf:"bytes,4,opt,name=metric_value,json=metricValue,proto3" json:"metric_value,omitempty"`
}

func (x *MetricSummaryProto) Reset() {
	*x = MetricSummaryProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricSummaryProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricSummaryProto) ProtoMessage() {}

func (x *MetricSummaryProto) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricSummaryProto.ProtoReflect.Descriptor instead.
func (*MetricSummaryProto) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{21}
}

func (x *MetricSummaryProto) GetUuid() int64 {
	if x != nil {
		return x.Uuid
	}
	return 0
}

func (x *MetricSummaryProto) GetMetricId() *wrappers.Int64Value {
	if x != nil {
		return x.MetricId
	}
	return nil
}

func (x *MetricSummaryProto) GetMetricKey() *wrappers.StringValue {
	if x != nil {
		return x.MetricKey
	}
	return nil
}

func (x *MetricSummaryProto) GetMetricValue() *wrappers.StringValue {
	if x != nil {
		return x.MetricValue
	}
	return nil
}

var File_message_proto protoreflect.FileDescriptor

var file_message_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x07, 0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x5f, 0x0a, 0x0b, 0x53, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x61, 0x6d, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f,
	0x77, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52,
	0x08, 0x74, 0x79, 0x70, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x86, 0x09, 0x0a, 0x0c, 0x45, 0x78,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x45, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77,
	0x2e, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x70,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x43, 0x0a, 0x0c, 0x73, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x20, 0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x52, 0x0b, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c,
	0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x39, 0x0a, 0x09,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x64,
	0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3d, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x61,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x39, 0x0a, 0x09, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f,
	0x75, 0x72, 0x69, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x62, 0x61, 0x74, 0x63, 0x68, 0x55, 0x72,
	0x69, 0x12, 0x3b, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x75, 0x72, 0x69, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x09, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x55, 0x72, 0x69, 0x12, 0x3e,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3c,
	0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x0b,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x0c, 0x63, 0x61,
	0x74, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b,
	0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x0c, 0x63,
	0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0b, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x47, 0x0a, 0x10,
	0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x44, 0x61, 0x74,
	0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x16, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67,
	0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x72, 0x69, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x14, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x72, 0x69, 0x12, 0x45, 0x0a, 0x0f, 0x63, 0x61, 0x74,
	0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0e, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x41, 0x0a, 0x0d, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x1a, 0x3d, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x78, 0x0a, 0x12, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x3a, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x22, 0xe0, 0x01, 0x0a,
	0x0a, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x75,
	0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12,
	0x31, 0x0a, 0x0a, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x3b, 0x0a, 0x0a, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x64, 0x65, 0x73, 0x63,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x44, 0x65, 0x73, 0x63, 0x22,
	0xdc, 0x01, 0x0a, 0x19, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x36, 0x0a,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x4f, 0x0a,
	0x15, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49,
	0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x13, 0x77, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x95,
	0x04, 0x0a, 0x11, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x36, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x08,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x49, 0x64, 0x12, 0x4f, 0x0a, 0x15, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x13, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x0a, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x70,
	0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x50, 0x61,
	0x74, 0x68, 0x12, 0x3f, 0x0a, 0x0c, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x12, 0x3f, 0x0a, 0x0c, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x66, 0x6c, 0x61,
	0x76, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x46, 0x6c,
	0x61, 0x76, 0x6f, 0x72, 0x12, 0x3f, 0x0a, 0x0c, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x64, 0x65, 0x73, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x44, 0x65, 0x73, 0x63, 0x12, 0x3f, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x5f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x61,
	0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x67, 0x65, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x53, 0x74, 0x61, 0x67, 0x65, 0x22, 0xa3, 0x05, 0x0a, 0x08, 0x4a, 0x6f, 0x62, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4f, 0x0a, 0x15, 0x77,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74,
	0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x13, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x09,
	0x6a, 0x6f, 0x62, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x13, 0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x52, 0x08, 0x6a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x41,
	0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x4a, 0x6f, 0x62,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65,
	0x73, 0x12, 0x33, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74,
	0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x36, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x07, 0x6c, 0x6f,
	0x67, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x6c, 0x6f, 0x67, 0x55, 0x72,
	0x69, 0x12, 0x3a, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x4e, 0x0a,
	0x12, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x69, 0x5f, 0x66,
	0x6c, 0x6f, 0x77, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x11, 0x77, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x3d, 0x0a,
	0x0f, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x9f, 0x02, 0x0a,
	0x0d, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12,
	0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x75, 0x75,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x0d, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x77, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x4a, 0x73, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x0a, 0x70, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65,
	0x73, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x1a,
	0x3d, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xcb,
	0x05, 0x0a, 0x16, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x3a, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x3c, 0x0a,
	0x0f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0e, 0x65, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x4f, 0x0a, 0x0a, 0x70,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2f, 0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x3a, 0x0a, 0x0a,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74,
	0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x35, 0x0a, 0x07, 0x6c, 0x6f, 0x67, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x06, 0x6c, 0x6f, 0x67, 0x55, 0x72, 0x69, 0x12, 0x41, 0x0a, 0x0d, 0x77, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x77, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x4a, 0x73, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x09, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x08, 0x77, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x69,
	0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x52, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x1a, 0x3d, 0x0a,
	0x0f, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x99, 0x03, 0x0a,
	0x0c, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x0a,
	0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x75, 0x75, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x45, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x69, 0x5f, 0x66,
	0x6c, 0x6f, 0x77, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x3f, 0x0a, 0x0c,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a,
	0x03, 0x75, 0x72, 0x69, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x75, 0x72, 0x69, 0x12, 0x30, 0x0a,
	0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12,
	0x38, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x1a, 0x3d, 0x0a, 0x0f, 0x50, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xb1, 0x04, 0x0a, 0x0d, 0x41, 0x72, 0x74,
	0x69, 0x66, 0x61, 0x63, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x46, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77,
	0x2e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a,
	0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x3d, 0x0a, 0x0b, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x64,
	0x61, 0x74, 0x61, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x39, 0x0a, 0x09, 0x62, 0x61, 0x74,
	0x63, 0x68, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x62, 0x61, 0x74, 0x63,
	0x68, 0x55, 0x72, 0x69, 0x12, 0x3b, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x75,
	0x72, 0x69, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x55, 0x72,
	0x69, 0x12, 0x3e, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x3c, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x3c, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0x3d, 0x0a,
	0x0f, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc3, 0x01, 0x0a,
	0x14, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x3b, 0x0a, 0x0a, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x31, 0x0a, 0x0a, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77,
	0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3b, 0x0a, 0x0a, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x64,
	0x65, 0x73, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x44, 0x65,
	0x73, 0x63, 0x22, 0xd4, 0x02, 0x0a, 0x11, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x3b, 0x0a, 0x0a, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x50, 0x61, 0x74, 0x68, 0x12, 0x3f, 0x0a, 0x0c, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x3f, 0x0a, 0x0c, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f,
	0x66, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x46, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x12, 0x3f, 0x0a, 0x0c, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x12, 0x3f, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1a, 0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x67, 0x65, 0x52, 0x0c, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x67, 0x65, 0x22, 0x90, 0x01, 0x0a, 0x0e, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x4d, 0x65, 0x74, 0x61, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x3b, 0x0a, 0x0a,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x0d, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x5e, 0x0a, 0x08,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x4d, 0x73, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xa4, 0x01, 0x0a,
	0x13, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x4d, 0x65, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x0a, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f,
	0x77, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3b, 0x0a, 0x0a, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f,
	0x64, 0x65, 0x73, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x44,
	0x65, 0x73, 0x63, 0x22, 0xdb, 0x03, 0x0a, 0x10, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x0a,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x50, 0x61, 0x74, 0x68, 0x12, 0x3f, 0x0a, 0x0c, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x3f, 0x0a, 0x0c, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x5f, 0x66, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x46, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x12, 0x3f, 0x0a, 0x0c, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0b, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x12, 0x42, 0x0a, 0x0e,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x0d, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x3f, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x67,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f,
	0x77, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x67, 0x65, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x67,
	0x65, 0x22, 0xa0, 0x01, 0x0a, 0x15, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x47, 0x0a, 0x10, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4d,
	0x65, 0x74, 0x61, 0x52, 0x0f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x12, 0x3e, 0x0a, 0x0d, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x69,
	0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x0c, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x22, 0x61, 0x0a, 0x14, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4d, 0x65, 0x74, 0x61, 0x73, 0x12, 0x49, 0x0a, 0x11,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f,
	0x77, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x10, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65,
	0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x22, 0x60, 0x0a, 0x0b, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x2c, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xae, 0x06, 0x0a, 0x0f, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x4d, 0x65, 0x74, 0x61, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x0a,
	0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x75, 0x75, 0x69,
	0x64, 0x12, 0x30, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12,
	0x3b, 0x0a, 0x0a, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x0d,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0c, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x32, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x6a, 0x6f,
	0x62, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x36, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07,
	0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x61,
	0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x54, 0x79, 0x70,
	0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0a, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x2e, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x75,
	0x72, 0x69, 0x12, 0x30, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04,
	0x74, 0x61, 0x67, 0x73, 0x12, 0x4b, 0x0a, 0x12, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x48, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18,
	0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4d, 0x65, 0x74, 0x61, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x1a, 0x3d, 0x0a, 0x0f, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xe0, 0x01, 0x0a, 0x12, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x49, 0x64, 0x12,
	0x3b, 0x0a, 0x0a, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x09, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x3f, 0x0a, 0x0c,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x2a, 0xc0, 0x03,
	0x0a, 0x0a, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0b, 0x0a, 0x07,
	0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x49, 0x4e, 0x54,
	0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x01, 0x12, 0x1b, 0x0a,
	0x17, 0x54, 0x45, 0x4d, 0x50, 0x4f, 0x52, 0x41, 0x52, 0x49, 0x4c, 0x59, 0x5f, 0x55, 0x4e, 0x41,
	0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x4f,
	0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x42, 0x41, 0x44, 0x5f,
	0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x04, 0x12, 0x1c, 0x0a, 0x17, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x45, 0x54, 0x45, 0x52, 0x5f, 0x56,
	0x41, 0x4c, 0x55, 0x45, 0x10, 0xe8, 0x07, 0x12, 0x17, 0x0a, 0x12, 0x45, 0x4e, 0x44, 0x50, 0x4f,
	0x49, 0x4e, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0xe9, 0x07,
	0x12, 0x16, 0x0a, 0x11, 0x4d, 0x41, 0x4c, 0x46, 0x4f, 0x52, 0x4d, 0x45, 0x44, 0x5f, 0x52, 0x45,
	0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0xea, 0x07, 0x12, 0x12, 0x0a, 0x0d, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x10, 0xeb, 0x07, 0x12, 0x16, 0x0a, 0x11,
	0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x4e, 0x49, 0x45,
	0x44, 0x10, 0xec, 0x07, 0x12, 0x15, 0x0a, 0x10, 0x46, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f,
	0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0xed, 0x07, 0x12, 0x1a, 0x0a, 0x15, 0x43,
	0x55, 0x53, 0x54, 0x4f, 0x4d, 0x45, 0x52, 0x5f, 0x55, 0x4e, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52,
	0x49, 0x5a, 0x45, 0x44, 0x10, 0xee, 0x07, 0x12, 0x1b, 0x0a, 0x16, 0x52, 0x45, 0x51, 0x55, 0x45,
	0x53, 0x54, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x45, 0x44, 0x45,
	0x44, 0x10, 0xef, 0x07, 0x12, 0x1c, 0x0a, 0x17, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45,
	0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x53, 0x10,
	0xd1, 0x0f, 0x12, 0x1c, 0x0a, 0x17, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x44,
	0x4f, 0x45, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x10, 0xd2, 0x0f,
	0x12, 0x13, 0x0a, 0x0e, 0x51, 0x55, 0x4f, 0x54, 0x41, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x45, 0x44,
	0x45, 0x44, 0x10, 0xb9, 0x17, 0x12, 0x1c, 0x0a, 0x17, 0x4d, 0x41, 0x58, 0x5f, 0x42, 0x4c, 0x4f,
	0x43, 0x4b, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44,
	0x10, 0xba, 0x17, 0x12, 0x1b, 0x0a, 0x16, 0x4d, 0x41, 0x58, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x5f,
	0x53, 0x49, 0x5a, 0x45, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x10, 0xbb, 0x17,
	0x2a, 0x20, 0x0a, 0x0b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x10, 0x01, 0x2a, 0xd6, 0x01, 0x0a, 0x0d, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x19, 0x0a, 0x15, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x09, 0x0a, 0x05, 0x49, 0x4e, 0x54, 0x33, 0x32, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x49, 0x4e,
	0x54, 0x36, 0x34, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x46, 0x4c, 0x4f, 0x41, 0x54, 0x33, 0x32,
	0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x46, 0x4c, 0x4f, 0x41, 0x54, 0x36, 0x34, 0x10, 0x04, 0x12,
	0x0a, 0x0a, 0x06, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x05, 0x12, 0x0e, 0x0a, 0x0a, 0x49,
	0x4e, 0x54, 0x33, 0x32, 0x41, 0x52, 0x52, 0x41, 0x59, 0x10, 0x06, 0x12, 0x0e, 0x0a, 0x0a, 0x49,
	0x4e, 0x54, 0x36, 0x34, 0x41, 0x52, 0x52, 0x41, 0x59, 0x10, 0x07, 0x12, 0x10, 0x0a, 0x0c, 0x46,
	0x6c, 0x4f, 0x41, 0x54, 0x33, 0x32, 0x41, 0x52, 0x52, 0x41, 0x59, 0x10, 0x08, 0x12, 0x10, 0x0a,
	0x0c, 0x46, 0x4c, 0x4f, 0x41, 0x54, 0x36, 0x34, 0x41, 0x52, 0x52, 0x41, 0x59, 0x10, 0x09, 0x12,
	0x0f, 0x0a, 0x0b, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x41, 0x52, 0x52, 0x41, 0x59, 0x10, 0x0a,
	0x12, 0x09, 0x0a, 0x05, 0x42, 0x59, 0x54, 0x45, 0x53, 0x10, 0x0b, 0x12, 0x0e, 0x0a, 0x0a, 0x42,
	0x59, 0x54, 0x45, 0x53, 0x41, 0x52, 0x52, 0x41, 0x59, 0x10, 0x0c, 0x2a, 0x78, 0x0a, 0x17, 0x45,
	0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x24, 0x0a, 0x20, 0x45, 0x58, 0x41, 0x4d, 0x50, 0x4c,
	0x45, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e,
	0x45, 0x58, 0x41, 0x4d, 0x50, 0x4c, 0x45, 0x5f, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x10, 0x01,
	0x12, 0x11, 0x0a, 0x0d, 0x45, 0x58, 0x41, 0x4d, 0x50, 0x4c, 0x45, 0x5f, 0x42, 0x41, 0x54, 0x43,
	0x48, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x45, 0x58, 0x41, 0x4d, 0x50, 0x4c, 0x45, 0x5f, 0x42,
	0x4f, 0x54, 0x48, 0x10, 0x03, 0x2a, 0x7b, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x4e,
	0x49, 0x54, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x54, 0x41, 0x52, 0x54, 0x49, 0x4e, 0x47,
	0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12,
	0x0c, 0x0a, 0x08, 0x46, 0x49, 0x4e, 0x49, 0x53, 0x48, 0x45, 0x44, 0x10, 0x04, 0x12, 0x0a, 0x0a,
	0x06, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x05, 0x12, 0x0b, 0x0a, 0x07, 0x4b, 0x49, 0x4c,
	0x4c, 0x49, 0x4e, 0x47, 0x10, 0x06, 0x12, 0x0a, 0x0a, 0x06, 0x4b, 0x49, 0x4c, 0x4c, 0x45, 0x44,
	0x10, 0x07, 0x2a, 0x46, 0x0a, 0x0d, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x42, 0x41, 0x54, 0x43, 0x48, 0x10, 0x01, 0x12, 0x0a,
	0x0a, 0x06, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x10, 0x02, 0x2a, 0x43, 0x0a, 0x09, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x4f, 0x4e, 0x45, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x50,
	0x4f, 0x49, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x41, 0x56, 0x45, 0x44, 0x5f,
	0x4d, 0x4f, 0x44, 0x45, 0x4c, 0x10, 0x02, 0x12, 0x06, 0x0a, 0x02, 0x48, 0x35, 0x10, 0x03, 0x2a,
	0x7d, 0x0a, 0x12, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47,
	0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x00, 0x12,
	0x17, 0x0a, 0x13, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54,
	0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x52, 0x45, 0x41, 0x44,
	0x59, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x44,
	0x45, 0x4c, 0x45, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x46, 0x41, 0x49,
	0x4c, 0x45, 0x44, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x05, 0x2a, 0x5c,
	0x0a, 0x11, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x67, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x41, 0x54, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x41, 0x54, 0x45, 0x44, 0x10,
	0x01, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x45, 0x50, 0x4c, 0x4f, 0x59, 0x45, 0x44, 0x10, 0x02, 0x12,
	0x0e, 0x0a, 0x0a, 0x44, 0x45, 0x50, 0x52, 0x45, 0x43, 0x41, 0x54, 0x45, 0x44, 0x10, 0x03, 0x12,
	0x0b, 0x0a, 0x07, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x04, 0x2a, 0x29, 0x0a, 0x0f,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x0b, 0x0a, 0x07, 0x44, 0x41, 0x54, 0x41, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05,
	0x4d, 0x4f, 0x44, 0x45, 0x4c, 0x10, 0x01, 0x42, 0x22, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x2e, 0x61,
	0x69, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5a, 0x08, 0x2f, 0x61, 0x69,
	0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x88, 0x01, 0x01, 0x90, 0x01, 0x01, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_message_proto_rawDescOnce sync.Once
	file_message_proto_rawDescData = file_message_proto_rawDesc
)

func file_message_proto_rawDescGZIP() []byte {
	file_message_proto_rawDescOnce.Do(func() {
		file_message_proto_rawDescData = protoimpl.X.CompressGZIP(file_message_proto_rawDescData)
	})
	return file_message_proto_rawDescData
}

var file_message_proto_enumTypes = make([]protoimpl.EnumInfo, 10)
var file_message_proto_msgTypes = make([]protoimpl.MessageInfo, 29)
var file_message_proto_goTypes = []interface{}{
	(ReturnCode)(0),                   // 0: ai_flow.ReturnCode
	(StatusProto)(0),                  // 1: ai_flow.StatusProto
	(DataTypeProto)(0),                // 2: ai_flow.DataTypeProto
	(ExampleSupportTypeProto)(0),      // 3: ai_flow.ExampleSupportTypeProto
	(StateProto)(0),                   // 4: ai_flow.StateProto
	(ExecutionMode)(0),                // 5: ai_flow.ExecutionMode
	(ModelType)(0),                    // 6: ai_flow.ModelType
	(ModelVersionStatus)(0),           // 7: ai_flow.ModelVersionStatus
	(ModelVersionStage)(0),            // 8: ai_flow.ModelVersionStage
	(MetricTypeProto)(0),              // 9: ai_flow.MetricTypeProto
	(*SchemaProto)(nil),               // 10: ai_flow.SchemaProto
	(*ExampleProto)(nil),              // 11: ai_flow.ExampleProto
	(*ModelRelationProto)(nil),        // 12: ai_flow.ModelRelationProto
	(*ModelProto)(nil),                // 13: ai_flow.ModelProto
	(*ModelVersionRelationProto)(nil), // 14: ai_flow.ModelVersionRelationProto
	(*ModelVersionProto)(nil),         // 15: ai_flow.ModelVersionProto
	(*JobProto)(nil),                  // 16: ai_flow.JobProto
	(*WorkflowProto)(nil),             // 17: ai_flow.WorkflowProto
	(*WorkflowExecutionProto)(nil),    // 18: ai_flow.WorkflowExecutionProto
	(*ProjectProto)(nil),              // 19: ai_flow.ProjectProto
	(*ArtifactProto)(nil),             // 20: ai_flow.ArtifactProto
	(*RegisteredModelParam)(nil),      // 21: ai_flow.RegisteredModelParam
	(*ModelVersionParam)(nil),         // 22: ai_flow.ModelVersionParam
	(*ModelMetaParam)(nil),            // 23: ai_flow.ModelMetaParam
	(*Response)(nil),                  // 24: ai_flow.Response
	(*RegisteredModelMeta)(nil),       // 25: ai_flow.RegisteredModelMeta
	(*ModelVersionMeta)(nil),          // 26: ai_flow.ModelVersionMeta
	(*RegisteredModelDetail)(nil),     // 27: ai_flow.RegisteredModelDetail
	(*RegisteredModelMetas)(nil),      // 28: ai_flow.RegisteredModelMetas
	(*ResultProto)(nil),               // 29: ai_flow.ResultProto
	(*MetricMetaProto)(nil),           // 30: ai_flow.MetricMetaProto
	(*MetricSummaryProto)(nil),        // 31: ai_flow.MetricSummaryProto
	nil,                               // 32: ai_flow.ExampleProto.PropertiesEntry
	nil,                               // 33: ai_flow.JobProto.PropertiesEntry
	nil,                               // 34: ai_flow.WorkflowProto.PropertiesEntry
	nil,                               // 35: ai_flow.WorkflowExecutionProto.PropertiesEntry
	nil,                               // 36: ai_flow.ProjectProto.PropertiesEntry
	nil,                               // 37: ai_flow.ArtifactProto.PropertiesEntry
	nil,                               // 38: ai_flow.MetricMetaProto.PropertiesEntry
	(*wrappers.StringValue)(nil),      // 39: google.protobuf.StringValue
	(*wrappers.Int64Value)(nil),       // 40: google.protobuf.Int64Value
}
var file_message_proto_depIdxs = []int32{
	2,   // 0: ai_flow.SchemaProto.type_list:type_name -> ai_flow.DataTypeProto
	32,  // 1: ai_flow.ExampleProto.properties:type_name -> ai_flow.ExampleProto.PropertiesEntry
	3,   // 2: ai_flow.ExampleProto.support_type:type_name -> ai_flow.ExampleSupportTypeProto
	10,  // 3: ai_flow.ExampleProto.schema:type_name -> ai_flow.SchemaProto
	39,  // 4: ai_flow.ExampleProto.data_type:type_name -> google.protobuf.StringValue
	39,  // 5: ai_flow.ExampleProto.data_format:type_name -> google.protobuf.StringValue
	39,  // 6: ai_flow.ExampleProto.batch_uri:type_name -> google.protobuf.StringValue
	39,  // 7: ai_flow.ExampleProto.stream_uri:type_name -> google.protobuf.StringValue
	39,  // 8: ai_flow.ExampleProto.description:type_name -> google.protobuf.StringValue
	40,  // 9: ai_flow.ExampleProto.create_time:type_name -> google.protobuf.Int64Value
	40,  // 10: ai_flow.ExampleProto.update_time:type_name -> google.protobuf.Int64Value
	39,  // 11: ai_flow.ExampleProto.catalog_name:type_name -> google.protobuf.StringValue
	39,  // 12: ai_flow.ExampleProto.catalog_type:type_name -> google.protobuf.StringValue
	39,  // 13: ai_flow.ExampleProto.catalog_database:type_name -> google.protobuf.StringValue
	39,  // 14: ai_flow.ExampleProto.catalog_connection_uri:type_name -> google.protobuf.StringValue
	39,  // 15: ai_flow.ExampleProto.catalog_version:type_name -> google.protobuf.StringValue
	39,  // 16: ai_flow.ExampleProto.catalog_table:type_name -> google.protobuf.StringValue
	40,  // 17: ai_flow.ModelRelationProto.project_id:type_name -> google.protobuf.Int64Value
	40,  // 18: ai_flow.ModelProto.project_id:type_name -> google.protobuf.Int64Value
	6,   // 19: ai_flow.ModelProto.model_type:type_name -> ai_flow.ModelType
	39,  // 20: ai_flow.ModelProto.model_desc:type_name -> google.protobuf.StringValue
	39,  // 21: ai_flow.ModelVersionRelationProto.version:type_name -> google.protobuf.StringValue
	40,  // 22: ai_flow.ModelVersionRelationProto.model_id:type_name -> google.protobuf.Int64Value
	40,  // 23: ai_flow.ModelVersionRelationProto.workflow_execution_id:type_name -> google.protobuf.Int64Value
	39,  // 24: ai_flow.ModelVersionProto.version:type_name -> google.protobuf.StringValue
	40,  // 25: ai_flow.ModelVersionProto.model_id:type_name -> google.protobuf.Int64Value
	40,  // 26: ai_flow.ModelVersionProto.workflow_execution_id:type_name -> google.protobuf.Int64Value
	39,  // 27: ai_flow.ModelVersionProto.model_path:type_name -> google.protobuf.StringValue
	39,  // 28: ai_flow.ModelVersionProto.model_metric:type_name -> google.protobuf.StringValue
	39,  // 29: ai_flow.ModelVersionProto.model_flavor:type_name -> google.protobuf.StringValue
	39,  // 30: ai_flow.ModelVersionProto.version_desc:type_name -> google.protobuf.StringValue
	8,   // 31: ai_flow.ModelVersionProto.current_stage:type_name -> ai_flow.ModelVersionStage
	40,  // 32: ai_flow.JobProto.workflow_execution_id:type_name -> google.protobuf.Int64Value
	4,   // 33: ai_flow.JobProto.job_state:type_name -> ai_flow.StateProto
	33,  // 34: ai_flow.JobProto.properties:type_name -> ai_flow.JobProto.PropertiesEntry
	39,  // 35: ai_flow.JobProto.job_id:type_name -> google.protobuf.StringValue
	40,  // 36: ai_flow.JobProto.start_time:type_name -> google.protobuf.Int64Value
	40,  // 37: ai_flow.JobProto.end_time:type_name -> google.protobuf.Int64Value
	39,  // 38: ai_flow.JobProto.log_uri:type_name -> google.protobuf.StringValue
	39,  // 39: ai_flow.JobProto.signature:type_name -> google.protobuf.StringValue
	18,  // 40: ai_flow.JobProto.workflow_execution:type_name -> ai_flow.WorkflowExecutionProto
	39,  // 41: ai_flow.WorkflowProto.workflow_json:type_name -> google.protobuf.StringValue
	34,  // 42: ai_flow.WorkflowProto.properties:type_name -> ai_flow.WorkflowProto.PropertiesEntry
	40,  // 43: ai_flow.WorkflowExecutionProto.project_id:type_name -> google.protobuf.Int64Value
	4,   // 44: ai_flow.WorkflowExecutionProto.execution_state:type_name -> ai_flow.StateProto
	35,  // 45: ai_flow.WorkflowExecutionProto.properties:type_name -> ai_flow.WorkflowExecutionProto.PropertiesEntry
	40,  // 46: ai_flow.WorkflowExecutionProto.start_time:type_name -> google.protobuf.Int64Value
	40,  // 47: ai_flow.WorkflowExecutionProto.end_time:type_name -> google.protobuf.Int64Value
	39,  // 48: ai_flow.WorkflowExecutionProto.log_uri:type_name -> google.protobuf.StringValue
	39,  // 49: ai_flow.WorkflowExecutionProto.workflow_json:type_name -> google.protobuf.StringValue
	39,  // 50: ai_flow.WorkflowExecutionProto.signature:type_name -> google.protobuf.StringValue
	17,  // 51: ai_flow.WorkflowExecutionProto.workflow:type_name -> ai_flow.WorkflowProto
	36,  // 52: ai_flow.ProjectProto.properties:type_name -> ai_flow.ProjectProto.PropertiesEntry
	39,  // 53: ai_flow.ProjectProto.project_type:type_name -> google.protobuf.StringValue
	39,  // 54: ai_flow.ProjectProto.uri:type_name -> google.protobuf.StringValue
	39,  // 55: ai_flow.ProjectProto.user:type_name -> google.protobuf.StringValue
	39,  // 56: ai_flow.ProjectProto.password:type_name -> google.protobuf.StringValue
	37,  // 57: ai_flow.ArtifactProto.properties:type_name -> ai_flow.ArtifactProto.PropertiesEntry
	39,  // 58: ai_flow.ArtifactProto.data_format:type_name -> google.protobuf.StringValue
	39,  // 59: ai_flow.ArtifactProto.batch_uri:type_name -> google.protobuf.StringValue
	39,  // 60: ai_flow.ArtifactProto.stream_uri:type_name -> google.protobuf.StringValue
	39,  // 61: ai_flow.ArtifactProto.description:type_name -> google.protobuf.StringValue
	40,  // 62: ai_flow.ArtifactProto.create_time:type_name -> google.protobuf.Int64Value
	40,  // 63: ai_flow.ArtifactProto.update_time:type_name -> google.protobuf.Int64Value
	39,  // 64: ai_flow.RegisteredModelParam.model_name:type_name -> google.protobuf.StringValue
	6,   // 65: ai_flow.RegisteredModelParam.model_type:type_name -> ai_flow.ModelType
	39,  // 66: ai_flow.RegisteredModelParam.model_desc:type_name -> google.protobuf.StringValue
	39,  // 67: ai_flow.ModelVersionParam.model_path:type_name -> google.protobuf.StringValue
	39,  // 68: ai_flow.ModelVersionParam.model_metric:type_name -> google.protobuf.StringValue
	39,  // 69: ai_flow.ModelVersionParam.model_flavor:type_name -> google.protobuf.StringValue
	39,  // 70: ai_flow.ModelVersionParam.version_desc:type_name -> google.protobuf.StringValue
	8,   // 71: ai_flow.ModelVersionParam.current_stage:type_name -> ai_flow.ModelVersionStage
	39,  // 72: ai_flow.ModelMetaParam.model_name:type_name -> google.protobuf.StringValue
	39,  // 73: ai_flow.ModelMetaParam.model_version:type_name -> google.protobuf.StringValue
	6,   // 74: ai_flow.RegisteredModelMeta.model_type:type_name -> ai_flow.ModelType
	39,  // 75: ai_flow.RegisteredModelMeta.model_desc:type_name -> google.protobuf.StringValue
	39,  // 76: ai_flow.ModelVersionMeta.model_path:type_name -> google.protobuf.StringValue
	39,  // 77: ai_flow.ModelVersionMeta.model_metric:type_name -> google.protobuf.StringValue
	39,  // 78: ai_flow.ModelVersionMeta.model_flavor:type_name -> google.protobuf.StringValue
	39,  // 79: ai_flow.ModelVersionMeta.version_desc:type_name -> google.protobuf.StringValue
	7,   // 80: ai_flow.ModelVersionMeta.version_status:type_name -> ai_flow.ModelVersionStatus
	8,   // 81: ai_flow.ModelVersionMeta.current_stage:type_name -> ai_flow.ModelVersionStage
	25,  // 82: ai_flow.RegisteredModelDetail.registered_model:type_name -> ai_flow.RegisteredModelMeta
	26,  // 83: ai_flow.RegisteredModelDetail.model_version:type_name -> ai_flow.ModelVersionMeta
	25,  // 84: ai_flow.RegisteredModelMetas.registered_models:type_name -> ai_flow.RegisteredModelMeta
	1,   // 85: ai_flow.ResultProto.status:type_name -> ai_flow.StatusProto
	39,  // 86: ai_flow.MetricMetaProto.name:type_name -> google.protobuf.StringValue
	40,  // 87: ai_flow.MetricMetaProto.dataset_id:type_name -> google.protobuf.Int64Value
	39,  // 88: ai_flow.MetricMetaProto.model_name:type_name -> google.protobuf.StringValue
	39,  // 89: ai_flow.MetricMetaProto.model_version:type_name -> google.protobuf.StringValue
	40,  // 90: ai_flow.MetricMetaProto.job_id:type_name -> google.protobuf.Int64Value
	40,  // 91: ai_flow.MetricMetaProto.start_time:type_name -> google.protobuf.Int64Value
	40,  // 92: ai_flow.MetricMetaProto.end_time:type_name -> google.protobuf.Int64Value
	9,   // 93: ai_flow.MetricMetaProto.metric_type:type_name -> ai_flow.MetricTypeProto
	39,  // 94: ai_flow.MetricMetaProto.uri:type_name -> google.protobuf.StringValue
	39,  // 95: ai_flow.MetricMetaProto.tags:type_name -> google.protobuf.StringValue
	39,  // 96: ai_flow.MetricMetaProto.metric_description:type_name -> google.protobuf.StringValue
	38,  // 97: ai_flow.MetricMetaProto.properties:type_name -> ai_flow.MetricMetaProto.PropertiesEntry
	40,  // 98: ai_flow.MetricSummaryProto.metric_id:type_name -> google.protobuf.Int64Value
	39,  // 99: ai_flow.MetricSummaryProto.metric_key:type_name -> google.protobuf.StringValue
	39,  // 100: ai_flow.MetricSummaryProto.metric_value:type_name -> google.protobuf.StringValue
	101, // [101:101] is the sub-list for method output_type
	101, // [101:101] is the sub-list for method input_type
	101, // [101:101] is the sub-list for extension type_name
	101, // [101:101] is the sub-list for extension extendee
	0,   // [0:101] is the sub-list for field type_name
}

func init() { file_message_proto_init() }
func file_message_proto_init() {
	if File_message_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_message_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SchemaProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExampleProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModelRelationProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModelProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModelVersionRelationProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModelVersionProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkflowProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkflowExecutionProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProjectProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArtifactProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisteredModelParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModelVersionParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModelMetaParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisteredModelMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModelVersionMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisteredModelDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisteredModelMetas); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResultProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricMetaProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricSummaryProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_message_proto_rawDesc,
			NumEnums:      10,
			NumMessages:   29,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_message_proto_goTypes,
		DependencyIndexes: file_message_proto_depIdxs,
		EnumInfos:         file_message_proto_enumTypes,
		MessageInfos:      file_message_proto_msgTypes,
	}.Build()
	File_message_proto = out.File
	file_message_proto_rawDesc = nil
	file_message_proto_goTypes = nil
	file_message_proto_depIdxs = nil
}

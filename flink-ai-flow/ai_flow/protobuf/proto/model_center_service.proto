/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
syntax = "proto3";

option java_generic_services = true;
option java_package = "org.aiflow.client.proto";
option py_generic_services = true;
option go_package = "/ai_flow";

import "message.proto";
import "google/api/annotations.proto";

package ai_flow;

service ModelCenterService {
    // AIFlowService provides model registry service rest endpoint of ModelCenterService for Model Center component.
    // Functions of ModelCenterService include:
    //  1.Create registered model
    //  2.Update registered model
    //  3.Delete registered model
    //  4.List registered models
    //  5.Get registered model detail
    //  6.Create model version
    //  7.Update model version
    //  8.Delete model version
    //  9.Get model version detail

    // Create registered model with metadata of RegisteredModel.
    rpc createRegisteredModel (CreateRegisteredModelRequest) returns (Response) {
        option (google.api.http) = {
            post: "/aiflow/model-center/register-model/create"
            body: "*"
        };
    }

    // Update registered model with metadata of RegisteredModel.
    rpc updateRegisteredModel (UpdateRegisteredModelRequest) returns (Response) {
        option (google.api.http) = {
            patch: "/aiflow/model-center/register-model/update"
            body: "*"
        };
    }

    // Delete registered model with metadata of RegisteredModel.
    rpc deleteRegisteredModel (DeleteRegisteredModelRequest) returns (Response) {
        option (google.api.http) = {
            patch: "/aiflow/model-center/register-model/update"
            body: "*"
        };
    }

    // List registered models about metadata of RegisteredModel.
    rpc listRegisteredModels (ListRegisteredModelsRequest) returns (Response) {
        option (google.api.http) = {
            get: "/aiflow/model-center/register-model/list"
        };
    }

    // Get registered model detail including metadata of RegisteredModel.
    rpc getRegisteredModelDetail (GetRegisteredModelDetailRequest) returns (Response) {
        option (google.api.http) = {
            get: "/aiflow/model-center/register-model/get"
        };
    }

    // Create model version with metadata of ModelVersion.
    rpc createModelVersion (CreateModelVersionRequest) returns (Response) {
        option (google.api.http) = {
            post: "/aiflow/model-center/model-version/create"
            body: "*"
        };
    }

    // Update model version with metadata of ModelVersion.
    rpc updateModelVersion (UpdateModelVersionRequest) returns (Response) {
        option (google.api.http) = {
            patch: "/aiflow/model-center/model-version/update"
            body: "*"
        };
    }

    // Delete model version with metadata of ModelVersion.
    rpc deleteModelVersion (DeleteModelVersionRequest) returns (Response) {
        option (google.api.http) = {
            patch: "/aiflow/model-center/model-version/delete"
            body: "*"
        };
    }

    // Get model version detail with metadata of ModelVersion.
    rpc getModelVersionDetail (GetModelVersionDetailRequest) returns (Response) {
        option (google.api.http) = {
            get: "/aiflow/model-center/model-version/get"
        };
    }
}

message CreateRegisteredModelRequest {
    RegisteredModelParam registered_model = 1;
}

message UpdateRegisteredModelRequest {
    ModelMetaParam model_meta = 1;
    RegisteredModelParam registered_model = 2;
}

message DeleteRegisteredModelRequest {
    ModelMetaParam model_meta = 1;
}

message ListRegisteredModelsRequest {
}

message GetRegisteredModelDetailRequest {
    ModelMetaParam model_meta = 1;
}

message CreateModelVersionRequest {
    ModelMetaParam model_meta = 1;
    ModelVersionParam model_version = 2;
}

message UpdateModelVersionRequest {
    ModelMetaParam model_meta = 1;
    ModelVersionParam model_version = 2;
}

message DeleteModelVersionRequest {
    ModelMetaParam model_meta = 1;
}

message GetModelVersionDetailRequest {
    ModelMetaParam model_meta = 1;
}

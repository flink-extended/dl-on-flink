/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
syntax = "proto3";

option java_generic_services = true;
option java_package = "org.aiflow.client.proto";
option py_generic_services = true;
option go_package = "/ai_flow";

package ai_flow;

service HighAvailabilityManager {
    // List current living members.
    rpc listMembers (ListMembersRequest) returns (ListMembersResponse) {
    }

    // Notify current members that there is a new member added.
    rpc notifyNewMember (NotifyNewMemberRequest) returns (NotifyNewMemberResponse) {
    }
}

enum ReturnStatus {
    CALL_SUCCESS = 0;
    CALL_ERROR = 1;
}

message MemberProto {
    int64 version = 1;
    string server_uri = 2;
    int64 update_time = 3;
}

message ListMembersRequest {
    int32 timeout_seconds = 1;
}

message ListMembersResponse {
    ReturnStatus return_code = 1;
    string return_msg = 2;
    repeated MemberProto members = 3;
}

message NotifyNewMemberRequest {
    MemberProto member = 1;
}

message NotifyNewMemberResponse {
    ReturnStatus return_code = 1;
    string return_msg = 2;
}

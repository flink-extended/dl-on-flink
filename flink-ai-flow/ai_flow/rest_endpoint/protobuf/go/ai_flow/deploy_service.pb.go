//
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.11.3
// source: deploy_service.proto

package ai_flow

import (
	context "context"
	//_ "github.com/grpc-ecosystem/grpc-gateway/third_party/googleapis/google/api"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type WorkflowRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	WorkflowJson string `protobuf:"bytes,2,opt,name=workflow_json,json=workflowJson,proto3" json:"workflow_json,omitempty"`
}

func (x *WorkflowRequest) Reset() {
	*x = WorkflowRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deploy_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkflowRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowRequest) ProtoMessage() {}

func (x *WorkflowRequest) ProtoReflect() protoreflect.Message {
	mi := &file_deploy_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowRequest.ProtoReflect.Descriptor instead.
func (*WorkflowRequest) Descriptor() ([]byte, []int) {
	return file_deploy_service_proto_rawDescGZIP(), []int{0}
}

func (x *WorkflowRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *WorkflowRequest) GetWorkflowJson() string {
	if x != nil {
		return x.WorkflowJson
	}
	return ""
}

type ScheduleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReturnCode int64  `protobuf:"varint,1,opt,name=return_code,json=returnCode,proto3" json:"return_code,omitempty"`
	ReturnMsg  string `protobuf:"bytes,2,opt,name=return_msg,json=returnMsg,proto3" json:"return_msg,omitempty"`
	Data       string `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ScheduleResponse) Reset() {
	*x = ScheduleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deploy_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScheduleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduleResponse) ProtoMessage() {}

func (x *ScheduleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_deploy_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduleResponse.ProtoReflect.Descriptor instead.
func (*ScheduleResponse) Descriptor() ([]byte, []int) {
	return file_deploy_service_proto_rawDescGZIP(), []int{1}
}

func (x *ScheduleResponse) GetReturnCode() int64 {
	if x != nil {
		return x.ReturnCode
	}
	return 0
}

func (x *ScheduleResponse) GetReturnMsg() string {
	if x != nil {
		return x.ReturnMsg
	}
	return ""
}

func (x *ScheduleResponse) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type MasterConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *MasterConfigRequest) Reset() {
	*x = MasterConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deploy_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MasterConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MasterConfigRequest) ProtoMessage() {}

func (x *MasterConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_deploy_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MasterConfigRequest.ProtoReflect.Descriptor instead.
func (*MasterConfigRequest) Descriptor() ([]byte, []int) {
	return file_deploy_service_proto_rawDescGZIP(), []int{2}
}

func (x *MasterConfigRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type MasterConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReturnCode int64             `protobuf:"varint,1,opt,name=return_code,json=returnCode,proto3" json:"return_code,omitempty"`
	ReturnMsg  string            `protobuf:"bytes,2,opt,name=return_msg,json=returnMsg,proto3" json:"return_msg,omitempty"`
	Config     map[string]string `protobuf:"bytes,3,rep,name=config,proto3" json:"config,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *MasterConfigResponse) Reset() {
	*x = MasterConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deploy_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MasterConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MasterConfigResponse) ProtoMessage() {}

func (x *MasterConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_deploy_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MasterConfigResponse.ProtoReflect.Descriptor instead.
func (*MasterConfigResponse) Descriptor() ([]byte, []int) {
	return file_deploy_service_proto_rawDescGZIP(), []int{3}
}

func (x *MasterConfigResponse) GetReturnCode() int64 {
	if x != nil {
		return x.ReturnCode
	}
	return 0
}

func (x *MasterConfigResponse) GetReturnMsg() string {
	if x != nil {
		return x.ReturnMsg
	}
	return ""
}

func (x *MasterConfigResponse) GetConfig() map[string]string {
	if x != nil {
		return x.Config
	}
	return nil
}

var File_deploy_service_proto protoreflect.FileDescriptor

var file_deploy_service_proto_rawDesc = []byte{
	0x0a, 0x14, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x1a,
	0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x46, 0x0a,
	0x0f, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x23, 0x0a, 0x0d, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x6a, 0x73, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x4a, 0x73, 0x6f, 0x6e, 0x22, 0x66, 0x0a, 0x10, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x4d, 0x73, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x25, 0x0a,
	0x13, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x69, 0x64, 0x22, 0xd4, 0x01, 0x0a, 0x14, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x4d, 0x73, 0x67, 0x12, 0x41, 0x0a,
	0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x1a, 0x39, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x32, 0x83, 0x05, 0x0a, 0x0d,
	0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x78, 0x0a,
	0x15, 0x73, 0x74, 0x61, 0x72, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x57, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x18, 0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77,
	0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x19, 0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2a, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x24, 0x22, 0x1f, 0x2f, 0x61, 0x69, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x65, 0x72, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x3a, 0x01, 0x2a, 0x12, 0x76, 0x0a, 0x14, 0x73, 0x74, 0x6f, 0x70, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x12,
	0x18, 0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x61, 0x69, 0x5f, 0x66,
	0x6c, 0x6f, 0x77, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x29, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x22, 0x1e, 0x2f, 0x61,
	0x69, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x72, 0x2f, 0x77,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x73, 0x74, 0x6f, 0x70, 0x3a, 0x01, 0x2a, 0x12,
	0x7e, 0x0a, 0x1a, 0x67, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x18, 0x2e,
	0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f,
	0x77, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x2b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x22, 0x20, 0x2f, 0x61, 0x69, 0x66,
	0x6c, 0x6f, 0x77, 0x2f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x72, 0x2f, 0x77, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x3a, 0x01, 0x2a, 0x12,
	0x7b, 0x0a, 0x18, 0x69, 0x73, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x12, 0x18, 0x2e, 0x61, 0x69,
	0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x2a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x22, 0x1f, 0x2f, 0x61, 0x69, 0x66, 0x6c, 0x6f,
	0x77, 0x2f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x72, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x2f, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x82, 0x01, 0x0a,
	0x0f, 0x67, 0x65, 0x74, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x1c, 0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d,
	0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x32, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x2c, 0x22, 0x27, 0x2f, 0x61, 0x69, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x64,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x72, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x2f, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x3a, 0x01,
	0x2a, 0x42, 0x22, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x69, 0x66, 0x6c, 0x6f, 0x77, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5a, 0x08, 0x2f, 0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x88,
	0x01, 0x01, 0x90, 0x01, 0x01, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_deploy_service_proto_rawDescOnce sync.Once
	file_deploy_service_proto_rawDescData = file_deploy_service_proto_rawDesc
)

func file_deploy_service_proto_rawDescGZIP() []byte {
	file_deploy_service_proto_rawDescOnce.Do(func() {
		file_deploy_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_deploy_service_proto_rawDescData)
	})
	return file_deploy_service_proto_rawDescData
}

var file_deploy_service_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_deploy_service_proto_goTypes = []interface{}{
	(*WorkflowRequest)(nil),      // 0: ai_flow.WorkflowRequest
	(*ScheduleResponse)(nil),     // 1: ai_flow.ScheduleResponse
	(*MasterConfigRequest)(nil),  // 2: ai_flow.MasterConfigRequest
	(*MasterConfigResponse)(nil), // 3: ai_flow.MasterConfigResponse
	nil,                          // 4: ai_flow.MasterConfigResponse.ConfigEntry
}
var file_deploy_service_proto_depIdxs = []int32{
	4, // 0: ai_flow.MasterConfigResponse.config:type_name -> ai_flow.MasterConfigResponse.ConfigEntry
	0, // 1: ai_flow.DeployService.startScheduleWorkflow:input_type -> ai_flow.WorkflowRequest
	0, // 2: ai_flow.DeployService.stopScheduleWorkflow:input_type -> ai_flow.WorkflowRequest
	0, // 3: ai_flow.DeployService.getWorkflowExecutionResult:input_type -> ai_flow.WorkflowRequest
	0, // 4: ai_flow.DeployService.isWorkflowExecutionAlive:input_type -> ai_flow.WorkflowRequest
	2, // 5: ai_flow.DeployService.getMasterConfig:input_type -> ai_flow.MasterConfigRequest
	1, // 6: ai_flow.DeployService.startScheduleWorkflow:output_type -> ai_flow.ScheduleResponse
	1, // 7: ai_flow.DeployService.stopScheduleWorkflow:output_type -> ai_flow.ScheduleResponse
	1, // 8: ai_flow.DeployService.getWorkflowExecutionResult:output_type -> ai_flow.ScheduleResponse
	1, // 9: ai_flow.DeployService.isWorkflowExecutionAlive:output_type -> ai_flow.ScheduleResponse
	3, // 10: ai_flow.DeployService.getMasterConfig:output_type -> ai_flow.MasterConfigResponse
	6, // [6:11] is the sub-list for method output_type
	1, // [1:6] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_deploy_service_proto_init() }
func file_deploy_service_proto_init() {
	if File_deploy_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_deploy_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkflowRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deploy_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScheduleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deploy_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MasterConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deploy_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MasterConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_deploy_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_deploy_service_proto_goTypes,
		DependencyIndexes: file_deploy_service_proto_depIdxs,
		MessageInfos:      file_deploy_service_proto_msgTypes,
	}.Build()
	File_deploy_service_proto = out.File
	file_deploy_service_proto_rawDesc = nil
	file_deploy_service_proto_goTypes = nil
	file_deploy_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DeployServiceClient is the client API for DeployService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DeployServiceClient interface {
	StartScheduleWorkflow(ctx context.Context, in *WorkflowRequest, opts ...grpc.CallOption) (*ScheduleResponse, error)
	StopScheduleWorkflow(ctx context.Context, in *WorkflowRequest, opts ...grpc.CallOption) (*ScheduleResponse, error)
	GetWorkflowExecutionResult(ctx context.Context, in *WorkflowRequest, opts ...grpc.CallOption) (*ScheduleResponse, error)
	IsWorkflowExecutionAlive(ctx context.Context, in *WorkflowRequest, opts ...grpc.CallOption) (*ScheduleResponse, error)
	GetMasterConfig(ctx context.Context, in *MasterConfigRequest, opts ...grpc.CallOption) (*MasterConfigResponse, error)
}

type deployServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDeployServiceClient(cc grpc.ClientConnInterface) DeployServiceClient {
	return &deployServiceClient{cc}
}

func (c *deployServiceClient) StartScheduleWorkflow(ctx context.Context, in *WorkflowRequest, opts ...grpc.CallOption) (*ScheduleResponse, error) {
	out := new(ScheduleResponse)
	err := c.cc.Invoke(ctx, "/ai_flow.DeployService/startScheduleWorkflow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deployServiceClient) StopScheduleWorkflow(ctx context.Context, in *WorkflowRequest, opts ...grpc.CallOption) (*ScheduleResponse, error) {
	out := new(ScheduleResponse)
	err := c.cc.Invoke(ctx, "/ai_flow.DeployService/stopScheduleWorkflow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deployServiceClient) GetWorkflowExecutionResult(ctx context.Context, in *WorkflowRequest, opts ...grpc.CallOption) (*ScheduleResponse, error) {
	out := new(ScheduleResponse)
	err := c.cc.Invoke(ctx, "/ai_flow.DeployService/getWorkflowExecutionResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deployServiceClient) IsWorkflowExecutionAlive(ctx context.Context, in *WorkflowRequest, opts ...grpc.CallOption) (*ScheduleResponse, error) {
	out := new(ScheduleResponse)
	err := c.cc.Invoke(ctx, "/ai_flow.DeployService/isWorkflowExecutionAlive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deployServiceClient) GetMasterConfig(ctx context.Context, in *MasterConfigRequest, opts ...grpc.CallOption) (*MasterConfigResponse, error) {
	out := new(MasterConfigResponse)
	err := c.cc.Invoke(ctx, "/ai_flow.DeployService/getMasterConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeployServiceServer is the server API for DeployService service.
type DeployServiceServer interface {
	StartScheduleWorkflow(context.Context, *WorkflowRequest) (*ScheduleResponse, error)
	StopScheduleWorkflow(context.Context, *WorkflowRequest) (*ScheduleResponse, error)
	GetWorkflowExecutionResult(context.Context, *WorkflowRequest) (*ScheduleResponse, error)
	IsWorkflowExecutionAlive(context.Context, *WorkflowRequest) (*ScheduleResponse, error)
	GetMasterConfig(context.Context, *MasterConfigRequest) (*MasterConfigResponse, error)
}

// UnimplementedDeployServiceServer can be embedded to have forward compatible implementations.
type UnimplementedDeployServiceServer struct {
}

func (*UnimplementedDeployServiceServer) StartScheduleWorkflow(context.Context, *WorkflowRequest) (*ScheduleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartScheduleWorkflow not implemented")
}
func (*UnimplementedDeployServiceServer) StopScheduleWorkflow(context.Context, *WorkflowRequest) (*ScheduleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopScheduleWorkflow not implemented")
}
func (*UnimplementedDeployServiceServer) GetWorkflowExecutionResult(context.Context, *WorkflowRequest) (*ScheduleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkflowExecutionResult not implemented")
}
func (*UnimplementedDeployServiceServer) IsWorkflowExecutionAlive(context.Context, *WorkflowRequest) (*ScheduleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsWorkflowExecutionAlive not implemented")
}
func (*UnimplementedDeployServiceServer) GetMasterConfig(context.Context, *MasterConfigRequest) (*MasterConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMasterConfig not implemented")
}

func RegisterDeployServiceServer(s *grpc.Server, srv DeployServiceServer) {
	s.RegisterService(&_DeployService_serviceDesc, srv)
}

func _DeployService_StartScheduleWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkflowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeployServiceServer).StartScheduleWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai_flow.DeployService/StartScheduleWorkflow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeployServiceServer).StartScheduleWorkflow(ctx, req.(*WorkflowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeployService_StopScheduleWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkflowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeployServiceServer).StopScheduleWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai_flow.DeployService/StopScheduleWorkflow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeployServiceServer).StopScheduleWorkflow(ctx, req.(*WorkflowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeployService_GetWorkflowExecutionResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkflowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeployServiceServer).GetWorkflowExecutionResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai_flow.DeployService/GetWorkflowExecutionResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeployServiceServer).GetWorkflowExecutionResult(ctx, req.(*WorkflowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeployService_IsWorkflowExecutionAlive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkflowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeployServiceServer).IsWorkflowExecutionAlive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai_flow.DeployService/IsWorkflowExecutionAlive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeployServiceServer).IsWorkflowExecutionAlive(ctx, req.(*WorkflowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeployService_GetMasterConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MasterConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeployServiceServer).GetMasterConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai_flow.DeployService/GetMasterConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeployServiceServer).GetMasterConfig(ctx, req.(*MasterConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DeployService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ai_flow.DeployService",
	HandlerType: (*DeployServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "startScheduleWorkflow",
			Handler:    _DeployService_StartScheduleWorkflow_Handler,
		},
		{
			MethodName: "stopScheduleWorkflow",
			Handler:    _DeployService_StopScheduleWorkflow_Handler,
		},
		{
			MethodName: "getWorkflowExecutionResult",
			Handler:    _DeployService_GetWorkflowExecutionResult_Handler,
		},
		{
			MethodName: "isWorkflowExecutionAlive",
			Handler:    _DeployService_IsWorkflowExecutionAlive_Handler,
		},
		{
			MethodName: "getMasterConfig",
			Handler:    _DeployService_GetMasterConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "deploy_service.proto",
}

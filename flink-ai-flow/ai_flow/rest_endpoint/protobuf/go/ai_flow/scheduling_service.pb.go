//
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.11.3
// source: scheduling_service.proto

package ai_flow

import (
	context "context"
	_ "github.com/golang/protobuf/ptypes/wrappers"
	//_ "github.com/grpc-ecosystem/grpc-gateway/third_party/googleapis/google/api"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ScheduleWorkflowRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace    string            `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	WorkflowName string            `protobuf:"bytes,2,opt,name=workflow_name,json=workflowName,proto3" json:"workflow_name,omitempty"`
	Args         map[string]string `protobuf:"bytes,3,rep,name=args,proto3" json:"args,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	WorkflowJson string            `protobuf:"bytes,4,opt,name=workflow_json,json=workflowJson,proto3" json:"workflow_json,omitempty"`
}

func (x *ScheduleWorkflowRequest) Reset() {
	*x = ScheduleWorkflowRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scheduling_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScheduleWorkflowRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduleWorkflowRequest) ProtoMessage() {}

func (x *ScheduleWorkflowRequest) ProtoReflect() protoreflect.Message {
	mi := &file_scheduling_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduleWorkflowRequest.ProtoReflect.Descriptor instead.
func (*ScheduleWorkflowRequest) Descriptor() ([]byte, []int) {
	return file_scheduling_service_proto_rawDescGZIP(), []int{0}
}

func (x *ScheduleWorkflowRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *ScheduleWorkflowRequest) GetWorkflowName() string {
	if x != nil {
		return x.WorkflowName
	}
	return ""
}

func (x *ScheduleWorkflowRequest) GetArgs() map[string]string {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *ScheduleWorkflowRequest) GetWorkflowJson() string {
	if x != nil {
		return x.WorkflowJson
	}
	return ""
}

type WorkflowExecutionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace    string            `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	ExecutionId  string            `protobuf:"bytes,2,opt,name=execution_id,json=executionId,proto3" json:"execution_id,omitempty"`
	WorkflowName string            `protobuf:"bytes,3,opt,name=workflow_name,json=workflowName,proto3" json:"workflow_name,omitempty"`
	Args         map[string]string `protobuf:"bytes,4,rep,name=args,proto3" json:"args,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *WorkflowExecutionRequest) Reset() {
	*x = WorkflowExecutionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scheduling_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkflowExecutionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowExecutionRequest) ProtoMessage() {}

func (x *WorkflowExecutionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_scheduling_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowExecutionRequest.ProtoReflect.Descriptor instead.
func (*WorkflowExecutionRequest) Descriptor() ([]byte, []int) {
	return file_scheduling_service_proto_rawDescGZIP(), []int{1}
}

func (x *WorkflowExecutionRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *WorkflowExecutionRequest) GetExecutionId() string {
	if x != nil {
		return x.ExecutionId
	}
	return ""
}

func (x *WorkflowExecutionRequest) GetWorkflowName() string {
	if x != nil {
		return x.WorkflowName
	}
	return ""
}

func (x *WorkflowExecutionRequest) GetArgs() map[string]string {
	if x != nil {
		return x.Args
	}
	return nil
}

type ScheduleJobRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace   string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	JobName     string `protobuf:"bytes,2,opt,name=job_name,json=jobName,proto3" json:"job_name,omitempty"`
	ExecutionId string `protobuf:"bytes,3,opt,name=execution_id,json=executionId,proto3" json:"execution_id,omitempty"`
}

func (x *ScheduleJobRequest) Reset() {
	*x = ScheduleJobRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scheduling_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScheduleJobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduleJobRequest) ProtoMessage() {}

func (x *ScheduleJobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_scheduling_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduleJobRequest.ProtoReflect.Descriptor instead.
func (*ScheduleJobRequest) Descriptor() ([]byte, []int) {
	return file_scheduling_service_proto_rawDescGZIP(), []int{2}
}

func (x *ScheduleJobRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *ScheduleJobRequest) GetJobName() string {
	if x != nil {
		return x.JobName
	}
	return ""
}

func (x *ScheduleJobRequest) GetExecutionId() string {
	if x != nil {
		return x.ExecutionId
	}
	return ""
}

type WorkflowInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result   *ResultProto   `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	Workflow *WorkflowProto `protobuf:"bytes,2,opt,name=workflow,proto3" json:"workflow,omitempty"`
}

func (x *WorkflowInfoResponse) Reset() {
	*x = WorkflowInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scheduling_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkflowInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowInfoResponse) ProtoMessage() {}

func (x *WorkflowInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_scheduling_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowInfoResponse.ProtoReflect.Descriptor instead.
func (*WorkflowInfoResponse) Descriptor() ([]byte, []int) {
	return file_scheduling_service_proto_rawDescGZIP(), []int{3}
}

func (x *WorkflowInfoResponse) GetResult() *ResultProto {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *WorkflowInfoResponse) GetWorkflow() *WorkflowProto {
	if x != nil {
		return x.Workflow
	}
	return nil
}

type ListWorkflowInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result       *ResultProto     `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	WorkflowList []*WorkflowProto `protobuf:"bytes,2,rep,name=workflow_list,json=workflowList,proto3" json:"workflow_list,omitempty"`
}

func (x *ListWorkflowInfoResponse) Reset() {
	*x = ListWorkflowInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scheduling_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListWorkflowInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListWorkflowInfoResponse) ProtoMessage() {}

func (x *ListWorkflowInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_scheduling_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListWorkflowInfoResponse.ProtoReflect.Descriptor instead.
func (*ListWorkflowInfoResponse) Descriptor() ([]byte, []int) {
	return file_scheduling_service_proto_rawDescGZIP(), []int{4}
}

func (x *ListWorkflowInfoResponse) GetResult() *ResultProto {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *ListWorkflowInfoResponse) GetWorkflowList() []*WorkflowProto {
	if x != nil {
		return x.WorkflowList
	}
	return nil
}

type WorkflowExecutionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result            *ResultProto            `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	WorkflowExecution *WorkflowExecutionProto `protobuf:"bytes,2,opt,name=workflow_execution,json=workflowExecution,proto3" json:"workflow_execution,omitempty"`
}

func (x *WorkflowExecutionResponse) Reset() {
	*x = WorkflowExecutionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scheduling_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkflowExecutionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowExecutionResponse) ProtoMessage() {}

func (x *WorkflowExecutionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_scheduling_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowExecutionResponse.ProtoReflect.Descriptor instead.
func (*WorkflowExecutionResponse) Descriptor() ([]byte, []int) {
	return file_scheduling_service_proto_rawDescGZIP(), []int{5}
}

func (x *WorkflowExecutionResponse) GetResult() *ResultProto {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *WorkflowExecutionResponse) GetWorkflowExecution() *WorkflowExecutionProto {
	if x != nil {
		return x.WorkflowExecution
	}
	return nil
}

type ListWorkflowExecutionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result                *ResultProto              `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	WorkflowExecutionList []*WorkflowExecutionProto `protobuf:"bytes,2,rep,name=workflow_execution_list,json=workflowExecutionList,proto3" json:"workflow_execution_list,omitempty"`
}

func (x *ListWorkflowExecutionResponse) Reset() {
	*x = ListWorkflowExecutionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scheduling_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListWorkflowExecutionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListWorkflowExecutionResponse) ProtoMessage() {}

func (x *ListWorkflowExecutionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_scheduling_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListWorkflowExecutionResponse.ProtoReflect.Descriptor instead.
func (*ListWorkflowExecutionResponse) Descriptor() ([]byte, []int) {
	return file_scheduling_service_proto_rawDescGZIP(), []int{6}
}

func (x *ListWorkflowExecutionResponse) GetResult() *ResultProto {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *ListWorkflowExecutionResponse) GetWorkflowExecutionList() []*WorkflowExecutionProto {
	if x != nil {
		return x.WorkflowExecutionList
	}
	return nil
}

type JobInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *ResultProto `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	Job    *JobProto    `protobuf:"bytes,2,opt,name=job,proto3" json:"job,omitempty"`
}

func (x *JobInfoResponse) Reset() {
	*x = JobInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scheduling_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobInfoResponse) ProtoMessage() {}

func (x *JobInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_scheduling_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobInfoResponse.ProtoReflect.Descriptor instead.
func (*JobInfoResponse) Descriptor() ([]byte, []int) {
	return file_scheduling_service_proto_rawDescGZIP(), []int{7}
}

func (x *JobInfoResponse) GetResult() *ResultProto {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *JobInfoResponse) GetJob() *JobProto {
	if x != nil {
		return x.Job
	}
	return nil
}

type ListJobInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result  *ResultProto `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	JobList []*JobProto  `protobuf:"bytes,2,rep,name=job_list,json=jobList,proto3" json:"job_list,omitempty"`
}

func (x *ListJobInfoResponse) Reset() {
	*x = ListJobInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scheduling_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListJobInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListJobInfoResponse) ProtoMessage() {}

func (x *ListJobInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_scheduling_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListJobInfoResponse.ProtoReflect.Descriptor instead.
func (*ListJobInfoResponse) Descriptor() ([]byte, []int) {
	return file_scheduling_service_proto_rawDescGZIP(), []int{8}
}

func (x *ListJobInfoResponse) GetResult() *ResultProto {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *ListJobInfoResponse) GetJobList() []*JobProto {
	if x != nil {
		return x.JobList
	}
	return nil
}

var File_scheduling_service_proto protoreflect.FileDescriptor

var file_scheduling_service_proto_rawDesc = []byte{
	0x0a, 0x18, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x61, 0x69, 0x5f, 0x66,
	0x6c, 0x6f, 0x77, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x0d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xfa, 0x01, 0x0a, 0x17, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x57, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x77, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x3e, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x41, 0x72, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x12,
	0x23, 0x0a, 0x0d, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x6a, 0x73, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x4a, 0x73, 0x6f, 0x6e, 0x1a, 0x37, 0x0a, 0x09, 0x41, 0x72, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xfa, 0x01,
	0x0a, 0x18, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x77,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x3f, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x41, 0x72, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x61, 0x72, 0x67,
	0x73, 0x1a, 0x37, 0x0a, 0x09, 0x41, 0x72, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x70, 0x0a, 0x12, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x6a, 0x6f, 0x62, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6a, 0x6f, 0x62, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x78, 0x0a, 0x14,
	0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x32, 0x0a, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x57,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x08, 0x77, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x22, 0x85, 0x01, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x57,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x3b, 0x0a, 0x0d, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c,
	0x6f, 0x77, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x52, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x99,
	0x01, 0x0a, 0x19, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61,
	0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x4e, 0x0a, 0x12, 0x77, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77,
	0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x11, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xa6, 0x01, 0x0a, 0x1d, 0x4c,
	0x69, 0x73, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61,
	0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x57, 0x0a, 0x17, 0x77, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x69,
	0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x15, 0x77, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4c,
	0x69, 0x73, 0x74, 0x22, 0x64, 0x0a, 0x0f, 0x4a, 0x6f, 0x62, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77,
	0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x23, 0x0a, 0x03, 0x6a, 0x6f, 0x62, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x4a, 0x6f, 0x62, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x52, 0x03, 0x6a, 0x6f, 0x62, 0x22, 0x71, 0x0a, 0x13, 0x4c, 0x69, 0x73,
	0x74, 0x4a, 0x6f, 0x62, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2c, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x2c,
	0x0a, 0x08, 0x6a, 0x6f, 0x62, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x4a, 0x6f, 0x62, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x52, 0x07, 0x6a, 0x6f, 0x62, 0x4c, 0x69, 0x73, 0x74, 0x32, 0xde, 0x10, 0x0a,
	0x11, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x80, 0x01, 0x0a, 0x0e, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x57, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x20, 0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f,
	0x77, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x22, 0x22,
	0x2f, 0x61, 0x69, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69,
	0x6e, 0x67, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x73, 0x75, 0x62, 0x6d,
	0x69, 0x74, 0x3a, 0x01, 0x2a, 0x12, 0x80, 0x01, 0x0a, 0x0e, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x20, 0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c,
	0x6f, 0x77, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x61, 0x69, 0x5f,
	0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2d, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x27, 0x22, 0x22, 0x2f, 0x61, 0x69, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x69, 0x6e, 0x67, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x88, 0x01, 0x0a, 0x17, 0x70, 0x61, 0x75,
	0x73, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x69, 0x6e, 0x67, 0x12, 0x20, 0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77,
	0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26, 0x22, 0x21, 0x2f,
	0x61, 0x69, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e,
	0x67, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x70, 0x61, 0x75, 0x73, 0x65,
	0x3a, 0x01, 0x2a, 0x12, 0x8a, 0x01, 0x0a, 0x18, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x57, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67,
	0x12, 0x20, 0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x57, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x2d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x22, 0x22, 0x2f, 0x61, 0x69, 0x66, 0x6c,
	0x6f, 0x77, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x2f, 0x77, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x3a, 0x01, 0x2a,
	0x12, 0x7a, 0x0a, 0x0b, 0x67, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x12,
	0x20, 0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1d, 0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x57, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x2a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x22, 0x1f, 0x2f, 0x61, 0x69, 0x66, 0x6c, 0x6f,
	0x77, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x2f, 0x77, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x67, 0x65, 0x74, 0x3a, 0x01, 0x2a, 0x12, 0x81, 0x01, 0x0a,
	0x0d, 0x6c, 0x69, 0x73, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x12, 0x20,
	0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x21, 0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x57,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x2b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x22, 0x20, 0x2f, 0x61, 0x69,
	0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x2f,
	0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x3a, 0x01, 0x2a,
	0x12, 0x9e, 0x01, 0x0a, 0x19, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4e, 0x65, 0x77, 0x57, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21,
	0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x22, 0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x57, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x34, 0x22, 0x2f, 0x2f,
	0x61, 0x69, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e,
	0x67, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6e, 0x65, 0x77, 0x3a, 0x01,
	0x2a, 0x12, 0xa1, 0x01, 0x0a, 0x19, 0x6b, 0x69, 0x6c, 0x6c, 0x41, 0x6c, 0x6c, 0x57, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x21, 0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x26, 0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x39, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x33, 0x22, 0x2e, 0x2f, 0x61, 0x69, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f,
	0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x61,
	0x6c, 0x6c, 0x3a, 0x01, 0x2a, 0x12, 0x95, 0x01, 0x0a, 0x15, 0x6b, 0x69, 0x6c, 0x6c, 0x57, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x21, 0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x22, 0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x57, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x35, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2f, 0x22, 0x2a,
	0x2f, 0x61, 0x69, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69,
	0x6e, 0x67, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x65, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6b, 0x69, 0x6c, 0x6c, 0x3a, 0x01, 0x2a, 0x12, 0x93, 0x01,
	0x0a, 0x14, 0x67, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77,
	0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x61, 0x69, 0x5f, 0x66,
	0x6c, 0x6f, 0x77, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x34, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x2e, 0x22, 0x29, 0x2f, 0x61, 0x69, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x67, 0x65, 0x74,
	0x3a, 0x01, 0x2a, 0x12, 0x9a, 0x01, 0x0a, 0x16, 0x6c, 0x69, 0x73, 0x74, 0x57, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x21,
	0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x26, 0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x35, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x2f, 0x22, 0x2a, 0x2f, 0x61, 0x69, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x69, 0x6e, 0x67, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x65,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x3a, 0x01, 0x2a,
	0x12, 0x6a, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4a, 0x6f, 0x62, 0x12, 0x1b, 0x2e, 0x61,
	0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x4a,
	0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x61, 0x69, 0x5f, 0x66,
	0x6c, 0x6f, 0x77, 0x2e, 0x4a, 0x6f, 0x62, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x27, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x22, 0x1c, 0x2f, 0x61, 0x69,
	0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x2f,
	0x6a, 0x6f, 0x62, 0x2f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x3a, 0x01, 0x2a, 0x12, 0x68, 0x0a, 0x07,
	0x73, 0x74, 0x6f, 0x70, 0x4a, 0x6f, 0x62, 0x12, 0x1b, 0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f,
	0x77, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x4a,
	0x6f, 0x62, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x26,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x22, 0x1b, 0x2f, 0x61, 0x69, 0x66, 0x6c, 0x6f, 0x77, 0x2f,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x2f, 0x6a, 0x6f, 0x62, 0x2f, 0x73,
	0x74, 0x6f, 0x70, 0x3a, 0x01, 0x2a, 0x12, 0x6e, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x4a, 0x6f, 0x62, 0x12, 0x1b, 0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x18, 0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x4a, 0x6f, 0x62, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x29, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x23, 0x22, 0x1e, 0x2f, 0x61, 0x69, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x2f, 0x6a, 0x6f, 0x62, 0x2f, 0x72, 0x65, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x3a, 0x01, 0x2a, 0x12, 0x66, 0x0a, 0x06, 0x67, 0x65, 0x74, 0x4a, 0x6f, 0x62,
	0x12, 0x1b, 0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e,
	0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x4a, 0x6f, 0x62, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x25, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x22,
	0x1a, 0x2f, 0x61, 0x69, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x69, 0x6e, 0x67, 0x2f, 0x6a, 0x6f, 0x62, 0x2f, 0x67, 0x65, 0x74, 0x3a, 0x01, 0x2a, 0x12, 0x6d,
	0x0a, 0x08, 0x6c, 0x69, 0x73, 0x74, 0x4a, 0x6f, 0x62, 0x73, 0x12, 0x1b, 0x2e, 0x61, 0x69, 0x5f,
	0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x4a, 0x6f, 0x62,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f,
	0x77, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4a, 0x6f, 0x62, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x22, 0x1b, 0x2f,
	0x61, 0x69, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e,
	0x67, 0x2f, 0x6a, 0x6f, 0x62, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x3a, 0x01, 0x2a, 0x42, 0x22, 0x0a,
	0x10, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x69, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x5a, 0x08, 0x2f, 0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x88, 0x01, 0x01, 0x90, 0x01,
	0x01, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_scheduling_service_proto_rawDescOnce sync.Once
	file_scheduling_service_proto_rawDescData = file_scheduling_service_proto_rawDesc
)

func file_scheduling_service_proto_rawDescGZIP() []byte {
	file_scheduling_service_proto_rawDescOnce.Do(func() {
		file_scheduling_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_scheduling_service_proto_rawDescData)
	})
	return file_scheduling_service_proto_rawDescData
}

var file_scheduling_service_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_scheduling_service_proto_goTypes = []interface{}{
	(*ScheduleWorkflowRequest)(nil),       // 0: ai_flow.ScheduleWorkflowRequest
	(*WorkflowExecutionRequest)(nil),      // 1: ai_flow.WorkflowExecutionRequest
	(*ScheduleJobRequest)(nil),            // 2: ai_flow.ScheduleJobRequest
	(*WorkflowInfoResponse)(nil),          // 3: ai_flow.WorkflowInfoResponse
	(*ListWorkflowInfoResponse)(nil),      // 4: ai_flow.ListWorkflowInfoResponse
	(*WorkflowExecutionResponse)(nil),     // 5: ai_flow.WorkflowExecutionResponse
	(*ListWorkflowExecutionResponse)(nil), // 6: ai_flow.ListWorkflowExecutionResponse
	(*JobInfoResponse)(nil),               // 7: ai_flow.JobInfoResponse
	(*ListJobInfoResponse)(nil),           // 8: ai_flow.ListJobInfoResponse
	nil,                                   // 9: ai_flow.ScheduleWorkflowRequest.ArgsEntry
	nil,                                   // 10: ai_flow.WorkflowExecutionRequest.ArgsEntry
	(*ResultProto)(nil),                   // 11: ai_flow.ResultProto
	(*WorkflowProto)(nil),                 // 12: ai_flow.WorkflowProto
	(*WorkflowExecutionProto)(nil),        // 13: ai_flow.WorkflowExecutionProto
	(*JobProto)(nil),                      // 14: ai_flow.JobProto
}
var file_scheduling_service_proto_depIdxs = []int32{
	9,  // 0: ai_flow.ScheduleWorkflowRequest.args:type_name -> ai_flow.ScheduleWorkflowRequest.ArgsEntry
	10, // 1: ai_flow.WorkflowExecutionRequest.args:type_name -> ai_flow.WorkflowExecutionRequest.ArgsEntry
	11, // 2: ai_flow.WorkflowInfoResponse.result:type_name -> ai_flow.ResultProto
	12, // 3: ai_flow.WorkflowInfoResponse.workflow:type_name -> ai_flow.WorkflowProto
	11, // 4: ai_flow.ListWorkflowInfoResponse.result:type_name -> ai_flow.ResultProto
	12, // 5: ai_flow.ListWorkflowInfoResponse.workflow_list:type_name -> ai_flow.WorkflowProto
	11, // 6: ai_flow.WorkflowExecutionResponse.result:type_name -> ai_flow.ResultProto
	13, // 7: ai_flow.WorkflowExecutionResponse.workflow_execution:type_name -> ai_flow.WorkflowExecutionProto
	11, // 8: ai_flow.ListWorkflowExecutionResponse.result:type_name -> ai_flow.ResultProto
	13, // 9: ai_flow.ListWorkflowExecutionResponse.workflow_execution_list:type_name -> ai_flow.WorkflowExecutionProto
	11, // 10: ai_flow.JobInfoResponse.result:type_name -> ai_flow.ResultProto
	14, // 11: ai_flow.JobInfoResponse.job:type_name -> ai_flow.JobProto
	11, // 12: ai_flow.ListJobInfoResponse.result:type_name -> ai_flow.ResultProto
	14, // 13: ai_flow.ListJobInfoResponse.job_list:type_name -> ai_flow.JobProto
	0,  // 14: ai_flow.SchedulingService.submitWorkflow:input_type -> ai_flow.ScheduleWorkflowRequest
	0,  // 15: ai_flow.SchedulingService.deleteWorkflow:input_type -> ai_flow.ScheduleWorkflowRequest
	0,  // 16: ai_flow.SchedulingService.pauseWorkflowScheduling:input_type -> ai_flow.ScheduleWorkflowRequest
	0,  // 17: ai_flow.SchedulingService.resumeWorkflowScheduling:input_type -> ai_flow.ScheduleWorkflowRequest
	0,  // 18: ai_flow.SchedulingService.getWorkflow:input_type -> ai_flow.ScheduleWorkflowRequest
	0,  // 19: ai_flow.SchedulingService.listWorkflows:input_type -> ai_flow.ScheduleWorkflowRequest
	1,  // 20: ai_flow.SchedulingService.startNewWorkflowExecution:input_type -> ai_flow.WorkflowExecutionRequest
	1,  // 21: ai_flow.SchedulingService.killAllWorkflowExecutions:input_type -> ai_flow.WorkflowExecutionRequest
	1,  // 22: ai_flow.SchedulingService.killWorkflowExecution:input_type -> ai_flow.WorkflowExecutionRequest
	1,  // 23: ai_flow.SchedulingService.getWorkflowExecution:input_type -> ai_flow.WorkflowExecutionRequest
	1,  // 24: ai_flow.SchedulingService.listWorkflowExecutions:input_type -> ai_flow.WorkflowExecutionRequest
	2,  // 25: ai_flow.SchedulingService.startJob:input_type -> ai_flow.ScheduleJobRequest
	2,  // 26: ai_flow.SchedulingService.stopJob:input_type -> ai_flow.ScheduleJobRequest
	2,  // 27: ai_flow.SchedulingService.restartJob:input_type -> ai_flow.ScheduleJobRequest
	2,  // 28: ai_flow.SchedulingService.getJob:input_type -> ai_flow.ScheduleJobRequest
	2,  // 29: ai_flow.SchedulingService.listJobs:input_type -> ai_flow.ScheduleJobRequest
	3,  // 30: ai_flow.SchedulingService.submitWorkflow:output_type -> ai_flow.WorkflowInfoResponse
	3,  // 31: ai_flow.SchedulingService.deleteWorkflow:output_type -> ai_flow.WorkflowInfoResponse
	3,  // 32: ai_flow.SchedulingService.pauseWorkflowScheduling:output_type -> ai_flow.WorkflowInfoResponse
	3,  // 33: ai_flow.SchedulingService.resumeWorkflowScheduling:output_type -> ai_flow.WorkflowInfoResponse
	3,  // 34: ai_flow.SchedulingService.getWorkflow:output_type -> ai_flow.WorkflowInfoResponse
	4,  // 35: ai_flow.SchedulingService.listWorkflows:output_type -> ai_flow.ListWorkflowInfoResponse
	5,  // 36: ai_flow.SchedulingService.startNewWorkflowExecution:output_type -> ai_flow.WorkflowExecutionResponse
	6,  // 37: ai_flow.SchedulingService.killAllWorkflowExecutions:output_type -> ai_flow.ListWorkflowExecutionResponse
	5,  // 38: ai_flow.SchedulingService.killWorkflowExecution:output_type -> ai_flow.WorkflowExecutionResponse
	5,  // 39: ai_flow.SchedulingService.getWorkflowExecution:output_type -> ai_flow.WorkflowExecutionResponse
	6,  // 40: ai_flow.SchedulingService.listWorkflowExecutions:output_type -> ai_flow.ListWorkflowExecutionResponse
	7,  // 41: ai_flow.SchedulingService.startJob:output_type -> ai_flow.JobInfoResponse
	7,  // 42: ai_flow.SchedulingService.stopJob:output_type -> ai_flow.JobInfoResponse
	7,  // 43: ai_flow.SchedulingService.restartJob:output_type -> ai_flow.JobInfoResponse
	7,  // 44: ai_flow.SchedulingService.getJob:output_type -> ai_flow.JobInfoResponse
	8,  // 45: ai_flow.SchedulingService.listJobs:output_type -> ai_flow.ListJobInfoResponse
	30, // [30:46] is the sub-list for method output_type
	14, // [14:30] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_scheduling_service_proto_init() }
func file_scheduling_service_proto_init() {
	if File_scheduling_service_proto != nil {
		return
	}
	file_message_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_scheduling_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScheduleWorkflowRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scheduling_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkflowExecutionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scheduling_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScheduleJobRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scheduling_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkflowInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scheduling_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListWorkflowInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scheduling_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkflowExecutionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scheduling_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListWorkflowExecutionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scheduling_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scheduling_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListJobInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_scheduling_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_scheduling_service_proto_goTypes,
		DependencyIndexes: file_scheduling_service_proto_depIdxs,
		MessageInfos:      file_scheduling_service_proto_msgTypes,
	}.Build()
	File_scheduling_service_proto = out.File
	file_scheduling_service_proto_rawDesc = nil
	file_scheduling_service_proto_goTypes = nil
	file_scheduling_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// SchedulingServiceClient is the client API for SchedulingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SchedulingServiceClient interface {
	// workflow api
	SubmitWorkflow(ctx context.Context, in *ScheduleWorkflowRequest, opts ...grpc.CallOption) (*WorkflowInfoResponse, error)
	DeleteWorkflow(ctx context.Context, in *ScheduleWorkflowRequest, opts ...grpc.CallOption) (*WorkflowInfoResponse, error)
	PauseWorkflowScheduling(ctx context.Context, in *ScheduleWorkflowRequest, opts ...grpc.CallOption) (*WorkflowInfoResponse, error)
	ResumeWorkflowScheduling(ctx context.Context, in *ScheduleWorkflowRequest, opts ...grpc.CallOption) (*WorkflowInfoResponse, error)
	GetWorkflow(ctx context.Context, in *ScheduleWorkflowRequest, opts ...grpc.CallOption) (*WorkflowInfoResponse, error)
	ListWorkflows(ctx context.Context, in *ScheduleWorkflowRequest, opts ...grpc.CallOption) (*ListWorkflowInfoResponse, error)
	// workflow execution api
	StartNewWorkflowExecution(ctx context.Context, in *WorkflowExecutionRequest, opts ...grpc.CallOption) (*WorkflowExecutionResponse, error)
	KillAllWorkflowExecutions(ctx context.Context, in *WorkflowExecutionRequest, opts ...grpc.CallOption) (*ListWorkflowExecutionResponse, error)
	KillWorkflowExecution(ctx context.Context, in *WorkflowExecutionRequest, opts ...grpc.CallOption) (*WorkflowExecutionResponse, error)
	GetWorkflowExecution(ctx context.Context, in *WorkflowExecutionRequest, opts ...grpc.CallOption) (*WorkflowExecutionResponse, error)
	ListWorkflowExecutions(ctx context.Context, in *WorkflowExecutionRequest, opts ...grpc.CallOption) (*ListWorkflowExecutionResponse, error)
	// job api
	StartJob(ctx context.Context, in *ScheduleJobRequest, opts ...grpc.CallOption) (*JobInfoResponse, error)
	StopJob(ctx context.Context, in *ScheduleJobRequest, opts ...grpc.CallOption) (*JobInfoResponse, error)
	RestartJob(ctx context.Context, in *ScheduleJobRequest, opts ...grpc.CallOption) (*JobInfoResponse, error)
	GetJob(ctx context.Context, in *ScheduleJobRequest, opts ...grpc.CallOption) (*JobInfoResponse, error)
	ListJobs(ctx context.Context, in *ScheduleJobRequest, opts ...grpc.CallOption) (*ListJobInfoResponse, error)
}

type schedulingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSchedulingServiceClient(cc grpc.ClientConnInterface) SchedulingServiceClient {
	return &schedulingServiceClient{cc}
}

func (c *schedulingServiceClient) SubmitWorkflow(ctx context.Context, in *ScheduleWorkflowRequest, opts ...grpc.CallOption) (*WorkflowInfoResponse, error) {
	out := new(WorkflowInfoResponse)
	err := c.cc.Invoke(ctx, "/ai_flow.SchedulingService/submitWorkflow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulingServiceClient) DeleteWorkflow(ctx context.Context, in *ScheduleWorkflowRequest, opts ...grpc.CallOption) (*WorkflowInfoResponse, error) {
	out := new(WorkflowInfoResponse)
	err := c.cc.Invoke(ctx, "/ai_flow.SchedulingService/deleteWorkflow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulingServiceClient) PauseWorkflowScheduling(ctx context.Context, in *ScheduleWorkflowRequest, opts ...grpc.CallOption) (*WorkflowInfoResponse, error) {
	out := new(WorkflowInfoResponse)
	err := c.cc.Invoke(ctx, "/ai_flow.SchedulingService/pauseWorkflowScheduling", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulingServiceClient) ResumeWorkflowScheduling(ctx context.Context, in *ScheduleWorkflowRequest, opts ...grpc.CallOption) (*WorkflowInfoResponse, error) {
	out := new(WorkflowInfoResponse)
	err := c.cc.Invoke(ctx, "/ai_flow.SchedulingService/resumeWorkflowScheduling", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulingServiceClient) GetWorkflow(ctx context.Context, in *ScheduleWorkflowRequest, opts ...grpc.CallOption) (*WorkflowInfoResponse, error) {
	out := new(WorkflowInfoResponse)
	err := c.cc.Invoke(ctx, "/ai_flow.SchedulingService/getWorkflow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulingServiceClient) ListWorkflows(ctx context.Context, in *ScheduleWorkflowRequest, opts ...grpc.CallOption) (*ListWorkflowInfoResponse, error) {
	out := new(ListWorkflowInfoResponse)
	err := c.cc.Invoke(ctx, "/ai_flow.SchedulingService/listWorkflows", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulingServiceClient) StartNewWorkflowExecution(ctx context.Context, in *WorkflowExecutionRequest, opts ...grpc.CallOption) (*WorkflowExecutionResponse, error) {
	out := new(WorkflowExecutionResponse)
	err := c.cc.Invoke(ctx, "/ai_flow.SchedulingService/startNewWorkflowExecution", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulingServiceClient) KillAllWorkflowExecutions(ctx context.Context, in *WorkflowExecutionRequest, opts ...grpc.CallOption) (*ListWorkflowExecutionResponse, error) {
	out := new(ListWorkflowExecutionResponse)
	err := c.cc.Invoke(ctx, "/ai_flow.SchedulingService/killAllWorkflowExecutions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulingServiceClient) KillWorkflowExecution(ctx context.Context, in *WorkflowExecutionRequest, opts ...grpc.CallOption) (*WorkflowExecutionResponse, error) {
	out := new(WorkflowExecutionResponse)
	err := c.cc.Invoke(ctx, "/ai_flow.SchedulingService/killWorkflowExecution", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulingServiceClient) GetWorkflowExecution(ctx context.Context, in *WorkflowExecutionRequest, opts ...grpc.CallOption) (*WorkflowExecutionResponse, error) {
	out := new(WorkflowExecutionResponse)
	err := c.cc.Invoke(ctx, "/ai_flow.SchedulingService/getWorkflowExecution", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulingServiceClient) ListWorkflowExecutions(ctx context.Context, in *WorkflowExecutionRequest, opts ...grpc.CallOption) (*ListWorkflowExecutionResponse, error) {
	out := new(ListWorkflowExecutionResponse)
	err := c.cc.Invoke(ctx, "/ai_flow.SchedulingService/listWorkflowExecutions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulingServiceClient) StartJob(ctx context.Context, in *ScheduleJobRequest, opts ...grpc.CallOption) (*JobInfoResponse, error) {
	out := new(JobInfoResponse)
	err := c.cc.Invoke(ctx, "/ai_flow.SchedulingService/startJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulingServiceClient) StopJob(ctx context.Context, in *ScheduleJobRequest, opts ...grpc.CallOption) (*JobInfoResponse, error) {
	out := new(JobInfoResponse)
	err := c.cc.Invoke(ctx, "/ai_flow.SchedulingService/stopJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulingServiceClient) RestartJob(ctx context.Context, in *ScheduleJobRequest, opts ...grpc.CallOption) (*JobInfoResponse, error) {
	out := new(JobInfoResponse)
	err := c.cc.Invoke(ctx, "/ai_flow.SchedulingService/restartJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulingServiceClient) GetJob(ctx context.Context, in *ScheduleJobRequest, opts ...grpc.CallOption) (*JobInfoResponse, error) {
	out := new(JobInfoResponse)
	err := c.cc.Invoke(ctx, "/ai_flow.SchedulingService/getJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulingServiceClient) ListJobs(ctx context.Context, in *ScheduleJobRequest, opts ...grpc.CallOption) (*ListJobInfoResponse, error) {
	out := new(ListJobInfoResponse)
	err := c.cc.Invoke(ctx, "/ai_flow.SchedulingService/listJobs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SchedulingServiceServer is the server API for SchedulingService service.
type SchedulingServiceServer interface {
	// workflow api
	SubmitWorkflow(context.Context, *ScheduleWorkflowRequest) (*WorkflowInfoResponse, error)
	DeleteWorkflow(context.Context, *ScheduleWorkflowRequest) (*WorkflowInfoResponse, error)
	PauseWorkflowScheduling(context.Context, *ScheduleWorkflowRequest) (*WorkflowInfoResponse, error)
	ResumeWorkflowScheduling(context.Context, *ScheduleWorkflowRequest) (*WorkflowInfoResponse, error)
	GetWorkflow(context.Context, *ScheduleWorkflowRequest) (*WorkflowInfoResponse, error)
	ListWorkflows(context.Context, *ScheduleWorkflowRequest) (*ListWorkflowInfoResponse, error)
	// workflow execution api
	StartNewWorkflowExecution(context.Context, *WorkflowExecutionRequest) (*WorkflowExecutionResponse, error)
	KillAllWorkflowExecutions(context.Context, *WorkflowExecutionRequest) (*ListWorkflowExecutionResponse, error)
	KillWorkflowExecution(context.Context, *WorkflowExecutionRequest) (*WorkflowExecutionResponse, error)
	GetWorkflowExecution(context.Context, *WorkflowExecutionRequest) (*WorkflowExecutionResponse, error)
	ListWorkflowExecutions(context.Context, *WorkflowExecutionRequest) (*ListWorkflowExecutionResponse, error)
	// job api
	StartJob(context.Context, *ScheduleJobRequest) (*JobInfoResponse, error)
	StopJob(context.Context, *ScheduleJobRequest) (*JobInfoResponse, error)
	RestartJob(context.Context, *ScheduleJobRequest) (*JobInfoResponse, error)
	GetJob(context.Context, *ScheduleJobRequest) (*JobInfoResponse, error)
	ListJobs(context.Context, *ScheduleJobRequest) (*ListJobInfoResponse, error)
}

// UnimplementedSchedulingServiceServer can be embedded to have forward compatible implementations.
type UnimplementedSchedulingServiceServer struct {
}

func (*UnimplementedSchedulingServiceServer) SubmitWorkflow(context.Context, *ScheduleWorkflowRequest) (*WorkflowInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitWorkflow not implemented")
}
func (*UnimplementedSchedulingServiceServer) DeleteWorkflow(context.Context, *ScheduleWorkflowRequest) (*WorkflowInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWorkflow not implemented")
}
func (*UnimplementedSchedulingServiceServer) PauseWorkflowScheduling(context.Context, *ScheduleWorkflowRequest) (*WorkflowInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PauseWorkflowScheduling not implemented")
}
func (*UnimplementedSchedulingServiceServer) ResumeWorkflowScheduling(context.Context, *ScheduleWorkflowRequest) (*WorkflowInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResumeWorkflowScheduling not implemented")
}
func (*UnimplementedSchedulingServiceServer) GetWorkflow(context.Context, *ScheduleWorkflowRequest) (*WorkflowInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkflow not implemented")
}
func (*UnimplementedSchedulingServiceServer) ListWorkflows(context.Context, *ScheduleWorkflowRequest) (*ListWorkflowInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWorkflows not implemented")
}
func (*UnimplementedSchedulingServiceServer) StartNewWorkflowExecution(context.Context, *WorkflowExecutionRequest) (*WorkflowExecutionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartNewWorkflowExecution not implemented")
}
func (*UnimplementedSchedulingServiceServer) KillAllWorkflowExecutions(context.Context, *WorkflowExecutionRequest) (*ListWorkflowExecutionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KillAllWorkflowExecutions not implemented")
}
func (*UnimplementedSchedulingServiceServer) KillWorkflowExecution(context.Context, *WorkflowExecutionRequest) (*WorkflowExecutionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KillWorkflowExecution not implemented")
}
func (*UnimplementedSchedulingServiceServer) GetWorkflowExecution(context.Context, *WorkflowExecutionRequest) (*WorkflowExecutionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkflowExecution not implemented")
}
func (*UnimplementedSchedulingServiceServer) ListWorkflowExecutions(context.Context, *WorkflowExecutionRequest) (*ListWorkflowExecutionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWorkflowExecutions not implemented")
}
func (*UnimplementedSchedulingServiceServer) StartJob(context.Context, *ScheduleJobRequest) (*JobInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartJob not implemented")
}
func (*UnimplementedSchedulingServiceServer) StopJob(context.Context, *ScheduleJobRequest) (*JobInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopJob not implemented")
}
func (*UnimplementedSchedulingServiceServer) RestartJob(context.Context, *ScheduleJobRequest) (*JobInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestartJob not implemented")
}
func (*UnimplementedSchedulingServiceServer) GetJob(context.Context, *ScheduleJobRequest) (*JobInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJob not implemented")
}
func (*UnimplementedSchedulingServiceServer) ListJobs(context.Context, *ScheduleJobRequest) (*ListJobInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListJobs not implemented")
}

func RegisterSchedulingServiceServer(s *grpc.Server, srv SchedulingServiceServer) {
	s.RegisterService(&_SchedulingService_serviceDesc, srv)
}

func _SchedulingService_SubmitWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScheduleWorkflowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulingServiceServer).SubmitWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai_flow.SchedulingService/SubmitWorkflow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulingServiceServer).SubmitWorkflow(ctx, req.(*ScheduleWorkflowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchedulingService_DeleteWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScheduleWorkflowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulingServiceServer).DeleteWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai_flow.SchedulingService/DeleteWorkflow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulingServiceServer).DeleteWorkflow(ctx, req.(*ScheduleWorkflowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchedulingService_PauseWorkflowScheduling_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScheduleWorkflowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulingServiceServer).PauseWorkflowScheduling(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai_flow.SchedulingService/PauseWorkflowScheduling",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulingServiceServer).PauseWorkflowScheduling(ctx, req.(*ScheduleWorkflowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchedulingService_ResumeWorkflowScheduling_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScheduleWorkflowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulingServiceServer).ResumeWorkflowScheduling(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai_flow.SchedulingService/ResumeWorkflowScheduling",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulingServiceServer).ResumeWorkflowScheduling(ctx, req.(*ScheduleWorkflowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchedulingService_GetWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScheduleWorkflowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulingServiceServer).GetWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai_flow.SchedulingService/GetWorkflow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulingServiceServer).GetWorkflow(ctx, req.(*ScheduleWorkflowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchedulingService_ListWorkflows_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScheduleWorkflowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulingServiceServer).ListWorkflows(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai_flow.SchedulingService/ListWorkflows",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulingServiceServer).ListWorkflows(ctx, req.(*ScheduleWorkflowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchedulingService_StartNewWorkflowExecution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkflowExecutionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulingServiceServer).StartNewWorkflowExecution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai_flow.SchedulingService/StartNewWorkflowExecution",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulingServiceServer).StartNewWorkflowExecution(ctx, req.(*WorkflowExecutionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchedulingService_KillAllWorkflowExecutions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkflowExecutionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulingServiceServer).KillAllWorkflowExecutions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai_flow.SchedulingService/KillAllWorkflowExecutions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulingServiceServer).KillAllWorkflowExecutions(ctx, req.(*WorkflowExecutionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchedulingService_KillWorkflowExecution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkflowExecutionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulingServiceServer).KillWorkflowExecution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai_flow.SchedulingService/KillWorkflowExecution",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulingServiceServer).KillWorkflowExecution(ctx, req.(*WorkflowExecutionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchedulingService_GetWorkflowExecution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkflowExecutionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulingServiceServer).GetWorkflowExecution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai_flow.SchedulingService/GetWorkflowExecution",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulingServiceServer).GetWorkflowExecution(ctx, req.(*WorkflowExecutionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchedulingService_ListWorkflowExecutions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkflowExecutionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulingServiceServer).ListWorkflowExecutions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai_flow.SchedulingService/ListWorkflowExecutions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulingServiceServer).ListWorkflowExecutions(ctx, req.(*WorkflowExecutionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchedulingService_StartJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScheduleJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulingServiceServer).StartJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai_flow.SchedulingService/StartJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulingServiceServer).StartJob(ctx, req.(*ScheduleJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchedulingService_StopJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScheduleJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulingServiceServer).StopJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai_flow.SchedulingService/StopJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulingServiceServer).StopJob(ctx, req.(*ScheduleJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchedulingService_RestartJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScheduleJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulingServiceServer).RestartJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai_flow.SchedulingService/RestartJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulingServiceServer).RestartJob(ctx, req.(*ScheduleJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchedulingService_GetJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScheduleJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulingServiceServer).GetJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai_flow.SchedulingService/GetJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulingServiceServer).GetJob(ctx, req.(*ScheduleJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchedulingService_ListJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScheduleJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulingServiceServer).ListJobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai_flow.SchedulingService/ListJobs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulingServiceServer).ListJobs(ctx, req.(*ScheduleJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SchedulingService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ai_flow.SchedulingService",
	HandlerType: (*SchedulingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "submitWorkflow",
			Handler:    _SchedulingService_SubmitWorkflow_Handler,
		},
		{
			MethodName: "deleteWorkflow",
			Handler:    _SchedulingService_DeleteWorkflow_Handler,
		},
		{
			MethodName: "pauseWorkflowScheduling",
			Handler:    _SchedulingService_PauseWorkflowScheduling_Handler,
		},
		{
			MethodName: "resumeWorkflowScheduling",
			Handler:    _SchedulingService_ResumeWorkflowScheduling_Handler,
		},
		{
			MethodName: "getWorkflow",
			Handler:    _SchedulingService_GetWorkflow_Handler,
		},
		{
			MethodName: "listWorkflows",
			Handler:    _SchedulingService_ListWorkflows_Handler,
		},
		{
			MethodName: "startNewWorkflowExecution",
			Handler:    _SchedulingService_StartNewWorkflowExecution_Handler,
		},
		{
			MethodName: "killAllWorkflowExecutions",
			Handler:    _SchedulingService_KillAllWorkflowExecutions_Handler,
		},
		{
			MethodName: "killWorkflowExecution",
			Handler:    _SchedulingService_KillWorkflowExecution_Handler,
		},
		{
			MethodName: "getWorkflowExecution",
			Handler:    _SchedulingService_GetWorkflowExecution_Handler,
		},
		{
			MethodName: "listWorkflowExecutions",
			Handler:    _SchedulingService_ListWorkflowExecutions_Handler,
		},
		{
			MethodName: "startJob",
			Handler:    _SchedulingService_StartJob_Handler,
		},
		{
			MethodName: "stopJob",
			Handler:    _SchedulingService_StopJob_Handler,
		},
		{
			MethodName: "restartJob",
			Handler:    _SchedulingService_RestartJob_Handler,
		},
		{
			MethodName: "getJob",
			Handler:    _SchedulingService_GetJob_Handler,
		},
		{
			MethodName: "listJobs",
			Handler:    _SchedulingService_ListJobs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "scheduling_service.proto",
}

//
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.11.3
// source: metadata_service.proto

package ai_flow

import (
	context "context"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	//_ "github.com/grpc-ecosystem/grpc-gateway/third_party/googleapis/google/api"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type IdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *IdRequest) Reset() {
	*x = IdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metadata_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdRequest) ProtoMessage() {}

func (x *IdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_metadata_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdRequest.ProtoReflect.Descriptor instead.
func (*IdRequest) Descriptor() ([]byte, []int) {
	return file_metadata_service_proto_rawDescGZIP(), []int{0}
}

func (x *IdRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type NameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *NameRequest) Reset() {
	*x = NameRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metadata_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NameRequest) ProtoMessage() {}

func (x *NameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_metadata_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NameRequest.ProtoReflect.Descriptor instead.
func (*NameRequest) Descriptor() ([]byte, []int) {
	return file_metadata_service_proto_rawDescGZIP(), []int{1}
}

func (x *NameRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageSize int64 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	Offset   int64 `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (x *ListRequest) Reset() {
	*x = ListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metadata_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRequest) ProtoMessage() {}

func (x *ListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_metadata_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRequest.ProtoReflect.Descriptor instead.
func (*ListRequest) Descriptor() ([]byte, []int) {
	return file_metadata_service_proto_rawDescGZIP(), []int{2}
}

func (x *ListRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListRequest) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type MetaResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReturnCode string `protobuf:"bytes,1,opt,name=return_code,json=returnCode,proto3" json:"return_code,omitempty"`
	ReturnMsg  string `protobuf:"bytes,2,opt,name=return_msg,json=returnMsg,proto3" json:"return_msg,omitempty"`
	Data       string `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *MetaResponse) Reset() {
	*x = MetaResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metadata_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetaResponse) ProtoMessage() {}

func (x *MetaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_metadata_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetaResponse.ProtoReflect.Descriptor instead.
func (*MetaResponse) Descriptor() ([]byte, []int) {
	return file_metadata_service_proto_rawDescGZIP(), []int{3}
}

func (x *MetaResponse) GetReturnCode() string {
	if x != nil {
		return x.ReturnCode
	}
	return ""
}

func (x *MetaResponse) GetReturnMsg() string {
	if x != nil {
		return x.ReturnMsg
	}
	return ""
}

func (x *MetaResponse) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

//example
type RegisterExampleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Example *ExampleProto `protobuf:"bytes,1,opt,name=example,proto3" json:"example,omitempty"`
}

func (x *RegisterExampleRequest) Reset() {
	*x = RegisterExampleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metadata_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterExampleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterExampleRequest) ProtoMessage() {}

func (x *RegisterExampleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_metadata_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterExampleRequest.ProtoReflect.Descriptor instead.
func (*RegisterExampleRequest) Descriptor() ([]byte, []int) {
	return file_metadata_service_proto_rawDescGZIP(), []int{4}
}

func (x *RegisterExampleRequest) GetExample() *ExampleProto {
	if x != nil {
		return x.Example
	}
	return nil
}

type RegisterExamplesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Examples []*ExampleProto `protobuf:"bytes,1,rep,name=examples,proto3" json:"examples,omitempty"`
}

func (x *RegisterExamplesRequest) Reset() {
	*x = RegisterExamplesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metadata_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterExamplesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterExamplesRequest) ProtoMessage() {}

func (x *RegisterExamplesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_metadata_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterExamplesRequest.ProtoReflect.Descriptor instead.
func (*RegisterExamplesRequest) Descriptor() ([]byte, []int) {
	return file_metadata_service_proto_rawDescGZIP(), []int{5}
}

func (x *RegisterExamplesRequest) GetExamples() []*ExampleProto {
	if x != nil {
		return x.Examples
	}
	return nil
}

type ExampleListProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Examples []*ExampleProto `protobuf:"bytes,1,rep,name=examples,proto3" json:"examples,omitempty"`
}

func (x *ExampleListProto) Reset() {
	*x = ExampleListProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metadata_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExampleListProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExampleListProto) ProtoMessage() {}

func (x *ExampleListProto) ProtoReflect() protoreflect.Message {
	mi := &file_metadata_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExampleListProto.ProtoReflect.Descriptor instead.
func (*ExampleListProto) Descriptor() ([]byte, []int) {
	return file_metadata_service_proto_rawDescGZIP(), []int{6}
}

func (x *ExampleListProto) GetExamples() []*ExampleProto {
	if x != nil {
		return x.Examples
	}
	return nil
}

type UpdateExampleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                 string                  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Properties           map[string]string       `protobuf:"bytes,2,rep,name=properties,proto3" json:"properties,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	SupportType          ExampleSupportTypeProto `protobuf:"varint,3,opt,name=support_type,json=supportType,proto3,enum=ai_flow.ExampleSupportTypeProto" json:"support_type,omitempty"`
	NameList             []string                `protobuf:"bytes,4,rep,name=name_list,json=nameList,proto3" json:"name_list,omitempty"`
	TypeList             []DataTypeProto         `protobuf:"varint,5,rep,packed,name=type_list,json=typeList,proto3,enum=ai_flow.DataTypeProto" json:"type_list,omitempty"`
	DataType             *wrappers.StringValue   `protobuf:"bytes,6,opt,name=data_type,json=dataType,proto3" json:"data_type,omitempty"`
	DataFormat           *wrappers.StringValue   `protobuf:"bytes,7,opt,name=data_format,json=dataFormat,proto3" json:"data_format,omitempty"`
	BatchUri             *wrappers.StringValue   `protobuf:"bytes,8,opt,name=batch_uri,json=batchUri,proto3" json:"batch_uri,omitempty"`
	StreamUri            *wrappers.StringValue   `protobuf:"bytes,9,opt,name=stream_uri,json=streamUri,proto3" json:"stream_uri,omitempty"`
	Description          *wrappers.StringValue   `protobuf:"bytes,10,opt,name=description,proto3" json:"description,omitempty"`
	UpdateTime           *wrappers.Int64Value    `protobuf:"bytes,11,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	CatalogName          *wrappers.StringValue   `protobuf:"bytes,12,opt,name=catalog_name,json=catalogName,proto3" json:"catalog_name,omitempty"`
	CatalogType          *wrappers.StringValue   `protobuf:"bytes,13,opt,name=catalog_type,json=catalogType,proto3" json:"catalog_type,omitempty"`
	CatalogDatabase      *wrappers.StringValue   `protobuf:"bytes,14,opt,name=catalog_database,json=catalogDatabase,proto3" json:"catalog_database,omitempty"`
	CatalogConnectionUri *wrappers.StringValue   `protobuf:"bytes,15,opt,name=catalog_connection_uri,json=catalogConnectionUri,proto3" json:"catalog_connection_uri,omitempty"`
	CatalogVersion       *wrappers.StringValue   `protobuf:"bytes,16,opt,name=catalog_version,json=catalogVersion,proto3" json:"catalog_version,omitempty"`
	CatalogTable         *wrappers.StringValue   `protobuf:"bytes,17,opt,name=catalog_table,json=catalogTable,proto3" json:"catalog_table,omitempty"`
}

func (x *UpdateExampleRequest) Reset() {
	*x = UpdateExampleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metadata_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateExampleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateExampleRequest) ProtoMessage() {}

func (x *UpdateExampleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_metadata_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateExampleRequest.ProtoReflect.Descriptor instead.
func (*UpdateExampleRequest) Descriptor() ([]byte, []int) {
	return file_metadata_service_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateExampleRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateExampleRequest) GetProperties() map[string]string {
	if x != nil {
		return x.Properties
	}
	return nil
}

func (x *UpdateExampleRequest) GetSupportType() ExampleSupportTypeProto {
	if x != nil {
		return x.SupportType
	}
	return ExampleSupportTypeProto_EXAMPLE_SUPPORT_TYPE_UNSPECIFIED
}

func (x *UpdateExampleRequest) GetNameList() []string {
	if x != nil {
		return x.NameList
	}
	return nil
}

func (x *UpdateExampleRequest) GetTypeList() []DataTypeProto {
	if x != nil {
		return x.TypeList
	}
	return nil
}

func (x *UpdateExampleRequest) GetDataType() *wrappers.StringValue {
	if x != nil {
		return x.DataType
	}
	return nil
}

func (x *UpdateExampleRequest) GetDataFormat() *wrappers.StringValue {
	if x != nil {
		return x.DataFormat
	}
	return nil
}

func (x *UpdateExampleRequest) GetBatchUri() *wrappers.StringValue {
	if x != nil {
		return x.BatchUri
	}
	return nil
}

func (x *UpdateExampleRequest) GetStreamUri() *wrappers.StringValue {
	if x != nil {
		return x.StreamUri
	}
	return nil
}

func (x *UpdateExampleRequest) GetDescription() *wrappers.StringValue {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *UpdateExampleRequest) GetUpdateTime() *wrappers.Int64Value {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *UpdateExampleRequest) GetCatalogName() *wrappers.StringValue {
	if x != nil {
		return x.CatalogName
	}
	return nil
}

func (x *UpdateExampleRequest) GetCatalogType() *wrappers.StringValue {
	if x != nil {
		return x.CatalogType
	}
	return nil
}

func (x *UpdateExampleRequest) GetCatalogDatabase() *wrappers.StringValue {
	if x != nil {
		return x.CatalogDatabase
	}
	return nil
}

func (x *UpdateExampleRequest) GetCatalogConnectionUri() *wrappers.StringValue {
	if x != nil {
		return x.CatalogConnectionUri
	}
	return nil
}

func (x *UpdateExampleRequest) GetCatalogVersion() *wrappers.StringValue {
	if x != nil {
		return x.CatalogVersion
	}
	return nil
}

func (x *UpdateExampleRequest) GetCatalogTable() *wrappers.StringValue {
	if x != nil {
		return x.CatalogTable
	}
	return nil
}

//model
type RegisterModelRelationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModelRelation *ModelRelationProto `protobuf:"bytes,1,opt,name=model_relation,json=modelRelation,proto3" json:"model_relation,omitempty"`
}

func (x *RegisterModelRelationRequest) Reset() {
	*x = RegisterModelRelationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metadata_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterModelRelationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterModelRelationRequest) ProtoMessage() {}

func (x *RegisterModelRelationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_metadata_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterModelRelationRequest.ProtoReflect.Descriptor instead.
func (*RegisterModelRelationRequest) Descriptor() ([]byte, []int) {
	return file_metadata_service_proto_rawDescGZIP(), []int{8}
}

func (x *RegisterModelRelationRequest) GetModelRelation() *ModelRelationProto {
	if x != nil {
		return x.ModelRelation
	}
	return nil
}

type RegisterModelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Model *ModelProto `protobuf:"bytes,1,opt,name=model,proto3" json:"model,omitempty"`
}

func (x *RegisterModelRequest) Reset() {
	*x = RegisterModelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metadata_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterModelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterModelRequest) ProtoMessage() {}

func (x *RegisterModelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_metadata_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterModelRequest.ProtoReflect.Descriptor instead.
func (*RegisterModelRequest) Descriptor() ([]byte, []int) {
	return file_metadata_service_proto_rawDescGZIP(), []int{9}
}

func (x *RegisterModelRequest) GetModel() *ModelProto {
	if x != nil {
		return x.Model
	}
	return nil
}

type ModelRelationListProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModelRelations []*ModelRelationProto `protobuf:"bytes,1,rep,name=model_relations,json=modelRelations,proto3" json:"model_relations,omitempty"`
}

func (x *ModelRelationListProto) Reset() {
	*x = ModelRelationListProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metadata_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModelRelationListProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelRelationListProto) ProtoMessage() {}

func (x *ModelRelationListProto) ProtoReflect() protoreflect.Message {
	mi := &file_metadata_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelRelationListProto.ProtoReflect.Descriptor instead.
func (*ModelRelationListProto) Descriptor() ([]byte, []int) {
	return file_metadata_service_proto_rawDescGZIP(), []int{10}
}

func (x *ModelRelationListProto) GetModelRelations() []*ModelRelationProto {
	if x != nil {
		return x.ModelRelations
	}
	return nil
}

//model version
type ModelVersionNameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ModelId int64  `protobuf:"varint,2,opt,name=model_id,json=modelId,proto3" json:"model_id,omitempty"`
}

func (x *ModelVersionNameRequest) Reset() {
	*x = ModelVersionNameRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metadata_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModelVersionNameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelVersionNameRequest) ProtoMessage() {}

func (x *ModelVersionNameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_metadata_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelVersionNameRequest.ProtoReflect.Descriptor instead.
func (*ModelVersionNameRequest) Descriptor() ([]byte, []int) {
	return file_metadata_service_proto_rawDescGZIP(), []int{11}
}

func (x *ModelVersionNameRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ModelVersionNameRequest) GetModelId() int64 {
	if x != nil {
		return x.ModelId
	}
	return 0
}

type RegisterModelVersionRelationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModelVersionRelation *ModelVersionRelationProto `protobuf:"bytes,1,opt,name=model_version_relation,json=modelVersionRelation,proto3" json:"model_version_relation,omitempty"`
}

func (x *RegisterModelVersionRelationRequest) Reset() {
	*x = RegisterModelVersionRelationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metadata_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterModelVersionRelationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterModelVersionRelationRequest) ProtoMessage() {}

func (x *RegisterModelVersionRelationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_metadata_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterModelVersionRelationRequest.ProtoReflect.Descriptor instead.
func (*RegisterModelVersionRelationRequest) Descriptor() ([]byte, []int) {
	return file_metadata_service_proto_rawDescGZIP(), []int{12}
}

func (x *RegisterModelVersionRelationRequest) GetModelVersionRelation() *ModelVersionRelationProto {
	if x != nil {
		return x.ModelVersionRelation
	}
	return nil
}

type RegisterModelVersionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModelVersion *ModelVersionProto `protobuf:"bytes,1,opt,name=model_version,json=modelVersion,proto3" json:"model_version,omitempty"`
}

func (x *RegisterModelVersionRequest) Reset() {
	*x = RegisterModelVersionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metadata_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterModelVersionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterModelVersionRequest) ProtoMessage() {}

func (x *RegisterModelVersionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_metadata_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterModelVersionRequest.ProtoReflect.Descriptor instead.
func (*RegisterModelVersionRequest) Descriptor() ([]byte, []int) {
	return file_metadata_service_proto_rawDescGZIP(), []int{13}
}

func (x *RegisterModelVersionRequest) GetModelVersion() *ModelVersionProto {
	if x != nil {
		return x.ModelVersion
	}
	return nil
}

type ListModelVersionRelationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModelId  int64 `protobuf:"varint,1,opt,name=model_id,json=modelId,proto3" json:"model_id,omitempty"`
	PageSize int64 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	Offset   int64 `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (x *ListModelVersionRelationRequest) Reset() {
	*x = ListModelVersionRelationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metadata_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListModelVersionRelationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListModelVersionRelationRequest) ProtoMessage() {}

func (x *ListModelVersionRelationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_metadata_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListModelVersionRelationRequest.ProtoReflect.Descriptor instead.
func (*ListModelVersionRelationRequest) Descriptor() ([]byte, []int) {
	return file_metadata_service_proto_rawDescGZIP(), []int{14}
}

func (x *ListModelVersionRelationRequest) GetModelId() int64 {
	if x != nil {
		return x.ModelId
	}
	return 0
}

func (x *ListModelVersionRelationRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListModelVersionRelationRequest) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type ModelVersionRelationListProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModelVersions []*ModelVersionRelationProto `protobuf:"bytes,1,rep,name=model_versions,json=modelVersions,proto3" json:"model_versions,omitempty"`
}

func (x *ModelVersionRelationListProto) Reset() {
	*x = ModelVersionRelationListProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metadata_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModelVersionRelationListProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelVersionRelationListProto) ProtoMessage() {}

func (x *ModelVersionRelationListProto) ProtoReflect() protoreflect.Message {
	mi := &file_metadata_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelVersionRelationListProto.ProtoReflect.Descriptor instead.
func (*ModelVersionRelationListProto) Descriptor() ([]byte, []int) {
	return file_metadata_service_proto_rawDescGZIP(), []int{15}
}

func (x *ModelVersionRelationListProto) GetModelVersions() []*ModelVersionRelationProto {
	if x != nil {
		return x.ModelVersions
	}
	return nil
}

type ModelVersionListProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModelVersions []*ModelVersionProto `protobuf:"bytes,1,rep,name=model_versions,json=modelVersions,proto3" json:"model_versions,omitempty"`
}

func (x *ModelVersionListProto) Reset() {
	*x = ModelVersionListProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metadata_service_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModelVersionListProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelVersionListProto) ProtoMessage() {}

func (x *ModelVersionListProto) ProtoReflect() protoreflect.Message {
	mi := &file_metadata_service_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelVersionListProto.ProtoReflect.Descriptor instead.
func (*ModelVersionListProto) Descriptor() ([]byte, []int) {
	return file_metadata_service_proto_rawDescGZIP(), []int{16}
}

func (x *ModelVersionListProto) GetModelVersions() []*ModelVersionProto {
	if x != nil {
		return x.ModelVersions
	}
	return nil
}

type ModelNameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *ModelNameRequest) Reset() {
	*x = ModelNameRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metadata_service_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModelNameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelNameRequest) ProtoMessage() {}

func (x *ModelNameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_metadata_service_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelNameRequest.ProtoReflect.Descriptor instead.
func (*ModelNameRequest) Descriptor() ([]byte, []int) {
	return file_metadata_service_proto_rawDescGZIP(), []int{17}
}

func (x *ModelNameRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

//job
type RegisterJobRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Job *JobProto `protobuf:"bytes,1,opt,name=job,proto3" json:"job,omitempty"`
}

func (x *RegisterJobRequest) Reset() {
	*x = RegisterJobRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metadata_service_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterJobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterJobRequest) ProtoMessage() {}

func (x *RegisterJobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_metadata_service_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterJobRequest.ProtoReflect.Descriptor instead.
func (*RegisterJobRequest) Descriptor() ([]byte, []int) {
	return file_metadata_service_proto_rawDescGZIP(), []int{18}
}

func (x *RegisterJobRequest) GetJob() *JobProto {
	if x != nil {
		return x.Job
	}
	return nil
}

type UpdateJobRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                string                `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	WorkflowExecutionId *wrappers.Int64Value  `protobuf:"bytes,2,opt,name=workflow_execution_id,json=workflowExecutionId,proto3" json:"workflow_execution_id,omitempty"`
	JobState            StateProto            `protobuf:"varint,3,opt,name=job_state,json=jobState,proto3,enum=ai_flow.StateProto" json:"job_state,omitempty"`
	Properties          map[string]string     `protobuf:"bytes,4,rep,name=properties,proto3" json:"properties,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	JobId               *wrappers.StringValue `protobuf:"bytes,5,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	EndTime             *wrappers.Int64Value  `protobuf:"bytes,6,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	LogUri              *wrappers.StringValue `protobuf:"bytes,7,opt,name=log_uri,json=logUri,proto3" json:"log_uri,omitempty"`
	Signature           *wrappers.StringValue `protobuf:"bytes,8,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *UpdateJobRequest) Reset() {
	*x = UpdateJobRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metadata_service_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateJobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateJobRequest) ProtoMessage() {}

func (x *UpdateJobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_metadata_service_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateJobRequest.ProtoReflect.Descriptor instead.
func (*UpdateJobRequest) Descriptor() ([]byte, []int) {
	return file_metadata_service_proto_rawDescGZIP(), []int{19}
}

func (x *UpdateJobRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateJobRequest) GetWorkflowExecutionId() *wrappers.Int64Value {
	if x != nil {
		return x.WorkflowExecutionId
	}
	return nil
}

func (x *UpdateJobRequest) GetJobState() StateProto {
	if x != nil {
		return x.JobState
	}
	return StateProto_STATE_UNSPECIFIED
}

func (x *UpdateJobRequest) GetProperties() map[string]string {
	if x != nil {
		return x.Properties
	}
	return nil
}

func (x *UpdateJobRequest) GetJobId() *wrappers.StringValue {
	if x != nil {
		return x.JobId
	}
	return nil
}

func (x *UpdateJobRequest) GetEndTime() *wrappers.Int64Value {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *UpdateJobRequest) GetLogUri() *wrappers.StringValue {
	if x != nil {
		return x.LogUri
	}
	return nil
}

func (x *UpdateJobRequest) GetSignature() *wrappers.StringValue {
	if x != nil {
		return x.Signature
	}
	return nil
}

type UpdateJobStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State StateProto `protobuf:"varint,1,opt,name=state,proto3,enum=ai_flow.StateProto" json:"state,omitempty"`
	Name  string     `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *UpdateJobStateRequest) Reset() {
	*x = UpdateJobStateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metadata_service_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateJobStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateJobStateRequest) ProtoMessage() {}

func (x *UpdateJobStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_metadata_service_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateJobStateRequest.ProtoReflect.Descriptor instead.
func (*UpdateJobStateRequest) Descriptor() ([]byte, []int) {
	return file_metadata_service_proto_rawDescGZIP(), []int{20}
}

func (x *UpdateJobStateRequest) GetState() StateProto {
	if x != nil {
		return x.State
	}
	return StateProto_STATE_UNSPECIFIED
}

func (x *UpdateJobStateRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type UpdateJobEndTimeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EndTime int64  `protobuf:"varint,1,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	Name    string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *UpdateJobEndTimeRequest) Reset() {
	*x = UpdateJobEndTimeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metadata_service_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateJobEndTimeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateJobEndTimeRequest) ProtoMessage() {}

func (x *UpdateJobEndTimeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_metadata_service_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateJobEndTimeRequest.ProtoReflect.Descriptor instead.
func (*UpdateJobEndTimeRequest) Descriptor() ([]byte, []int) {
	return file_metadata_service_proto_rawDescGZIP(), []int{21}
}

func (x *UpdateJobEndTimeRequest) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *UpdateJobEndTimeRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type JobListProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Jobs []*JobProto `protobuf:"bytes,1,rep,name=jobs,proto3" json:"jobs,omitempty"`
}

func (x *JobListProto) Reset() {
	*x = JobListProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metadata_service_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobListProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobListProto) ProtoMessage() {}

func (x *JobListProto) ProtoReflect() protoreflect.Message {
	mi := &file_metadata_service_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobListProto.ProtoReflect.Descriptor instead.
func (*JobListProto) Descriptor() ([]byte, []int) {
	return file_metadata_service_proto_rawDescGZIP(), []int{22}
}

func (x *JobListProto) GetJobs() []*JobProto {
	if x != nil {
		return x.Jobs
	}
	return nil
}

//workflow execution
type RegisterWorkFlowExecutionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkflowExecution *WorkflowExecutionProto `protobuf:"bytes,1,opt,name=workflow_execution,json=workflowExecution,proto3" json:"workflow_execution,omitempty"`
}

func (x *RegisterWorkFlowExecutionRequest) Reset() {
	*x = RegisterWorkFlowExecutionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metadata_service_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterWorkFlowExecutionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterWorkFlowExecutionRequest) ProtoMessage() {}

func (x *RegisterWorkFlowExecutionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_metadata_service_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterWorkFlowExecutionRequest.ProtoReflect.Descriptor instead.
func (*RegisterWorkFlowExecutionRequest) Descriptor() ([]byte, []int) {
	return file_metadata_service_proto_rawDescGZIP(), []int{23}
}

func (x *RegisterWorkFlowExecutionRequest) GetWorkflowExecution() *WorkflowExecutionProto {
	if x != nil {
		return x.WorkflowExecution
	}
	return nil
}

type UpdateWorkflowExecutionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name           string                `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ProjectId      *wrappers.Int64Value  `protobuf:"bytes,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	ExecutionState StateProto            `protobuf:"varint,4,opt,name=execution_state,json=executionState,proto3,enum=ai_flow.StateProto" json:"execution_state,omitempty"`
	Properties     map[string]string     `protobuf:"bytes,5,rep,name=properties,proto3" json:"properties,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	EndTime        *wrappers.Int64Value  `protobuf:"bytes,6,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	LogUri         *wrappers.StringValue `protobuf:"bytes,7,opt,name=log_uri,json=logUri,proto3" json:"log_uri,omitempty"`
	WorkflowJson   *wrappers.StringValue `protobuf:"bytes,8,opt,name=workflow_json,json=workflowJson,proto3" json:"workflow_json,omitempty"`
	Signature      *wrappers.StringValue `protobuf:"bytes,9,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *UpdateWorkflowExecutionRequest) Reset() {
	*x = UpdateWorkflowExecutionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metadata_service_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateWorkflowExecutionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateWorkflowExecutionRequest) ProtoMessage() {}

func (x *UpdateWorkflowExecutionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_metadata_service_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateWorkflowExecutionRequest.ProtoReflect.Descriptor instead.
func (*UpdateWorkflowExecutionRequest) Descriptor() ([]byte, []int) {
	return file_metadata_service_proto_rawDescGZIP(), []int{24}
}

func (x *UpdateWorkflowExecutionRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateWorkflowExecutionRequest) GetProjectId() *wrappers.Int64Value {
	if x != nil {
		return x.ProjectId
	}
	return nil
}

func (x *UpdateWorkflowExecutionRequest) GetExecutionState() StateProto {
	if x != nil {
		return x.ExecutionState
	}
	return StateProto_STATE_UNSPECIFIED
}

func (x *UpdateWorkflowExecutionRequest) GetProperties() map[string]string {
	if x != nil {
		return x.Properties
	}
	return nil
}

func (x *UpdateWorkflowExecutionRequest) GetEndTime() *wrappers.Int64Value {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *UpdateWorkflowExecutionRequest) GetLogUri() *wrappers.StringValue {
	if x != nil {
		return x.LogUri
	}
	return nil
}

func (x *UpdateWorkflowExecutionRequest) GetWorkflowJson() *wrappers.StringValue {
	if x != nil {
		return x.WorkflowJson
	}
	return nil
}

func (x *UpdateWorkflowExecutionRequest) GetSignature() *wrappers.StringValue {
	if x != nil {
		return x.Signature
	}
	return nil
}

type WorkFlowExecutionListProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkflowExecutions []*WorkflowExecutionProto `protobuf:"bytes,1,rep,name=workflow_executions,json=workflowExecutions,proto3" json:"workflow_executions,omitempty"`
}

func (x *WorkFlowExecutionListProto) Reset() {
	*x = WorkFlowExecutionListProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metadata_service_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkFlowExecutionListProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkFlowExecutionListProto) ProtoMessage() {}

func (x *WorkFlowExecutionListProto) ProtoReflect() protoreflect.Message {
	mi := &file_metadata_service_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkFlowExecutionListProto.ProtoReflect.Descriptor instead.
func (*WorkFlowExecutionListProto) Descriptor() ([]byte, []int) {
	return file_metadata_service_proto_rawDescGZIP(), []int{25}
}

func (x *WorkFlowExecutionListProto) GetWorkflowExecutions() []*WorkflowExecutionProto {
	if x != nil {
		return x.WorkflowExecutions
	}
	return nil
}

type UpdateWorkflowExecutionEndTimeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EndTime int64  `protobuf:"varint,1,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	Name    string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *UpdateWorkflowExecutionEndTimeRequest) Reset() {
	*x = UpdateWorkflowExecutionEndTimeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metadata_service_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateWorkflowExecutionEndTimeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateWorkflowExecutionEndTimeRequest) ProtoMessage() {}

func (x *UpdateWorkflowExecutionEndTimeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_metadata_service_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateWorkflowExecutionEndTimeRequest.ProtoReflect.Descriptor instead.
func (*UpdateWorkflowExecutionEndTimeRequest) Descriptor() ([]byte, []int) {
	return file_metadata_service_proto_rawDescGZIP(), []int{26}
}

func (x *UpdateWorkflowExecutionEndTimeRequest) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *UpdateWorkflowExecutionEndTimeRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type UpdateWorkflowExecutionStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State StateProto `protobuf:"varint,1,opt,name=state,proto3,enum=ai_flow.StateProto" json:"state,omitempty"`
	Name  string     `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *UpdateWorkflowExecutionStateRequest) Reset() {
	*x = UpdateWorkflowExecutionStateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metadata_service_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateWorkflowExecutionStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateWorkflowExecutionStateRequest) ProtoMessage() {}

func (x *UpdateWorkflowExecutionStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_metadata_service_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateWorkflowExecutionStateRequest.ProtoReflect.Descriptor instead.
func (*UpdateWorkflowExecutionStateRequest) Descriptor() ([]byte, []int) {
	return file_metadata_service_proto_rawDescGZIP(), []int{27}
}

func (x *UpdateWorkflowExecutionStateRequest) GetState() StateProto {
	if x != nil {
		return x.State
	}
	return StateProto_STATE_UNSPECIFIED
}

func (x *UpdateWorkflowExecutionStateRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

//project
type RegisterProjectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Project *ProjectProto `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
}

func (x *RegisterProjectRequest) Reset() {
	*x = RegisterProjectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metadata_service_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterProjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterProjectRequest) ProtoMessage() {}

func (x *RegisterProjectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_metadata_service_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterProjectRequest.ProtoReflect.Descriptor instead.
func (*RegisterProjectRequest) Descriptor() ([]byte, []int) {
	return file_metadata_service_proto_rawDescGZIP(), []int{28}
}

func (x *RegisterProjectRequest) GetProject() *ProjectProto {
	if x != nil {
		return x.Project
	}
	return nil
}

type UpdateProjectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string                `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Properties  map[string]string     `protobuf:"bytes,2,rep,name=properties,proto3" json:"properties,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ProjectType *wrappers.StringValue `protobuf:"bytes,3,opt,name=project_type,json=projectType,proto3" json:"project_type,omitempty"`
	Uri         *wrappers.StringValue `protobuf:"bytes,4,opt,name=uri,proto3" json:"uri,omitempty"`
	User        *wrappers.StringValue `protobuf:"bytes,5,opt,name=user,proto3" json:"user,omitempty"`
	Password    *wrappers.StringValue `protobuf:"bytes,6,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *UpdateProjectRequest) Reset() {
	*x = UpdateProjectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metadata_service_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateProjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProjectRequest) ProtoMessage() {}

func (x *UpdateProjectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_metadata_service_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProjectRequest.ProtoReflect.Descriptor instead.
func (*UpdateProjectRequest) Descriptor() ([]byte, []int) {
	return file_metadata_service_proto_rawDescGZIP(), []int{29}
}

func (x *UpdateProjectRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateProjectRequest) GetProperties() map[string]string {
	if x != nil {
		return x.Properties
	}
	return nil
}

func (x *UpdateProjectRequest) GetProjectType() *wrappers.StringValue {
	if x != nil {
		return x.ProjectType
	}
	return nil
}

func (x *UpdateProjectRequest) GetUri() *wrappers.StringValue {
	if x != nil {
		return x.Uri
	}
	return nil
}

func (x *UpdateProjectRequest) GetUser() *wrappers.StringValue {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *UpdateProjectRequest) GetPassword() *wrappers.StringValue {
	if x != nil {
		return x.Password
	}
	return nil
}

type ProjectListProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Projects []*ProjectProto `protobuf:"bytes,1,rep,name=projects,proto3" json:"projects,omitempty"`
}

func (x *ProjectListProto) Reset() {
	*x = ProjectListProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metadata_service_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProjectListProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectListProto) ProtoMessage() {}

func (x *ProjectListProto) ProtoReflect() protoreflect.Message {
	mi := &file_metadata_service_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectListProto.ProtoReflect.Descriptor instead.
func (*ProjectListProto) Descriptor() ([]byte, []int) {
	return file_metadata_service_proto_rawDescGZIP(), []int{30}
}

func (x *ProjectListProto) GetProjects() []*ProjectProto {
	if x != nil {
		return x.Projects
	}
	return nil
}

//artifact
type RegisterArtifactRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Artifact *ArtifactProto `protobuf:"bytes,1,opt,name=artifact,proto3" json:"artifact,omitempty"`
}

func (x *RegisterArtifactRequest) Reset() {
	*x = RegisterArtifactRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metadata_service_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterArtifactRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterArtifactRequest) ProtoMessage() {}

func (x *RegisterArtifactRequest) ProtoReflect() protoreflect.Message {
	mi := &file_metadata_service_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterArtifactRequest.ProtoReflect.Descriptor instead.
func (*RegisterArtifactRequest) Descriptor() ([]byte, []int) {
	return file_metadata_service_proto_rawDescGZIP(), []int{31}
}

func (x *RegisterArtifactRequest) GetArtifact() *ArtifactProto {
	if x != nil {
		return x.Artifact
	}
	return nil
}

type UpdateArtifactRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string                `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Properties  map[string]string     `protobuf:"bytes,2,rep,name=properties,proto3" json:"properties,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	DataFormat  *wrappers.StringValue `protobuf:"bytes,3,opt,name=data_format,json=dataFormat,proto3" json:"data_format,omitempty"`
	BatchUri    *wrappers.StringValue `protobuf:"bytes,4,opt,name=batch_uri,json=batchUri,proto3" json:"batch_uri,omitempty"`
	StreamUri   *wrappers.StringValue `protobuf:"bytes,5,opt,name=stream_uri,json=streamUri,proto3" json:"stream_uri,omitempty"`
	Description *wrappers.StringValue `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	UpdateTime  *wrappers.Int64Value  `protobuf:"bytes,7,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
}

func (x *UpdateArtifactRequest) Reset() {
	*x = UpdateArtifactRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metadata_service_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateArtifactRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateArtifactRequest) ProtoMessage() {}

func (x *UpdateArtifactRequest) ProtoReflect() protoreflect.Message {
	mi := &file_metadata_service_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateArtifactRequest.ProtoReflect.Descriptor instead.
func (*UpdateArtifactRequest) Descriptor() ([]byte, []int) {
	return file_metadata_service_proto_rawDescGZIP(), []int{32}
}

func (x *UpdateArtifactRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateArtifactRequest) GetProperties() map[string]string {
	if x != nil {
		return x.Properties
	}
	return nil
}

func (x *UpdateArtifactRequest) GetDataFormat() *wrappers.StringValue {
	if x != nil {
		return x.DataFormat
	}
	return nil
}

func (x *UpdateArtifactRequest) GetBatchUri() *wrappers.StringValue {
	if x != nil {
		return x.BatchUri
	}
	return nil
}

func (x *UpdateArtifactRequest) GetStreamUri() *wrappers.StringValue {
	if x != nil {
		return x.StreamUri
	}
	return nil
}

func (x *UpdateArtifactRequest) GetDescription() *wrappers.StringValue {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *UpdateArtifactRequest) GetUpdateTime() *wrappers.Int64Value {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

type ArtifactListProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Artifacts []*ArtifactProto `protobuf:"bytes,1,rep,name=artifacts,proto3" json:"artifacts,omitempty"`
}

func (x *ArtifactListProto) Reset() {
	*x = ArtifactListProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metadata_service_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArtifactListProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArtifactListProto) ProtoMessage() {}

func (x *ArtifactListProto) ProtoReflect() protoreflect.Message {
	mi := &file_metadata_service_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArtifactListProto.ProtoReflect.Descriptor instead.
func (*ArtifactListProto) Descriptor() ([]byte, []int) {
	return file_metadata_service_proto_rawDescGZIP(), []int{33}
}

func (x *ArtifactListProto) GetArtifacts() []*ArtifactProto {
	if x != nil {
		return x.Artifacts
	}
	return nil
}

var File_metadata_service_proto protoreflect.FileDescriptor

var file_metadata_service_proto_rawDesc = []byte{
	0x0a, 0x16, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f,
	0x77, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x0d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x1b,
	0x0a, 0x09, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x21, 0x0a, 0x0b, 0x4e,
	0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x42,
	0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x22, 0x62, 0x0a, 0x0c, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x6d, 0x73,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x4d,
	0x73, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x49, 0x0a, 0x16, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x2f, 0x0a, 0x07, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x45, 0x78, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x07, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x22, 0x4c, 0x0a, 0x17, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x45, 0x78, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x08,
	0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x08, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x22,
	0x45, 0x0a, 0x10, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x31, 0x0a, 0x08, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e,
	0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x08, 0x65, 0x78,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x22, 0xe8, 0x08, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x4d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f,
	0x77, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69,
	0x65, 0x73, 0x12, 0x43, 0x0a, 0x0c, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c,
	0x6f, 0x77, 0x2e, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0b, 0x73, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x61, 0x6d, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f,
	0x77, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52,
	0x08, 0x74, 0x79, 0x70, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x09, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x3d, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x12, 0x39, 0x0a, 0x09, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x75, 0x72, 0x69,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x62, 0x61, 0x74, 0x63, 0x68, 0x55, 0x72, 0x69, 0x12, 0x3b,
	0x0a, 0x0a, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x09, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x55, 0x72, 0x69, 0x12, 0x3e, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x0b, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x0c, 0x63, 0x61, 0x74,
	0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x63,
	0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x0c, 0x63, 0x61,
	0x74, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b,
	0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x47, 0x0a, 0x10, 0x63,
	0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x44, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x16, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x5f,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x14, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x72, 0x69, 0x12, 0x45, 0x0a, 0x0f, 0x63, 0x61, 0x74, 0x61,
	0x6c, 0x6f, 0x67, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0e, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x41, 0x0a, 0x0d, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x1a, 0x3d, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x62, 0x0a, 0x1c, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x42, 0x0a, 0x0e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x69, 0x5f, 0x66,
	0x6c, 0x6f, 0x77, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0d, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x41, 0x0a, 0x14, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a,
	0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61,
	0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x22, 0x5e, 0x0a, 0x16, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x44, 0x0a, 0x0f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x72, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x69,
	0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x52,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x48, 0x0a, 0x17, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x49, 0x64, 0x22, 0x7f, 0x0a, 0x23, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x58, 0x0a, 0x16, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x69, 0x5f, 0x66,
	0x6c, 0x6f, 0x77, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x14, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x5e, 0x0a, 0x1b, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x3f, 0x0a, 0x0d, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x69, 0x5f, 0x66,
	0x6c, 0x6f, 0x77, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0c, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x22, 0x71, 0x0a, 0x1f, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x49,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0x6a, 0x0a, 0x1d, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69,
	0x73, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x49, 0x0a, 0x0e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x52, 0x0d, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x22, 0x5a, 0x0a, 0x15, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x41, 0x0a, 0x0e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52,
	0x0d, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x26,
	0x0a, 0x10, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x39, 0x0a, 0x12, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x03,
	0x6a, 0x6f, 0x62, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x61, 0x69, 0x5f, 0x66,
	0x6c, 0x6f, 0x77, 0x2e, 0x4a, 0x6f, 0x62, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x03, 0x6a, 0x6f,
	0x62, 0x22, 0x93, 0x04, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4f, 0x0a, 0x15, 0x77, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36,
	0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x13, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x09, 0x6a,
	0x6f, 0x62, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13,
	0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x52, 0x08, 0x6a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x49, 0x0a,
	0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x70, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x33, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x36, 0x0a,
	0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x65, 0x6e,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x07, 0x6c, 0x6f, 0x67, 0x5f, 0x75, 0x72, 0x69,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x6c, 0x6f, 0x67, 0x55, 0x72, 0x69, 0x12, 0x3a, 0x0a, 0x09,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x1a, 0x3d, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x56, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x29, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x13, 0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0x48, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x45, 0x6e, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x35, 0x0a, 0x0c, 0x4a, 0x6f, 0x62,
	0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x25, 0x0a, 0x04, 0x6a, 0x6f, 0x62,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f,
	0x77, 0x2e, 0x4a, 0x6f, 0x62, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x04, 0x6a, 0x6f, 0x62, 0x73,
	0x22, 0x72, 0x0a, 0x20, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x57, 0x6f, 0x72, 0x6b,
	0x46, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x4e, 0x0a, 0x12, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x52, 0x11, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0xb4, 0x04, 0x0a, 0x1e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x0a, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x3c, 0x0a, 0x0f, 0x65, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x13, 0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x57, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x69, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x61, 0x69, 0x5f, 0x66,
	0x6c, 0x6f, 0x77, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x36,
	0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x65,
	0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x07, 0x6c, 0x6f, 0x67, 0x5f, 0x75, 0x72,
	0x69, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x6c, 0x6f, 0x67, 0x55, 0x72, 0x69, 0x12, 0x41, 0x0a,
	0x0d, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x4a, 0x73, 0x6f, 0x6e,
	0x12, 0x3a, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x1a, 0x3d, 0x0a, 0x0f,
	0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x6e, 0x0a, 0x1a, 0x57,
	0x6f, 0x72, 0x6b, 0x46, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x50, 0x0a, 0x13, 0x77, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77,
	0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x12, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x56, 0x0a, 0x25, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x22, 0x64, 0x0a, 0x23, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x61, 0x69, 0x5f, 0x66,
	0x6c, 0x6f, 0x77, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x49, 0x0a, 0x16, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x07, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x22, 0x95, 0x03, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x4d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73,
	0x12, 0x3f, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x2e, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x75, 0x72,
	0x69, 0x12, 0x30, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x75,
	0x73, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x1a, 0x3d, 0x0a,
	0x0f, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x45, 0x0a, 0x10,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x31, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x22, 0x4d, 0x0a, 0x17, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x41,
	0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32,
	0x0a, 0x08, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x66,
	0x61, 0x63, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x08, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61,
	0x63, 0x74, 0x22, 0xef, 0x03, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x72, 0x74,
	0x69, 0x66, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x4e, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73,
	0x12, 0x3d, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12,
	0x39, 0x0a, 0x09, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x08, 0x62, 0x61, 0x74, 0x63, 0x68, 0x55, 0x72, 0x69, 0x12, 0x3b, 0x0a, 0x0a, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x55, 0x72, 0x69, 0x12, 0x3e, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49,
	0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0x3d, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x49, 0x0a, 0x11, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x34, 0x0a, 0x09, 0x61, 0x72, 0x74,
	0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61,
	0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x52, 0x09, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x32,
	0xe9, 0x3c, 0x0a, 0x0f, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x69, 0x0a, 0x0e, 0x67, 0x65, 0x74, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x42, 0x79, 0x49, 0x64, 0x12, 0x12, 0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e,
	0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x61, 0x69, 0x5f, 0x66,
	0x6c, 0x6f, 0x77, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x30, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x2a, 0x22, 0x25, 0x2f, 0x61, 0x69, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x65, 0x78, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x2f, 0x67, 0x65, 0x74, 0x2f, 0x69, 0x64, 0x3a, 0x01, 0x2a, 0x12, 0x6f,
	0x0a, 0x10, 0x67, 0x65, 0x74, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x42, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x14, 0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x4e, 0x61, 0x6d,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c,
	0x6f, 0x77, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x32, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x2c, 0x22, 0x27, 0x2f, 0x61, 0x69, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x65, 0x78, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x2f, 0x67, 0x65, 0x74, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x3a, 0x01, 0x2a, 0x12,
	0x66, 0x0a, 0x0b, 0x6c, 0x69, 0x73, 0x74, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x12, 0x14,
	0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x22,
	0x23, 0x2f, 0x61, 0x69, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2f,
	0x6c, 0x69, 0x73, 0x74, 0x3a, 0x01, 0x2a, 0x12, 0x75, 0x0a, 0x0f, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x12, 0x1f, 0x2e, 0x61, 0x69, 0x5f,
	0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x45, 0x78, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x61, 0x69,
	0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2e,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x22, 0x23, 0x2f, 0x61, 0x69, 0x66, 0x6c, 0x6f, 0x77, 0x2f,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x65,
	0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2f, 0x73, 0x61, 0x76, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x8d,
	0x01, 0x0a, 0x1a, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x45, 0x78, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x57, 0x69, 0x74, 0x68, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x12, 0x1f, 0x2e,
	0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11,
	0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x3b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x35, 0x22, 0x30, 0x2f, 0x61, 0x69, 0x66, 0x6c,
	0x6f, 0x77, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x2f, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2f, 0x73, 0x61, 0x76, 0x65, 0x5f, 0x77,
	0x69, 0x74, 0x68, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x3a, 0x01, 0x2a, 0x12, 0x78,
	0x0a, 0x10, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x73, 0x12, 0x20, 0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x22,
	0x24, 0x2f, 0x61, 0x69, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73,
	0x2f, 0x73, 0x61, 0x76, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x73, 0x0a, 0x0d, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x12, 0x1d, 0x2e, 0x61, 0x69, 0x5f, 0x66,
	0x6c, 0x6f, 0x77, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c,
	0x6f, 0x77, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x30, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x2a, 0x22, 0x25, 0x2f, 0x61, 0x69, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x65, 0x78, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x6f, 0x0a,
	0x11, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x42, 0x79,
	0x49, 0x64, 0x12, 0x12, 0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x49, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x33, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x2d, 0x22, 0x28, 0x2f, 0x61, 0x69, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x2f, 0x69, 0x64, 0x3a, 0x01, 0x2a, 0x12, 0x75,
	0x0a, 0x13, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x42,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e,
	0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x61, 0x69,
	0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x35,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2f, 0x22, 0x2a, 0x2f, 0x61, 0x69, 0x66, 0x6c, 0x6f, 0x77, 0x2f,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x65,
	0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x2f, 0x6e, 0x61,
	0x6d, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x76, 0x0a, 0x14, 0x67, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x49, 0x64, 0x12, 0x12, 0x2e,
	0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x11, 0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x37, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x31, 0x22, 0x2c, 0x2f, 0x61,
	0x69, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x67, 0x65, 0x74, 0x2f, 0x69, 0x64, 0x3a, 0x01, 0x2a, 0x12, 0x7c, 0x0a,
	0x16, 0x67, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f,
	0x77, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e,
	0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x39, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x33, 0x22, 0x2e, 0x2f, 0x61, 0x69, 0x66, 0x6c, 0x6f,
	0x77, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x67, 0x65, 0x74, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x73, 0x0a, 0x11, 0x6c,
	0x69, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x14, 0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x35, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x2f, 0x22, 0x2a, 0x2f, 0x61, 0x69, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f,
	0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x3a, 0x01, 0x2a,
	0x12, 0x88, 0x01, 0x0a, 0x15, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x2e, 0x61, 0x69, 0x5f,
	0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x11, 0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x35, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2f, 0x22, 0x2a, 0x2f, 0x61,
	0x69, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x61, 0x76, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x7c, 0x0a, 0x17, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x79, 0x49, 0x64, 0x12, 0x12, 0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77,
	0x2e, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x61, 0x69, 0x5f,
	0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3a, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x34, 0x22, 0x2f, 0x2f, 0x61, 0x69, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x2f, 0x69, 0x64, 0x3a, 0x01, 0x2a, 0x12, 0x82, 0x01, 0x0a, 0x19, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f,
	0x77, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e,
	0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x3c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x36, 0x22, 0x31, 0x2f, 0x61, 0x69, 0x66, 0x6c, 0x6f,
	0x77, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x65,
	0x0a, 0x0c, 0x67, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x42, 0x79, 0x49, 0x64, 0x12, 0x12,
	0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x11, 0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x22, 0x23, 0x2f,
	0x61, 0x69, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x67, 0x65, 0x74, 0x2f,
	0x69, 0x64, 0x3a, 0x01, 0x2a, 0x12, 0x6b, 0x0a, 0x0e, 0x67, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f,
	0x77, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e,
	0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x30, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x22, 0x25, 0x2f, 0x61, 0x69, 0x66, 0x6c, 0x6f,
	0x77, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x67, 0x65, 0x74, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x3a,
	0x01, 0x2a, 0x12, 0x6f, 0x0a, 0x0d, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x12, 0x1d, 0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x11, 0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26, 0x22, 0x21, 0x2f,
	0x61, 0x69, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x73, 0x61, 0x76, 0x65,
	0x3a, 0x01, 0x2a, 0x12, 0x6b, 0x0a, 0x0f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x42, 0x79, 0x49, 0x64, 0x12, 0x12, 0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77,
	0x2e, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x61, 0x69, 0x5f,
	0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x31, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x22, 0x26, 0x2f, 0x61, 0x69, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x2f, 0x69, 0x64, 0x3a, 0x01, 0x2a,
	0x12, 0x71, 0x0a, 0x11, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x42,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e,
	0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x61, 0x69,
	0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x33,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x22, 0x28, 0x2f, 0x61, 0x69, 0x66, 0x6c, 0x6f, 0x77, 0x2f,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x2f, 0x6e, 0x61, 0x6d, 0x65,
	0x3a, 0x01, 0x2a, 0x12, 0x9c, 0x01, 0x0a, 0x20, 0x67, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x79, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c,
	0x6f, 0x77, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x61, 0x69, 0x5f,
	0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x43, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x3d, 0x22, 0x38, 0x2f, 0x61, 0x69, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x67, 0x65, 0x74, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x3a,
	0x01, 0x2a, 0x12, 0x95, 0x01, 0x0a, 0x18, 0x6c, 0x69, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x28, 0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x61, 0x69, 0x5f, 0x66,
	0x6c, 0x6f, 0x77, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3c, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x36, 0x22, 0x31, 0x2f, 0x61, 0x69, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x3a, 0x01, 0x2a, 0x12, 0x9d, 0x01, 0x0a, 0x1c, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x2e, 0x61, 0x69,
	0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x61, 0x69, 0x5f, 0x66,
	0x6c, 0x6f, 0x77, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3c, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x36, 0x22, 0x31, 0x2f, 0x61, 0x69, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x73, 0x61, 0x76, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0xa2, 0x01, 0x0a, 0x23, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x20, 0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x46, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x40, 0x22,
	0x3b, 0x2f, 0x61, 0x69, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x01, 0x2a, 0x12,
	0x8b, 0x01, 0x0a, 0x18, 0x67, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x42, 0x79, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x2e, 0x61,
	0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11,
	0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x3a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x34, 0x22, 0x2f, 0x2f, 0x61, 0x69, 0x66, 0x6c,
	0x6f, 0x77, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2f, 0x67,
	0x65, 0x74, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x01, 0x2a, 0x12, 0x84, 0x01,
	0x0a, 0x14, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77,
	0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x61,
	0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x33, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x22, 0x28, 0x2f, 0x61, 0x69, 0x66, 0x6c, 0x6f, 0x77,
	0x2f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x61, 0x76,
	0x65, 0x3a, 0x01, 0x2a, 0x12, 0x91, 0x01, 0x0a, 0x1b, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3d, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x37, 0x22, 0x32, 0x2f, 0x61, 0x69, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x2f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x01, 0x2a, 0x12, 0x8b, 0x01, 0x0a, 0x17, 0x67, 0x65, 0x74,
	0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x11, 0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x42, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3c, 0x22, 0x37, 0x2f, 0x61, 0x69, 0x66,
	0x6c, 0x6f, 0x77, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2f,
	0x67, 0x65, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x3a, 0x01, 0x2a, 0x12, 0xa1, 0x01, 0x0a, 0x1e, 0x67, 0x65, 0x74, 0x4c, 0x61,
	0x74, 0x65, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x2e, 0x61, 0x69, 0x5f, 0x66,
	0x6c, 0x6f, 0x77, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x51, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x4b, 0x22,
	0x46, 0x2f, 0x61, 0x69, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x2f, 0x67, 0x65, 0x74, 0x5f, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x5f,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x01, 0x2a, 0x12, 0xa1, 0x01, 0x0a, 0x1e, 0x67,
	0x65, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x2e,
	0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4e, 0x61, 0x6d,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c,
	0x6f, 0x77, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x51, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x4b, 0x22, 0x46, 0x2f, 0x61, 0x69, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2f, 0x67, 0x65, 0x74, 0x5f, 0x6c, 0x61, 0x74,
	0x65, 0x73, 0x74, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x01, 0x2a, 0x12, 0x7d,
	0x0a, 0x18, 0x67, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x46, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x49, 0x64, 0x12, 0x12, 0x2e, 0x61, 0x69, 0x5f,
	0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11,
	0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x3a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x34, 0x22, 0x2f, 0x2f, 0x61, 0x69, 0x66, 0x6c,
	0x6f, 0x77, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x67, 0x65, 0x74, 0x2f, 0x69, 0x64, 0x3a, 0x01, 0x2a, 0x12, 0x83, 0x01,
	0x0a, 0x1a, 0x67, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x46, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x2e, 0x61,
	0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x11, 0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x36, 0x22, 0x31, 0x2f,
	0x61, 0x69, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x67, 0x65, 0x74, 0x2f, 0x6e, 0x61, 0x6d, 0x65,
	0x3a, 0x01, 0x2a, 0x12, 0x7a, 0x0a, 0x15, 0x6c, 0x69, 0x73, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x46,
	0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x2e, 0x61,
	0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x11, 0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x38, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x32, 0x22, 0x2d, 0x2f,
	0x61, 0x69, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x3a, 0x01, 0x2a, 0x12,
	0x93, 0x01, 0x0a, 0x19, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x57, 0x6f, 0x72, 0x6b,
	0x46, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x2e,
	0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x57, 0x6f, 0x72, 0x6b, 0x46, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c,
	0x6f, 0x77, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x38, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x32, 0x22, 0x2d, 0x2f, 0x61, 0x69, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x77, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x61,
	0x76, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x91, 0x01, 0x0a, 0x17, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x27, 0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x61, 0x69, 0x5f,
	0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3a, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x34, 0x22, 0x2f, 0x2f, 0x61, 0x69, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x77, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x83, 0x01, 0x0a, 0x1b, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x49, 0x64, 0x12, 0x12, 0x2e, 0x61, 0x69, 0x5f, 0x66,
	0x6c, 0x6f, 0x77, 0x2e, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e,
	0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x3d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x37, 0x22, 0x32, 0x2f, 0x61, 0x69, 0x66, 0x6c, 0x6f,
	0x77, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x2f, 0x69, 0x64, 0x3a, 0x01, 0x2a, 0x12,
	0x89, 0x01, 0x0a, 0x1d, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x14, 0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x4e, 0x61, 0x6d, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f,
	0x77, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3f, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x39, 0x22, 0x34, 0x2f, 0x61, 0x69, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0xa8, 0x01, 0x0a, 0x1e,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2e,
	0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11,
	0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x43, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3d, 0x22, 0x38, 0x2f, 0x61, 0x69, 0x66, 0x6c,
	0x6f, 0x77, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x65, 0x6e, 0x64, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0xa1, 0x01, 0x0a, 0x1c, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2c, 0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f,
	0x77, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x40, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3a,
	0x22, 0x35, 0x2f, 0x61, 0x69, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x61, 0x0a, 0x0a, 0x67, 0x65,
	0x74, 0x4a, 0x6f, 0x62, 0x42, 0x79, 0x49, 0x64, 0x12, 0x12, 0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c,
	0x6f, 0x77, 0x2e, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x61,
	0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x2c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26, 0x22, 0x21, 0x2f, 0x61, 0x69, 0x66, 0x6c, 0x6f, 0x77,
	0x2f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f,
	0x6a, 0x6f, 0x62, 0x2f, 0x67, 0x65, 0x74, 0x2f, 0x69, 0x64, 0x3a, 0x01, 0x2a, 0x12, 0x67, 0x0a,
	0x0c, 0x67, 0x65, 0x74, 0x4a, 0x6f, 0x62, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x2e,
	0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x22, 0x23,
	0x2f, 0x61, 0x69, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x6a, 0x6f, 0x62, 0x2f, 0x67, 0x65, 0x74, 0x2f, 0x6e,
	0x61, 0x6d, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x5e, 0x0a, 0x07, 0x6c, 0x69, 0x73, 0x74, 0x4a, 0x6f,
	0x62, 0x12, 0x14, 0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f,
	0x77, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2a, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x24, 0x22, 0x1f, 0x2f, 0x61, 0x69, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x6a, 0x6f, 0x62, 0x2f, 0x6c,
	0x69, 0x73, 0x74, 0x3a, 0x01, 0x2a, 0x12, 0x69, 0x0a, 0x0b, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x4a, 0x6f, 0x62, 0x12, 0x1b, 0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x11, 0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x22, 0x1f, 0x2f,
	0x61, 0x69, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x6a, 0x6f, 0x62, 0x2f, 0x73, 0x61, 0x76, 0x65, 0x3a, 0x01,
	0x2a, 0x12, 0x67, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x12, 0x19,
	0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4a,
	0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x61, 0x69, 0x5f, 0x66,
	0x6c, 0x6f, 0x77, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2c, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x26, 0x22, 0x21, 0x2f, 0x61, 0x69, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x6a, 0x6f, 0x62,
	0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x77, 0x0a, 0x0e, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x2e, 0x61,
	0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4a, 0x6f, 0x62,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x61,
	0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x32, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2c, 0x22, 0x27, 0x2f, 0x61, 0x69, 0x66, 0x6c, 0x6f, 0x77,
	0x2f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f,
	0x6a, 0x6f, 0x62, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x3a, 0x01, 0x2a, 0x12, 0x7e, 0x0a, 0x10, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4a, 0x6f, 0x62,
	0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f,
	0x77, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x45, 0x6e, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x61, 0x69, 0x5f, 0x66,
	0x6c, 0x6f, 0x77, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x35, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x2f, 0x22, 0x2a, 0x2f, 0x61, 0x69, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x6a, 0x6f, 0x62,
	0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x3a, 0x01, 0x2a, 0x12, 0x67, 0x0a, 0x0d, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4a, 0x6f, 0x62,
	0x42, 0x79, 0x49, 0x64, 0x12, 0x12, 0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x49,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c,
	0x6f, 0x77, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2f, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x29, 0x22, 0x24, 0x2f, 0x61, 0x69, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x6a, 0x6f, 0x62, 0x2f,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x2f, 0x69, 0x64, 0x3a, 0x01, 0x2a, 0x12, 0x6d, 0x0a, 0x0f,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x14, 0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x31, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b,
	0x22, 0x26, 0x2f, 0x61, 0x69, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x6a, 0x6f, 0x62, 0x2f, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x69, 0x0a, 0x0e, 0x67,
	0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x79, 0x49, 0x64, 0x12, 0x12, 0x2e,
	0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x11, 0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x30, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x22, 0x25, 0x2f, 0x61,
	0x69, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x67, 0x65, 0x74,
	0x2f, 0x69, 0x64, 0x3a, 0x01, 0x2a, 0x12, 0x6f, 0x0a, 0x10, 0x67, 0x65, 0x74, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x2e, 0x61, 0x69, 0x5f,
	0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x11, 0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x32, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2c, 0x22, 0x27, 0x2f, 0x61, 0x69,
	0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x67, 0x65, 0x74, 0x2f,
	0x6e, 0x61, 0x6d, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x75, 0x0a, 0x0f, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x1f, 0x2e, 0x61, 0x69, 0x5f,
	0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x61, 0x69,
	0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2e,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x22, 0x23, 0x2f, 0x61, 0x69, 0x66, 0x6c, 0x6f, 0x77, 0x2f,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x73, 0x61, 0x76, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x73,
	0x0a, 0x0d, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12,
	0x1d, 0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11,
	0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x30, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x22, 0x25, 0x2f, 0x61, 0x69, 0x66, 0x6c,
	0x6f, 0x77, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x3a, 0x01, 0x2a, 0x12, 0x66, 0x0a, 0x0b, 0x6c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x12, 0x14, 0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c,
	0x6f, 0x77, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2e, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x28, 0x22, 0x23, 0x2f, 0x61, 0x69, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x3a, 0x01, 0x2a, 0x12, 0x6f, 0x0a, 0x11, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x79, 0x49, 0x64,
	0x12, 0x12, 0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x49, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x33, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x22,
	0x28, 0x2f, 0x61, 0x69, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x2f, 0x69, 0x64, 0x3a, 0x01, 0x2a, 0x12, 0x75, 0x0a, 0x13,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x14, 0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x4e, 0x61,
	0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x61, 0x69, 0x5f, 0x66,
	0x6c, 0x6f, 0x77, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x35, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x2f, 0x22, 0x2a, 0x2f, 0x61, 0x69, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x2f, 0x6e, 0x61, 0x6d, 0x65,
	0x3a, 0x01, 0x2a, 0x12, 0x6b, 0x0a, 0x0f, 0x67, 0x65, 0x74, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61,
	0x63, 0x74, 0x42, 0x79, 0x49, 0x64, 0x12, 0x12, 0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77,
	0x2e, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x61, 0x69, 0x5f,
	0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x31, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x22, 0x26, 0x2f, 0x61, 0x69, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x61, 0x72,
	0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2f, 0x67, 0x65, 0x74, 0x2f, 0x69, 0x64, 0x3a, 0x01, 0x2a,
	0x12, 0x71, 0x0a, 0x11, 0x67, 0x65, 0x74, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x42,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e,
	0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x61, 0x69,
	0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x33,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x22, 0x28, 0x2f, 0x61, 0x69, 0x66, 0x6c, 0x6f, 0x77, 0x2f,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x61,
	0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2f, 0x67, 0x65, 0x74, 0x2f, 0x6e, 0x61, 0x6d, 0x65,
	0x3a, 0x01, 0x2a, 0x12, 0x76, 0x0a, 0x0e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x72, 0x74,
	0x69, 0x66, 0x61, 0x63, 0x74, 0x12, 0x1e, 0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x31, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b,
	0x22, 0x26, 0x2f, 0x61, 0x69, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63,
	0x74, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x78, 0x0a, 0x10, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x12,
	0x20, 0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x11, 0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x22, 0x24, 0x2f, 0x61,
	0x69, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x2f, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2f, 0x73, 0x61,
	0x76, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x68, 0x0a, 0x0c, 0x6c, 0x69, 0x73, 0x74, 0x41, 0x72, 0x74,
	0x69, 0x66, 0x61, 0x63, 0x74, 0x12, 0x14, 0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x61, 0x69,
	0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2f,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x22, 0x24, 0x2f, 0x61, 0x69, 0x66, 0x6c, 0x6f, 0x77, 0x2f,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x61,
	0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x3a, 0x01, 0x2a, 0x12,
	0x71, 0x0a, 0x12, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63,
	0x74, 0x42, 0x79, 0x49, 0x64, 0x12, 0x12, 0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e,
	0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x61, 0x69, 0x5f, 0x66,
	0x6c, 0x6f, 0x77, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x34, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x2e, 0x22, 0x29, 0x2f, 0x61, 0x69, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x61, 0x72, 0x74,
	0x69, 0x66, 0x61, 0x63, 0x74, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x2f, 0x69, 0x64, 0x3a,
	0x01, 0x2a, 0x12, 0x77, 0x0a, 0x14, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x72, 0x74, 0x69,
	0x66, 0x61, 0x63, 0x74, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x2e, 0x61, 0x69, 0x5f,
	0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x11, 0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x36, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x30, 0x22, 0x2b, 0x2f, 0x61, 0x69,
	0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x2f, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2f, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x3a, 0x01, 0x2a, 0x42, 0x22, 0x0a, 0x10, 0x63,
	0x6f, 0x6d, 0x2e, 0x61, 0x69, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5a,
	0x08, 0x2f, 0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x88, 0x01, 0x01, 0x90, 0x01, 0x01, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_metadata_service_proto_rawDescOnce sync.Once
	file_metadata_service_proto_rawDescData = file_metadata_service_proto_rawDesc
)

func file_metadata_service_proto_rawDescGZIP() []byte {
	file_metadata_service_proto_rawDescOnce.Do(func() {
		file_metadata_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_metadata_service_proto_rawDescData)
	})
	return file_metadata_service_proto_rawDescData
}

var file_metadata_service_proto_msgTypes = make([]protoimpl.MessageInfo, 39)
var file_metadata_service_proto_goTypes = []interface{}{
	(*IdRequest)(nil),                             // 0: ai_flow.IdRequest
	(*NameRequest)(nil),                           // 1: ai_flow.NameRequest
	(*ListRequest)(nil),                           // 2: ai_flow.ListRequest
	(*MetaResponse)(nil),                          // 3: ai_flow.MetaResponse
	(*RegisterExampleRequest)(nil),                // 4: ai_flow.RegisterExampleRequest
	(*RegisterExamplesRequest)(nil),               // 5: ai_flow.RegisterExamplesRequest
	(*ExampleListProto)(nil),                      // 6: ai_flow.ExampleListProto
	(*UpdateExampleRequest)(nil),                  // 7: ai_flow.UpdateExampleRequest
	(*RegisterModelRelationRequest)(nil),          // 8: ai_flow.RegisterModelRelationRequest
	(*RegisterModelRequest)(nil),                  // 9: ai_flow.RegisterModelRequest
	(*ModelRelationListProto)(nil),                // 10: ai_flow.ModelRelationListProto
	(*ModelVersionNameRequest)(nil),               // 11: ai_flow.ModelVersionNameRequest
	(*RegisterModelVersionRelationRequest)(nil),   // 12: ai_flow.RegisterModelVersionRelationRequest
	(*RegisterModelVersionRequest)(nil),           // 13: ai_flow.RegisterModelVersionRequest
	(*ListModelVersionRelationRequest)(nil),       // 14: ai_flow.ListModelVersionRelationRequest
	(*ModelVersionRelationListProto)(nil),         // 15: ai_flow.ModelVersionRelationListProto
	(*ModelVersionListProto)(nil),                 // 16: ai_flow.ModelVersionListProto
	(*ModelNameRequest)(nil),                      // 17: ai_flow.ModelNameRequest
	(*RegisterJobRequest)(nil),                    // 18: ai_flow.RegisterJobRequest
	(*UpdateJobRequest)(nil),                      // 19: ai_flow.UpdateJobRequest
	(*UpdateJobStateRequest)(nil),                 // 20: ai_flow.UpdateJobStateRequest
	(*UpdateJobEndTimeRequest)(nil),               // 21: ai_flow.UpdateJobEndTimeRequest
	(*JobListProto)(nil),                          // 22: ai_flow.JobListProto
	(*RegisterWorkFlowExecutionRequest)(nil),      // 23: ai_flow.RegisterWorkFlowExecutionRequest
	(*UpdateWorkflowExecutionRequest)(nil),        // 24: ai_flow.UpdateWorkflowExecutionRequest
	(*WorkFlowExecutionListProto)(nil),            // 25: ai_flow.WorkFlowExecutionListProto
	(*UpdateWorkflowExecutionEndTimeRequest)(nil), // 26: ai_flow.UpdateWorkflowExecutionEndTimeRequest
	(*UpdateWorkflowExecutionStateRequest)(nil),   // 27: ai_flow.UpdateWorkflowExecutionStateRequest
	(*RegisterProjectRequest)(nil),                // 28: ai_flow.RegisterProjectRequest
	(*UpdateProjectRequest)(nil),                  // 29: ai_flow.UpdateProjectRequest
	(*ProjectListProto)(nil),                      // 30: ai_flow.ProjectListProto
	(*RegisterArtifactRequest)(nil),               // 31: ai_flow.RegisterArtifactRequest
	(*UpdateArtifactRequest)(nil),                 // 32: ai_flow.UpdateArtifactRequest
	(*ArtifactListProto)(nil),                     // 33: ai_flow.ArtifactListProto
	nil,                                           // 34: ai_flow.UpdateExampleRequest.PropertiesEntry
	nil,                                           // 35: ai_flow.UpdateJobRequest.PropertiesEntry
	nil,                                           // 36: ai_flow.UpdateWorkflowExecutionRequest.PropertiesEntry
	nil,                                           // 37: ai_flow.UpdateProjectRequest.PropertiesEntry
	nil,                                           // 38: ai_flow.UpdateArtifactRequest.PropertiesEntry
	(*ExampleProto)(nil),                          // 39: ai_flow.ExampleProto
	(ExampleSupportTypeProto)(0),                  // 40: ai_flow.ExampleSupportTypeProto
	(DataTypeProto)(0),                            // 41: ai_flow.DataTypeProto
	(*wrappers.StringValue)(nil),                  // 42: google.protobuf.StringValue
	(*wrappers.Int64Value)(nil),                   // 43: google.protobuf.Int64Value
	(*ModelRelationProto)(nil),                    // 44: ai_flow.ModelRelationProto
	(*ModelProto)(nil),                            // 45: ai_flow.ModelProto
	(*ModelVersionRelationProto)(nil),             // 46: ai_flow.ModelVersionRelationProto
	(*ModelVersionProto)(nil),                     // 47: ai_flow.ModelVersionProto
	(*JobProto)(nil),                              // 48: ai_flow.JobProto
	(StateProto)(0),                               // 49: ai_flow.StateProto
	(*WorkflowExecutionProto)(nil),                // 50: ai_flow.WorkflowExecutionProto
	(*ProjectProto)(nil),                          // 51: ai_flow.ProjectProto
	(*ArtifactProto)(nil),                         // 52: ai_flow.ArtifactProto
	(*Response)(nil),                              // 53: ai_flow.Response
}
var file_metadata_service_proto_depIdxs = []int32{
	39,  // 0: ai_flow.RegisterExampleRequest.example:type_name -> ai_flow.ExampleProto
	39,  // 1: ai_flow.RegisterExamplesRequest.examples:type_name -> ai_flow.ExampleProto
	39,  // 2: ai_flow.ExampleListProto.examples:type_name -> ai_flow.ExampleProto
	34,  // 3: ai_flow.UpdateExampleRequest.properties:type_name -> ai_flow.UpdateExampleRequest.PropertiesEntry
	40,  // 4: ai_flow.UpdateExampleRequest.support_type:type_name -> ai_flow.ExampleSupportTypeProto
	41,  // 5: ai_flow.UpdateExampleRequest.type_list:type_name -> ai_flow.DataTypeProto
	42,  // 6: ai_flow.UpdateExampleRequest.data_type:type_name -> google.protobuf.StringValue
	42,  // 7: ai_flow.UpdateExampleRequest.data_format:type_name -> google.protobuf.StringValue
	42,  // 8: ai_flow.UpdateExampleRequest.batch_uri:type_name -> google.protobuf.StringValue
	42,  // 9: ai_flow.UpdateExampleRequest.stream_uri:type_name -> google.protobuf.StringValue
	42,  // 10: ai_flow.UpdateExampleRequest.description:type_name -> google.protobuf.StringValue
	43,  // 11: ai_flow.UpdateExampleRequest.update_time:type_name -> google.protobuf.Int64Value
	42,  // 12: ai_flow.UpdateExampleRequest.catalog_name:type_name -> google.protobuf.StringValue
	42,  // 13: ai_flow.UpdateExampleRequest.catalog_type:type_name -> google.protobuf.StringValue
	42,  // 14: ai_flow.UpdateExampleRequest.catalog_database:type_name -> google.protobuf.StringValue
	42,  // 15: ai_flow.UpdateExampleRequest.catalog_connection_uri:type_name -> google.protobuf.StringValue
	42,  // 16: ai_flow.UpdateExampleRequest.catalog_version:type_name -> google.protobuf.StringValue
	42,  // 17: ai_flow.UpdateExampleRequest.catalog_table:type_name -> google.protobuf.StringValue
	44,  // 18: ai_flow.RegisterModelRelationRequest.model_relation:type_name -> ai_flow.ModelRelationProto
	45,  // 19: ai_flow.RegisterModelRequest.model:type_name -> ai_flow.ModelProto
	44,  // 20: ai_flow.ModelRelationListProto.model_relations:type_name -> ai_flow.ModelRelationProto
	46,  // 21: ai_flow.RegisterModelVersionRelationRequest.model_version_relation:type_name -> ai_flow.ModelVersionRelationProto
	47,  // 22: ai_flow.RegisterModelVersionRequest.model_version:type_name -> ai_flow.ModelVersionProto
	46,  // 23: ai_flow.ModelVersionRelationListProto.model_versions:type_name -> ai_flow.ModelVersionRelationProto
	47,  // 24: ai_flow.ModelVersionListProto.model_versions:type_name -> ai_flow.ModelVersionProto
	48,  // 25: ai_flow.RegisterJobRequest.job:type_name -> ai_flow.JobProto
	43,  // 26: ai_flow.UpdateJobRequest.workflow_execution_id:type_name -> google.protobuf.Int64Value
	49,  // 27: ai_flow.UpdateJobRequest.job_state:type_name -> ai_flow.StateProto
	35,  // 28: ai_flow.UpdateJobRequest.properties:type_name -> ai_flow.UpdateJobRequest.PropertiesEntry
	42,  // 29: ai_flow.UpdateJobRequest.job_id:type_name -> google.protobuf.StringValue
	43,  // 30: ai_flow.UpdateJobRequest.end_time:type_name -> google.protobuf.Int64Value
	42,  // 31: ai_flow.UpdateJobRequest.log_uri:type_name -> google.protobuf.StringValue
	42,  // 32: ai_flow.UpdateJobRequest.signature:type_name -> google.protobuf.StringValue
	49,  // 33: ai_flow.UpdateJobStateRequest.state:type_name -> ai_flow.StateProto
	48,  // 34: ai_flow.JobListProto.jobs:type_name -> ai_flow.JobProto
	50,  // 35: ai_flow.RegisterWorkFlowExecutionRequest.workflow_execution:type_name -> ai_flow.WorkflowExecutionProto
	43,  // 36: ai_flow.UpdateWorkflowExecutionRequest.project_id:type_name -> google.protobuf.Int64Value
	49,  // 37: ai_flow.UpdateWorkflowExecutionRequest.execution_state:type_name -> ai_flow.StateProto
	36,  // 38: ai_flow.UpdateWorkflowExecutionRequest.properties:type_name -> ai_flow.UpdateWorkflowExecutionRequest.PropertiesEntry
	43,  // 39: ai_flow.UpdateWorkflowExecutionRequest.end_time:type_name -> google.protobuf.Int64Value
	42,  // 40: ai_flow.UpdateWorkflowExecutionRequest.log_uri:type_name -> google.protobuf.StringValue
	42,  // 41: ai_flow.UpdateWorkflowExecutionRequest.workflow_json:type_name -> google.protobuf.StringValue
	42,  // 42: ai_flow.UpdateWorkflowExecutionRequest.signature:type_name -> google.protobuf.StringValue
	50,  // 43: ai_flow.WorkFlowExecutionListProto.workflow_executions:type_name -> ai_flow.WorkflowExecutionProto
	49,  // 44: ai_flow.UpdateWorkflowExecutionStateRequest.state:type_name -> ai_flow.StateProto
	51,  // 45: ai_flow.RegisterProjectRequest.project:type_name -> ai_flow.ProjectProto
	37,  // 46: ai_flow.UpdateProjectRequest.properties:type_name -> ai_flow.UpdateProjectRequest.PropertiesEntry
	42,  // 47: ai_flow.UpdateProjectRequest.project_type:type_name -> google.protobuf.StringValue
	42,  // 48: ai_flow.UpdateProjectRequest.uri:type_name -> google.protobuf.StringValue
	42,  // 49: ai_flow.UpdateProjectRequest.user:type_name -> google.protobuf.StringValue
	42,  // 50: ai_flow.UpdateProjectRequest.password:type_name -> google.protobuf.StringValue
	51,  // 51: ai_flow.ProjectListProto.projects:type_name -> ai_flow.ProjectProto
	52,  // 52: ai_flow.RegisterArtifactRequest.artifact:type_name -> ai_flow.ArtifactProto
	38,  // 53: ai_flow.UpdateArtifactRequest.properties:type_name -> ai_flow.UpdateArtifactRequest.PropertiesEntry
	42,  // 54: ai_flow.UpdateArtifactRequest.data_format:type_name -> google.protobuf.StringValue
	42,  // 55: ai_flow.UpdateArtifactRequest.batch_uri:type_name -> google.protobuf.StringValue
	42,  // 56: ai_flow.UpdateArtifactRequest.stream_uri:type_name -> google.protobuf.StringValue
	42,  // 57: ai_flow.UpdateArtifactRequest.description:type_name -> google.protobuf.StringValue
	43,  // 58: ai_flow.UpdateArtifactRequest.update_time:type_name -> google.protobuf.Int64Value
	52,  // 59: ai_flow.ArtifactListProto.artifacts:type_name -> ai_flow.ArtifactProto
	0,   // 60: ai_flow.MetadataService.getExampleById:input_type -> ai_flow.IdRequest
	1,   // 61: ai_flow.MetadataService.getExampleByName:input_type -> ai_flow.NameRequest
	2,   // 62: ai_flow.MetadataService.listExample:input_type -> ai_flow.ListRequest
	4,   // 63: ai_flow.MetadataService.registerExample:input_type -> ai_flow.RegisterExampleRequest
	4,   // 64: ai_flow.MetadataService.registerExampleWithCatalog:input_type -> ai_flow.RegisterExampleRequest
	5,   // 65: ai_flow.MetadataService.registerExamples:input_type -> ai_flow.RegisterExamplesRequest
	7,   // 66: ai_flow.MetadataService.updateExample:input_type -> ai_flow.UpdateExampleRequest
	0,   // 67: ai_flow.MetadataService.deleteExampleById:input_type -> ai_flow.IdRequest
	1,   // 68: ai_flow.MetadataService.deleteExampleByName:input_type -> ai_flow.NameRequest
	0,   // 69: ai_flow.MetadataService.getModelRelationById:input_type -> ai_flow.IdRequest
	1,   // 70: ai_flow.MetadataService.getModelRelationByName:input_type -> ai_flow.NameRequest
	2,   // 71: ai_flow.MetadataService.listModelRelation:input_type -> ai_flow.ListRequest
	8,   // 72: ai_flow.MetadataService.registerModelRelation:input_type -> ai_flow.RegisterModelRelationRequest
	0,   // 73: ai_flow.MetadataService.deleteModelRelationById:input_type -> ai_flow.IdRequest
	1,   // 74: ai_flow.MetadataService.deleteModelRelationByName:input_type -> ai_flow.NameRequest
	0,   // 75: ai_flow.MetadataService.getModelById:input_type -> ai_flow.IdRequest
	1,   // 76: ai_flow.MetadataService.getModelByName:input_type -> ai_flow.NameRequest
	9,   // 77: ai_flow.MetadataService.registerModel:input_type -> ai_flow.RegisterModelRequest
	0,   // 78: ai_flow.MetadataService.deleteModelById:input_type -> ai_flow.IdRequest
	1,   // 79: ai_flow.MetadataService.deleteModelByName:input_type -> ai_flow.NameRequest
	11,  // 80: ai_flow.MetadataService.getModelVersionRelationByVersion:input_type -> ai_flow.ModelVersionNameRequest
	14,  // 81: ai_flow.MetadataService.listModelVersionRelation:input_type -> ai_flow.ListModelVersionRelationRequest
	12,  // 82: ai_flow.MetadataService.registerModelVersionRelation:input_type -> ai_flow.RegisterModelVersionRelationRequest
	11,  // 83: ai_flow.MetadataService.deleteModelVersionRelationByVersion:input_type -> ai_flow.ModelVersionNameRequest
	11,  // 84: ai_flow.MetadataService.getModelVersionByVersion:input_type -> ai_flow.ModelVersionNameRequest
	13,  // 85: ai_flow.MetadataService.registerModelVersion:input_type -> ai_flow.RegisterModelVersionRequest
	11,  // 86: ai_flow.MetadataService.deleteModelVersionByVersion:input_type -> ai_flow.ModelVersionNameRequest
	17,  // 87: ai_flow.MetadataService.getDeployedModelVersion:input_type -> ai_flow.ModelNameRequest
	17,  // 88: ai_flow.MetadataService.getLatestValidatedModelVersion:input_type -> ai_flow.ModelNameRequest
	17,  // 89: ai_flow.MetadataService.getLatestGeneratedModelVersion:input_type -> ai_flow.ModelNameRequest
	0,   // 90: ai_flow.MetadataService.getWorkFlowExecutionById:input_type -> ai_flow.IdRequest
	1,   // 91: ai_flow.MetadataService.getWorkFlowExecutionByName:input_type -> ai_flow.NameRequest
	2,   // 92: ai_flow.MetadataService.listWorkFlowExecution:input_type -> ai_flow.ListRequest
	23,  // 93: ai_flow.MetadataService.registerWorkFlowExecution:input_type -> ai_flow.RegisterWorkFlowExecutionRequest
	24,  // 94: ai_flow.MetadataService.updateWorkflowExecution:input_type -> ai_flow.UpdateWorkflowExecutionRequest
	0,   // 95: ai_flow.MetadataService.deleteWorkflowExecutionById:input_type -> ai_flow.IdRequest
	1,   // 96: ai_flow.MetadataService.deleteWorkflowExecutionByName:input_type -> ai_flow.NameRequest
	26,  // 97: ai_flow.MetadataService.updateWorkflowExecutionEndTime:input_type -> ai_flow.UpdateWorkflowExecutionEndTimeRequest
	27,  // 98: ai_flow.MetadataService.updateWorkflowExecutionState:input_type -> ai_flow.UpdateWorkflowExecutionStateRequest
	0,   // 99: ai_flow.MetadataService.getJobById:input_type -> ai_flow.IdRequest
	1,   // 100: ai_flow.MetadataService.getJobByName:input_type -> ai_flow.NameRequest
	2,   // 101: ai_flow.MetadataService.listJob:input_type -> ai_flow.ListRequest
	18,  // 102: ai_flow.MetadataService.registerJob:input_type -> ai_flow.RegisterJobRequest
	19,  // 103: ai_flow.MetadataService.updateJob:input_type -> ai_flow.UpdateJobRequest
	20,  // 104: ai_flow.MetadataService.updateJobState:input_type -> ai_flow.UpdateJobStateRequest
	21,  // 105: ai_flow.MetadataService.updateJobEndTime:input_type -> ai_flow.UpdateJobEndTimeRequest
	0,   // 106: ai_flow.MetadataService.deleteJobById:input_type -> ai_flow.IdRequest
	1,   // 107: ai_flow.MetadataService.deleteJobByName:input_type -> ai_flow.NameRequest
	0,   // 108: ai_flow.MetadataService.getProjectById:input_type -> ai_flow.IdRequest
	1,   // 109: ai_flow.MetadataService.getProjectByName:input_type -> ai_flow.NameRequest
	28,  // 110: ai_flow.MetadataService.registerProject:input_type -> ai_flow.RegisterProjectRequest
	29,  // 111: ai_flow.MetadataService.updateProject:input_type -> ai_flow.UpdateProjectRequest
	2,   // 112: ai_flow.MetadataService.listProject:input_type -> ai_flow.ListRequest
	0,   // 113: ai_flow.MetadataService.deleteProjectById:input_type -> ai_flow.IdRequest
	1,   // 114: ai_flow.MetadataService.deleteProjectByName:input_type -> ai_flow.NameRequest
	0,   // 115: ai_flow.MetadataService.getArtifactById:input_type -> ai_flow.IdRequest
	1,   // 116: ai_flow.MetadataService.getArtifactByName:input_type -> ai_flow.NameRequest
	32,  // 117: ai_flow.MetadataService.updateArtifact:input_type -> ai_flow.UpdateArtifactRequest
	31,  // 118: ai_flow.MetadataService.registerArtifact:input_type -> ai_flow.RegisterArtifactRequest
	2,   // 119: ai_flow.MetadataService.listArtifact:input_type -> ai_flow.ListRequest
	0,   // 120: ai_flow.MetadataService.deleteArtifactById:input_type -> ai_flow.IdRequest
	1,   // 121: ai_flow.MetadataService.deleteArtifactByName:input_type -> ai_flow.NameRequest
	53,  // 122: ai_flow.MetadataService.getExampleById:output_type -> ai_flow.Response
	53,  // 123: ai_flow.MetadataService.getExampleByName:output_type -> ai_flow.Response
	53,  // 124: ai_flow.MetadataService.listExample:output_type -> ai_flow.Response
	53,  // 125: ai_flow.MetadataService.registerExample:output_type -> ai_flow.Response
	53,  // 126: ai_flow.MetadataService.registerExampleWithCatalog:output_type -> ai_flow.Response
	53,  // 127: ai_flow.MetadataService.registerExamples:output_type -> ai_flow.Response
	53,  // 128: ai_flow.MetadataService.updateExample:output_type -> ai_flow.Response
	53,  // 129: ai_flow.MetadataService.deleteExampleById:output_type -> ai_flow.Response
	53,  // 130: ai_flow.MetadataService.deleteExampleByName:output_type -> ai_flow.Response
	53,  // 131: ai_flow.MetadataService.getModelRelationById:output_type -> ai_flow.Response
	53,  // 132: ai_flow.MetadataService.getModelRelationByName:output_type -> ai_flow.Response
	53,  // 133: ai_flow.MetadataService.listModelRelation:output_type -> ai_flow.Response
	53,  // 134: ai_flow.MetadataService.registerModelRelation:output_type -> ai_flow.Response
	53,  // 135: ai_flow.MetadataService.deleteModelRelationById:output_type -> ai_flow.Response
	53,  // 136: ai_flow.MetadataService.deleteModelRelationByName:output_type -> ai_flow.Response
	53,  // 137: ai_flow.MetadataService.getModelById:output_type -> ai_flow.Response
	53,  // 138: ai_flow.MetadataService.getModelByName:output_type -> ai_flow.Response
	53,  // 139: ai_flow.MetadataService.registerModel:output_type -> ai_flow.Response
	53,  // 140: ai_flow.MetadataService.deleteModelById:output_type -> ai_flow.Response
	53,  // 141: ai_flow.MetadataService.deleteModelByName:output_type -> ai_flow.Response
	53,  // 142: ai_flow.MetadataService.getModelVersionRelationByVersion:output_type -> ai_flow.Response
	53,  // 143: ai_flow.MetadataService.listModelVersionRelation:output_type -> ai_flow.Response
	53,  // 144: ai_flow.MetadataService.registerModelVersionRelation:output_type -> ai_flow.Response
	53,  // 145: ai_flow.MetadataService.deleteModelVersionRelationByVersion:output_type -> ai_flow.Response
	53,  // 146: ai_flow.MetadataService.getModelVersionByVersion:output_type -> ai_flow.Response
	53,  // 147: ai_flow.MetadataService.registerModelVersion:output_type -> ai_flow.Response
	53,  // 148: ai_flow.MetadataService.deleteModelVersionByVersion:output_type -> ai_flow.Response
	53,  // 149: ai_flow.MetadataService.getDeployedModelVersion:output_type -> ai_flow.Response
	53,  // 150: ai_flow.MetadataService.getLatestValidatedModelVersion:output_type -> ai_flow.Response
	53,  // 151: ai_flow.MetadataService.getLatestGeneratedModelVersion:output_type -> ai_flow.Response
	53,  // 152: ai_flow.MetadataService.getWorkFlowExecutionById:output_type -> ai_flow.Response
	53,  // 153: ai_flow.MetadataService.getWorkFlowExecutionByName:output_type -> ai_flow.Response
	53,  // 154: ai_flow.MetadataService.listWorkFlowExecution:output_type -> ai_flow.Response
	53,  // 155: ai_flow.MetadataService.registerWorkFlowExecution:output_type -> ai_flow.Response
	53,  // 156: ai_flow.MetadataService.updateWorkflowExecution:output_type -> ai_flow.Response
	53,  // 157: ai_flow.MetadataService.deleteWorkflowExecutionById:output_type -> ai_flow.Response
	53,  // 158: ai_flow.MetadataService.deleteWorkflowExecutionByName:output_type -> ai_flow.Response
	53,  // 159: ai_flow.MetadataService.updateWorkflowExecutionEndTime:output_type -> ai_flow.Response
	53,  // 160: ai_flow.MetadataService.updateWorkflowExecutionState:output_type -> ai_flow.Response
	53,  // 161: ai_flow.MetadataService.getJobById:output_type -> ai_flow.Response
	53,  // 162: ai_flow.MetadataService.getJobByName:output_type -> ai_flow.Response
	53,  // 163: ai_flow.MetadataService.listJob:output_type -> ai_flow.Response
	53,  // 164: ai_flow.MetadataService.registerJob:output_type -> ai_flow.Response
	53,  // 165: ai_flow.MetadataService.updateJob:output_type -> ai_flow.Response
	53,  // 166: ai_flow.MetadataService.updateJobState:output_type -> ai_flow.Response
	53,  // 167: ai_flow.MetadataService.updateJobEndTime:output_type -> ai_flow.Response
	53,  // 168: ai_flow.MetadataService.deleteJobById:output_type -> ai_flow.Response
	53,  // 169: ai_flow.MetadataService.deleteJobByName:output_type -> ai_flow.Response
	53,  // 170: ai_flow.MetadataService.getProjectById:output_type -> ai_flow.Response
	53,  // 171: ai_flow.MetadataService.getProjectByName:output_type -> ai_flow.Response
	53,  // 172: ai_flow.MetadataService.registerProject:output_type -> ai_flow.Response
	53,  // 173: ai_flow.MetadataService.updateProject:output_type -> ai_flow.Response
	53,  // 174: ai_flow.MetadataService.listProject:output_type -> ai_flow.Response
	53,  // 175: ai_flow.MetadataService.deleteProjectById:output_type -> ai_flow.Response
	53,  // 176: ai_flow.MetadataService.deleteProjectByName:output_type -> ai_flow.Response
	53,  // 177: ai_flow.MetadataService.getArtifactById:output_type -> ai_flow.Response
	53,  // 178: ai_flow.MetadataService.getArtifactByName:output_type -> ai_flow.Response
	53,  // 179: ai_flow.MetadataService.updateArtifact:output_type -> ai_flow.Response
	53,  // 180: ai_flow.MetadataService.registerArtifact:output_type -> ai_flow.Response
	53,  // 181: ai_flow.MetadataService.listArtifact:output_type -> ai_flow.Response
	53,  // 182: ai_flow.MetadataService.deleteArtifactById:output_type -> ai_flow.Response
	53,  // 183: ai_flow.MetadataService.deleteArtifactByName:output_type -> ai_flow.Response
	122, // [122:184] is the sub-list for method output_type
	60,  // [60:122] is the sub-list for method input_type
	60,  // [60:60] is the sub-list for extension type_name
	60,  // [60:60] is the sub-list for extension extendee
	0,   // [0:60] is the sub-list for field type_name
}

func init() { file_metadata_service_proto_init() }
func file_metadata_service_proto_init() {
	if File_metadata_service_proto != nil {
		return
	}
	file_message_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_metadata_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metadata_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NameRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metadata_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metadata_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetaResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metadata_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterExampleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metadata_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterExamplesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metadata_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExampleListProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metadata_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateExampleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metadata_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterModelRelationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metadata_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterModelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metadata_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModelRelationListProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metadata_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModelVersionNameRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metadata_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterModelVersionRelationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metadata_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterModelVersionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metadata_service_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListModelVersionRelationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metadata_service_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModelVersionRelationListProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metadata_service_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModelVersionListProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metadata_service_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModelNameRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metadata_service_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterJobRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metadata_service_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateJobRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metadata_service_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateJobStateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metadata_service_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateJobEndTimeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metadata_service_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobListProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metadata_service_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterWorkFlowExecutionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metadata_service_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateWorkflowExecutionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metadata_service_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkFlowExecutionListProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metadata_service_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateWorkflowExecutionEndTimeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metadata_service_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateWorkflowExecutionStateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metadata_service_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterProjectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metadata_service_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateProjectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metadata_service_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProjectListProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metadata_service_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterArtifactRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metadata_service_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateArtifactRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metadata_service_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArtifactListProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_metadata_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   39,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_metadata_service_proto_goTypes,
		DependencyIndexes: file_metadata_service_proto_depIdxs,
		MessageInfos:      file_metadata_service_proto_msgTypes,
	}.Build()
	File_metadata_service_proto = out.File
	file_metadata_service_proto_rawDesc = nil
	file_metadata_service_proto_goTypes = nil
	file_metadata_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// MetadataServiceClient is the client API for MetadataService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MetadataServiceClient interface {
	//example api
	GetExampleById(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*Response, error)
	GetExampleByName(ctx context.Context, in *NameRequest, opts ...grpc.CallOption) (*Response, error)
	ListExample(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*Response, error)
	RegisterExample(ctx context.Context, in *RegisterExampleRequest, opts ...grpc.CallOption) (*Response, error)
	RegisterExampleWithCatalog(ctx context.Context, in *RegisterExampleRequest, opts ...grpc.CallOption) (*Response, error)
	RegisterExamples(ctx context.Context, in *RegisterExamplesRequest, opts ...grpc.CallOption) (*Response, error)
	UpdateExample(ctx context.Context, in *UpdateExampleRequest, opts ...grpc.CallOption) (*Response, error)
	DeleteExampleById(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*Response, error)
	DeleteExampleByName(ctx context.Context, in *NameRequest, opts ...grpc.CallOption) (*Response, error)
	//model relation api
	GetModelRelationById(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*Response, error)
	GetModelRelationByName(ctx context.Context, in *NameRequest, opts ...grpc.CallOption) (*Response, error)
	ListModelRelation(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*Response, error)
	RegisterModelRelation(ctx context.Context, in *RegisterModelRelationRequest, opts ...grpc.CallOption) (*Response, error)
	DeleteModelRelationById(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*Response, error)
	DeleteModelRelationByName(ctx context.Context, in *NameRequest, opts ...grpc.CallOption) (*Response, error)
	//model api
	GetModelById(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*Response, error)
	GetModelByName(ctx context.Context, in *NameRequest, opts ...grpc.CallOption) (*Response, error)
	RegisterModel(ctx context.Context, in *RegisterModelRequest, opts ...grpc.CallOption) (*Response, error)
	DeleteModelById(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*Response, error)
	DeleteModelByName(ctx context.Context, in *NameRequest, opts ...grpc.CallOption) (*Response, error)
	//model version relation api
	GetModelVersionRelationByVersion(ctx context.Context, in *ModelVersionNameRequest, opts ...grpc.CallOption) (*Response, error)
	ListModelVersionRelation(ctx context.Context, in *ListModelVersionRelationRequest, opts ...grpc.CallOption) (*Response, error)
	RegisterModelVersionRelation(ctx context.Context, in *RegisterModelVersionRelationRequest, opts ...grpc.CallOption) (*Response, error)
	DeleteModelVersionRelationByVersion(ctx context.Context, in *ModelVersionNameRequest, opts ...grpc.CallOption) (*Response, error)
	//model version api
	GetModelVersionByVersion(ctx context.Context, in *ModelVersionNameRequest, opts ...grpc.CallOption) (*Response, error)
	RegisterModelVersion(ctx context.Context, in *RegisterModelVersionRequest, opts ...grpc.CallOption) (*Response, error)
	DeleteModelVersionByVersion(ctx context.Context, in *ModelVersionNameRequest, opts ...grpc.CallOption) (*Response, error)
	GetDeployedModelVersion(ctx context.Context, in *ModelNameRequest, opts ...grpc.CallOption) (*Response, error)
	GetLatestValidatedModelVersion(ctx context.Context, in *ModelNameRequest, opts ...grpc.CallOption) (*Response, error)
	GetLatestGeneratedModelVersion(ctx context.Context, in *ModelNameRequest, opts ...grpc.CallOption) (*Response, error)
	//workflow execution api
	GetWorkFlowExecutionById(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*Response, error)
	GetWorkFlowExecutionByName(ctx context.Context, in *NameRequest, opts ...grpc.CallOption) (*Response, error)
	ListWorkFlowExecution(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*Response, error)
	RegisterWorkFlowExecution(ctx context.Context, in *RegisterWorkFlowExecutionRequest, opts ...grpc.CallOption) (*Response, error)
	UpdateWorkflowExecution(ctx context.Context, in *UpdateWorkflowExecutionRequest, opts ...grpc.CallOption) (*Response, error)
	DeleteWorkflowExecutionById(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*Response, error)
	DeleteWorkflowExecutionByName(ctx context.Context, in *NameRequest, opts ...grpc.CallOption) (*Response, error)
	UpdateWorkflowExecutionEndTime(ctx context.Context, in *UpdateWorkflowExecutionEndTimeRequest, opts ...grpc.CallOption) (*Response, error)
	UpdateWorkflowExecutionState(ctx context.Context, in *UpdateWorkflowExecutionStateRequest, opts ...grpc.CallOption) (*Response, error)
	//job api
	GetJobById(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*Response, error)
	GetJobByName(ctx context.Context, in *NameRequest, opts ...grpc.CallOption) (*Response, error)
	ListJob(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*Response, error)
	RegisterJob(ctx context.Context, in *RegisterJobRequest, opts ...grpc.CallOption) (*Response, error)
	UpdateJob(ctx context.Context, in *UpdateJobRequest, opts ...grpc.CallOption) (*Response, error)
	UpdateJobState(ctx context.Context, in *UpdateJobStateRequest, opts ...grpc.CallOption) (*Response, error)
	UpdateJobEndTime(ctx context.Context, in *UpdateJobEndTimeRequest, opts ...grpc.CallOption) (*Response, error)
	DeleteJobById(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*Response, error)
	DeleteJobByName(ctx context.Context, in *NameRequest, opts ...grpc.CallOption) (*Response, error)
	//project api
	GetProjectById(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*Response, error)
	GetProjectByName(ctx context.Context, in *NameRequest, opts ...grpc.CallOption) (*Response, error)
	RegisterProject(ctx context.Context, in *RegisterProjectRequest, opts ...grpc.CallOption) (*Response, error)
	UpdateProject(ctx context.Context, in *UpdateProjectRequest, opts ...grpc.CallOption) (*Response, error)
	ListProject(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*Response, error)
	DeleteProjectById(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*Response, error)
	DeleteProjectByName(ctx context.Context, in *NameRequest, opts ...grpc.CallOption) (*Response, error)
	//artifact api
	GetArtifactById(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*Response, error)
	GetArtifactByName(ctx context.Context, in *NameRequest, opts ...grpc.CallOption) (*Response, error)
	UpdateArtifact(ctx context.Context, in *UpdateArtifactRequest, opts ...grpc.CallOption) (*Response, error)
	RegisterArtifact(ctx context.Context, in *RegisterArtifactRequest, opts ...grpc.CallOption) (*Response, error)
	ListArtifact(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*Response, error)
	DeleteArtifactById(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*Response, error)
	DeleteArtifactByName(ctx context.Context, in *NameRequest, opts ...grpc.CallOption) (*Response, error)
}

type metadataServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMetadataServiceClient(cc grpc.ClientConnInterface) MetadataServiceClient {
	return &metadataServiceClient{cc}
}

func (c *metadataServiceClient) GetExampleById(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/ai_flow.MetadataService/getExampleById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataServiceClient) GetExampleByName(ctx context.Context, in *NameRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/ai_flow.MetadataService/getExampleByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataServiceClient) ListExample(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/ai_flow.MetadataService/listExample", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataServiceClient) RegisterExample(ctx context.Context, in *RegisterExampleRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/ai_flow.MetadataService/registerExample", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataServiceClient) RegisterExampleWithCatalog(ctx context.Context, in *RegisterExampleRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/ai_flow.MetadataService/registerExampleWithCatalog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataServiceClient) RegisterExamples(ctx context.Context, in *RegisterExamplesRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/ai_flow.MetadataService/registerExamples", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataServiceClient) UpdateExample(ctx context.Context, in *UpdateExampleRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/ai_flow.MetadataService/updateExample", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataServiceClient) DeleteExampleById(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/ai_flow.MetadataService/deleteExampleById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataServiceClient) DeleteExampleByName(ctx context.Context, in *NameRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/ai_flow.MetadataService/deleteExampleByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataServiceClient) GetModelRelationById(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/ai_flow.MetadataService/getModelRelationById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataServiceClient) GetModelRelationByName(ctx context.Context, in *NameRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/ai_flow.MetadataService/getModelRelationByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataServiceClient) ListModelRelation(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/ai_flow.MetadataService/listModelRelation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataServiceClient) RegisterModelRelation(ctx context.Context, in *RegisterModelRelationRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/ai_flow.MetadataService/registerModelRelation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataServiceClient) DeleteModelRelationById(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/ai_flow.MetadataService/deleteModelRelationById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataServiceClient) DeleteModelRelationByName(ctx context.Context, in *NameRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/ai_flow.MetadataService/deleteModelRelationByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataServiceClient) GetModelById(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/ai_flow.MetadataService/getModelById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataServiceClient) GetModelByName(ctx context.Context, in *NameRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/ai_flow.MetadataService/getModelByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataServiceClient) RegisterModel(ctx context.Context, in *RegisterModelRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/ai_flow.MetadataService/registerModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataServiceClient) DeleteModelById(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/ai_flow.MetadataService/deleteModelById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataServiceClient) DeleteModelByName(ctx context.Context, in *NameRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/ai_flow.MetadataService/deleteModelByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataServiceClient) GetModelVersionRelationByVersion(ctx context.Context, in *ModelVersionNameRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/ai_flow.MetadataService/getModelVersionRelationByVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataServiceClient) ListModelVersionRelation(ctx context.Context, in *ListModelVersionRelationRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/ai_flow.MetadataService/listModelVersionRelation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataServiceClient) RegisterModelVersionRelation(ctx context.Context, in *RegisterModelVersionRelationRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/ai_flow.MetadataService/registerModelVersionRelation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataServiceClient) DeleteModelVersionRelationByVersion(ctx context.Context, in *ModelVersionNameRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/ai_flow.MetadataService/deleteModelVersionRelationByVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataServiceClient) GetModelVersionByVersion(ctx context.Context, in *ModelVersionNameRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/ai_flow.MetadataService/getModelVersionByVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataServiceClient) RegisterModelVersion(ctx context.Context, in *RegisterModelVersionRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/ai_flow.MetadataService/registerModelVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataServiceClient) DeleteModelVersionByVersion(ctx context.Context, in *ModelVersionNameRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/ai_flow.MetadataService/deleteModelVersionByVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataServiceClient) GetDeployedModelVersion(ctx context.Context, in *ModelNameRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/ai_flow.MetadataService/getDeployedModelVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataServiceClient) GetLatestValidatedModelVersion(ctx context.Context, in *ModelNameRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/ai_flow.MetadataService/getLatestValidatedModelVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataServiceClient) GetLatestGeneratedModelVersion(ctx context.Context, in *ModelNameRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/ai_flow.MetadataService/getLatestGeneratedModelVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataServiceClient) GetWorkFlowExecutionById(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/ai_flow.MetadataService/getWorkFlowExecutionById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataServiceClient) GetWorkFlowExecutionByName(ctx context.Context, in *NameRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/ai_flow.MetadataService/getWorkFlowExecutionByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataServiceClient) ListWorkFlowExecution(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/ai_flow.MetadataService/listWorkFlowExecution", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataServiceClient) RegisterWorkFlowExecution(ctx context.Context, in *RegisterWorkFlowExecutionRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/ai_flow.MetadataService/registerWorkFlowExecution", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataServiceClient) UpdateWorkflowExecution(ctx context.Context, in *UpdateWorkflowExecutionRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/ai_flow.MetadataService/updateWorkflowExecution", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataServiceClient) DeleteWorkflowExecutionById(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/ai_flow.MetadataService/deleteWorkflowExecutionById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataServiceClient) DeleteWorkflowExecutionByName(ctx context.Context, in *NameRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/ai_flow.MetadataService/deleteWorkflowExecutionByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataServiceClient) UpdateWorkflowExecutionEndTime(ctx context.Context, in *UpdateWorkflowExecutionEndTimeRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/ai_flow.MetadataService/updateWorkflowExecutionEndTime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataServiceClient) UpdateWorkflowExecutionState(ctx context.Context, in *UpdateWorkflowExecutionStateRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/ai_flow.MetadataService/updateWorkflowExecutionState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataServiceClient) GetJobById(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/ai_flow.MetadataService/getJobById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataServiceClient) GetJobByName(ctx context.Context, in *NameRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/ai_flow.MetadataService/getJobByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataServiceClient) ListJob(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/ai_flow.MetadataService/listJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataServiceClient) RegisterJob(ctx context.Context, in *RegisterJobRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/ai_flow.MetadataService/registerJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataServiceClient) UpdateJob(ctx context.Context, in *UpdateJobRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/ai_flow.MetadataService/updateJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataServiceClient) UpdateJobState(ctx context.Context, in *UpdateJobStateRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/ai_flow.MetadataService/updateJobState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataServiceClient) UpdateJobEndTime(ctx context.Context, in *UpdateJobEndTimeRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/ai_flow.MetadataService/updateJobEndTime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataServiceClient) DeleteJobById(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/ai_flow.MetadataService/deleteJobById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataServiceClient) DeleteJobByName(ctx context.Context, in *NameRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/ai_flow.MetadataService/deleteJobByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataServiceClient) GetProjectById(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/ai_flow.MetadataService/getProjectById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataServiceClient) GetProjectByName(ctx context.Context, in *NameRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/ai_flow.MetadataService/getProjectByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataServiceClient) RegisterProject(ctx context.Context, in *RegisterProjectRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/ai_flow.MetadataService/registerProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataServiceClient) UpdateProject(ctx context.Context, in *UpdateProjectRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/ai_flow.MetadataService/updateProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataServiceClient) ListProject(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/ai_flow.MetadataService/listProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataServiceClient) DeleteProjectById(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/ai_flow.MetadataService/deleteProjectById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataServiceClient) DeleteProjectByName(ctx context.Context, in *NameRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/ai_flow.MetadataService/deleteProjectByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataServiceClient) GetArtifactById(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/ai_flow.MetadataService/getArtifactById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataServiceClient) GetArtifactByName(ctx context.Context, in *NameRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/ai_flow.MetadataService/getArtifactByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataServiceClient) UpdateArtifact(ctx context.Context, in *UpdateArtifactRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/ai_flow.MetadataService/updateArtifact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataServiceClient) RegisterArtifact(ctx context.Context, in *RegisterArtifactRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/ai_flow.MetadataService/registerArtifact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataServiceClient) ListArtifact(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/ai_flow.MetadataService/listArtifact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataServiceClient) DeleteArtifactById(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/ai_flow.MetadataService/deleteArtifactById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataServiceClient) DeleteArtifactByName(ctx context.Context, in *NameRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/ai_flow.MetadataService/deleteArtifactByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MetadataServiceServer is the server API for MetadataService service.
type MetadataServiceServer interface {
	//example api
	GetExampleById(context.Context, *IdRequest) (*Response, error)
	GetExampleByName(context.Context, *NameRequest) (*Response, error)
	ListExample(context.Context, *ListRequest) (*Response, error)
	RegisterExample(context.Context, *RegisterExampleRequest) (*Response, error)
	RegisterExampleWithCatalog(context.Context, *RegisterExampleRequest) (*Response, error)
	RegisterExamples(context.Context, *RegisterExamplesRequest) (*Response, error)
	UpdateExample(context.Context, *UpdateExampleRequest) (*Response, error)
	DeleteExampleById(context.Context, *IdRequest) (*Response, error)
	DeleteExampleByName(context.Context, *NameRequest) (*Response, error)
	//model relation api
	GetModelRelationById(context.Context, *IdRequest) (*Response, error)
	GetModelRelationByName(context.Context, *NameRequest) (*Response, error)
	ListModelRelation(context.Context, *ListRequest) (*Response, error)
	RegisterModelRelation(context.Context, *RegisterModelRelationRequest) (*Response, error)
	DeleteModelRelationById(context.Context, *IdRequest) (*Response, error)
	DeleteModelRelationByName(context.Context, *NameRequest) (*Response, error)
	//model api
	GetModelById(context.Context, *IdRequest) (*Response, error)
	GetModelByName(context.Context, *NameRequest) (*Response, error)
	RegisterModel(context.Context, *RegisterModelRequest) (*Response, error)
	DeleteModelById(context.Context, *IdRequest) (*Response, error)
	DeleteModelByName(context.Context, *NameRequest) (*Response, error)
	//model version relation api
	GetModelVersionRelationByVersion(context.Context, *ModelVersionNameRequest) (*Response, error)
	ListModelVersionRelation(context.Context, *ListModelVersionRelationRequest) (*Response, error)
	RegisterModelVersionRelation(context.Context, *RegisterModelVersionRelationRequest) (*Response, error)
	DeleteModelVersionRelationByVersion(context.Context, *ModelVersionNameRequest) (*Response, error)
	//model version api
	GetModelVersionByVersion(context.Context, *ModelVersionNameRequest) (*Response, error)
	RegisterModelVersion(context.Context, *RegisterModelVersionRequest) (*Response, error)
	DeleteModelVersionByVersion(context.Context, *ModelVersionNameRequest) (*Response, error)
	GetDeployedModelVersion(context.Context, *ModelNameRequest) (*Response, error)
	GetLatestValidatedModelVersion(context.Context, *ModelNameRequest) (*Response, error)
	GetLatestGeneratedModelVersion(context.Context, *ModelNameRequest) (*Response, error)
	//workflow execution api
	GetWorkFlowExecutionById(context.Context, *IdRequest) (*Response, error)
	GetWorkFlowExecutionByName(context.Context, *NameRequest) (*Response, error)
	ListWorkFlowExecution(context.Context, *ListRequest) (*Response, error)
	RegisterWorkFlowExecution(context.Context, *RegisterWorkFlowExecutionRequest) (*Response, error)
	UpdateWorkflowExecution(context.Context, *UpdateWorkflowExecutionRequest) (*Response, error)
	DeleteWorkflowExecutionById(context.Context, *IdRequest) (*Response, error)
	DeleteWorkflowExecutionByName(context.Context, *NameRequest) (*Response, error)
	UpdateWorkflowExecutionEndTime(context.Context, *UpdateWorkflowExecutionEndTimeRequest) (*Response, error)
	UpdateWorkflowExecutionState(context.Context, *UpdateWorkflowExecutionStateRequest) (*Response, error)
	//job api
	GetJobById(context.Context, *IdRequest) (*Response, error)
	GetJobByName(context.Context, *NameRequest) (*Response, error)
	ListJob(context.Context, *ListRequest) (*Response, error)
	RegisterJob(context.Context, *RegisterJobRequest) (*Response, error)
	UpdateJob(context.Context, *UpdateJobRequest) (*Response, error)
	UpdateJobState(context.Context, *UpdateJobStateRequest) (*Response, error)
	UpdateJobEndTime(context.Context, *UpdateJobEndTimeRequest) (*Response, error)
	DeleteJobById(context.Context, *IdRequest) (*Response, error)
	DeleteJobByName(context.Context, *NameRequest) (*Response, error)
	//project api
	GetProjectById(context.Context, *IdRequest) (*Response, error)
	GetProjectByName(context.Context, *NameRequest) (*Response, error)
	RegisterProject(context.Context, *RegisterProjectRequest) (*Response, error)
	UpdateProject(context.Context, *UpdateProjectRequest) (*Response, error)
	ListProject(context.Context, *ListRequest) (*Response, error)
	DeleteProjectById(context.Context, *IdRequest) (*Response, error)
	DeleteProjectByName(context.Context, *NameRequest) (*Response, error)
	//artifact api
	GetArtifactById(context.Context, *IdRequest) (*Response, error)
	GetArtifactByName(context.Context, *NameRequest) (*Response, error)
	UpdateArtifact(context.Context, *UpdateArtifactRequest) (*Response, error)
	RegisterArtifact(context.Context, *RegisterArtifactRequest) (*Response, error)
	ListArtifact(context.Context, *ListRequest) (*Response, error)
	DeleteArtifactById(context.Context, *IdRequest) (*Response, error)
	DeleteArtifactByName(context.Context, *NameRequest) (*Response, error)
}

// UnimplementedMetadataServiceServer can be embedded to have forward compatible implementations.
type UnimplementedMetadataServiceServer struct {
}

func (*UnimplementedMetadataServiceServer) GetExampleById(context.Context, *IdRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExampleById not implemented")
}
func (*UnimplementedMetadataServiceServer) GetExampleByName(context.Context, *NameRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExampleByName not implemented")
}
func (*UnimplementedMetadataServiceServer) ListExample(context.Context, *ListRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListExample not implemented")
}
func (*UnimplementedMetadataServiceServer) RegisterExample(context.Context, *RegisterExampleRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterExample not implemented")
}
func (*UnimplementedMetadataServiceServer) RegisterExampleWithCatalog(context.Context, *RegisterExampleRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterExampleWithCatalog not implemented")
}
func (*UnimplementedMetadataServiceServer) RegisterExamples(context.Context, *RegisterExamplesRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterExamples not implemented")
}
func (*UnimplementedMetadataServiceServer) UpdateExample(context.Context, *UpdateExampleRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateExample not implemented")
}
func (*UnimplementedMetadataServiceServer) DeleteExampleById(context.Context, *IdRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteExampleById not implemented")
}
func (*UnimplementedMetadataServiceServer) DeleteExampleByName(context.Context, *NameRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteExampleByName not implemented")
}
func (*UnimplementedMetadataServiceServer) GetModelRelationById(context.Context, *IdRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetModelRelationById not implemented")
}
func (*UnimplementedMetadataServiceServer) GetModelRelationByName(context.Context, *NameRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetModelRelationByName not implemented")
}
func (*UnimplementedMetadataServiceServer) ListModelRelation(context.Context, *ListRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListModelRelation not implemented")
}
func (*UnimplementedMetadataServiceServer) RegisterModelRelation(context.Context, *RegisterModelRelationRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterModelRelation not implemented")
}
func (*UnimplementedMetadataServiceServer) DeleteModelRelationById(context.Context, *IdRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteModelRelationById not implemented")
}
func (*UnimplementedMetadataServiceServer) DeleteModelRelationByName(context.Context, *NameRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteModelRelationByName not implemented")
}
func (*UnimplementedMetadataServiceServer) GetModelById(context.Context, *IdRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetModelById not implemented")
}
func (*UnimplementedMetadataServiceServer) GetModelByName(context.Context, *NameRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetModelByName not implemented")
}
func (*UnimplementedMetadataServiceServer) RegisterModel(context.Context, *RegisterModelRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterModel not implemented")
}
func (*UnimplementedMetadataServiceServer) DeleteModelById(context.Context, *IdRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteModelById not implemented")
}
func (*UnimplementedMetadataServiceServer) DeleteModelByName(context.Context, *NameRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteModelByName not implemented")
}
func (*UnimplementedMetadataServiceServer) GetModelVersionRelationByVersion(context.Context, *ModelVersionNameRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetModelVersionRelationByVersion not implemented")
}
func (*UnimplementedMetadataServiceServer) ListModelVersionRelation(context.Context, *ListModelVersionRelationRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListModelVersionRelation not implemented")
}
func (*UnimplementedMetadataServiceServer) RegisterModelVersionRelation(context.Context, *RegisterModelVersionRelationRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterModelVersionRelation not implemented")
}
func (*UnimplementedMetadataServiceServer) DeleteModelVersionRelationByVersion(context.Context, *ModelVersionNameRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteModelVersionRelationByVersion not implemented")
}
func (*UnimplementedMetadataServiceServer) GetModelVersionByVersion(context.Context, *ModelVersionNameRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetModelVersionByVersion not implemented")
}
func (*UnimplementedMetadataServiceServer) RegisterModelVersion(context.Context, *RegisterModelVersionRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterModelVersion not implemented")
}
func (*UnimplementedMetadataServiceServer) DeleteModelVersionByVersion(context.Context, *ModelVersionNameRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteModelVersionByVersion not implemented")
}
func (*UnimplementedMetadataServiceServer) GetDeployedModelVersion(context.Context, *ModelNameRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeployedModelVersion not implemented")
}
func (*UnimplementedMetadataServiceServer) GetLatestValidatedModelVersion(context.Context, *ModelNameRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLatestValidatedModelVersion not implemented")
}
func (*UnimplementedMetadataServiceServer) GetLatestGeneratedModelVersion(context.Context, *ModelNameRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLatestGeneratedModelVersion not implemented")
}
func (*UnimplementedMetadataServiceServer) GetWorkFlowExecutionById(context.Context, *IdRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkFlowExecutionById not implemented")
}
func (*UnimplementedMetadataServiceServer) GetWorkFlowExecutionByName(context.Context, *NameRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkFlowExecutionByName not implemented")
}
func (*UnimplementedMetadataServiceServer) ListWorkFlowExecution(context.Context, *ListRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWorkFlowExecution not implemented")
}
func (*UnimplementedMetadataServiceServer) RegisterWorkFlowExecution(context.Context, *RegisterWorkFlowExecutionRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterWorkFlowExecution not implemented")
}
func (*UnimplementedMetadataServiceServer) UpdateWorkflowExecution(context.Context, *UpdateWorkflowExecutionRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWorkflowExecution not implemented")
}
func (*UnimplementedMetadataServiceServer) DeleteWorkflowExecutionById(context.Context, *IdRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWorkflowExecutionById not implemented")
}
func (*UnimplementedMetadataServiceServer) DeleteWorkflowExecutionByName(context.Context, *NameRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWorkflowExecutionByName not implemented")
}
func (*UnimplementedMetadataServiceServer) UpdateWorkflowExecutionEndTime(context.Context, *UpdateWorkflowExecutionEndTimeRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWorkflowExecutionEndTime not implemented")
}
func (*UnimplementedMetadataServiceServer) UpdateWorkflowExecutionState(context.Context, *UpdateWorkflowExecutionStateRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWorkflowExecutionState not implemented")
}
func (*UnimplementedMetadataServiceServer) GetJobById(context.Context, *IdRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJobById not implemented")
}
func (*UnimplementedMetadataServiceServer) GetJobByName(context.Context, *NameRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJobByName not implemented")
}
func (*UnimplementedMetadataServiceServer) ListJob(context.Context, *ListRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListJob not implemented")
}
func (*UnimplementedMetadataServiceServer) RegisterJob(context.Context, *RegisterJobRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterJob not implemented")
}
func (*UnimplementedMetadataServiceServer) UpdateJob(context.Context, *UpdateJobRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateJob not implemented")
}
func (*UnimplementedMetadataServiceServer) UpdateJobState(context.Context, *UpdateJobStateRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateJobState not implemented")
}
func (*UnimplementedMetadataServiceServer) UpdateJobEndTime(context.Context, *UpdateJobEndTimeRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateJobEndTime not implemented")
}
func (*UnimplementedMetadataServiceServer) DeleteJobById(context.Context, *IdRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteJobById not implemented")
}
func (*UnimplementedMetadataServiceServer) DeleteJobByName(context.Context, *NameRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteJobByName not implemented")
}
func (*UnimplementedMetadataServiceServer) GetProjectById(context.Context, *IdRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectById not implemented")
}
func (*UnimplementedMetadataServiceServer) GetProjectByName(context.Context, *NameRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectByName not implemented")
}
func (*UnimplementedMetadataServiceServer) RegisterProject(context.Context, *RegisterProjectRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterProject not implemented")
}
func (*UnimplementedMetadataServiceServer) UpdateProject(context.Context, *UpdateProjectRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProject not implemented")
}
func (*UnimplementedMetadataServiceServer) ListProject(context.Context, *ListRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProject not implemented")
}
func (*UnimplementedMetadataServiceServer) DeleteProjectById(context.Context, *IdRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProjectById not implemented")
}
func (*UnimplementedMetadataServiceServer) DeleteProjectByName(context.Context, *NameRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProjectByName not implemented")
}
func (*UnimplementedMetadataServiceServer) GetArtifactById(context.Context, *IdRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArtifactById not implemented")
}
func (*UnimplementedMetadataServiceServer) GetArtifactByName(context.Context, *NameRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArtifactByName not implemented")
}
func (*UnimplementedMetadataServiceServer) UpdateArtifact(context.Context, *UpdateArtifactRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateArtifact not implemented")
}
func (*UnimplementedMetadataServiceServer) RegisterArtifact(context.Context, *RegisterArtifactRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterArtifact not implemented")
}
func (*UnimplementedMetadataServiceServer) ListArtifact(context.Context, *ListRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListArtifact not implemented")
}
func (*UnimplementedMetadataServiceServer) DeleteArtifactById(context.Context, *IdRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteArtifactById not implemented")
}
func (*UnimplementedMetadataServiceServer) DeleteArtifactByName(context.Context, *NameRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteArtifactByName not implemented")
}

func RegisterMetadataServiceServer(s *grpc.Server, srv MetadataServiceServer) {
	s.RegisterService(&_MetadataService_serviceDesc, srv)
}

func _MetadataService_GetExampleById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataServiceServer).GetExampleById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai_flow.MetadataService/GetExampleById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataServiceServer).GetExampleById(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetadataService_GetExampleByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataServiceServer).GetExampleByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai_flow.MetadataService/GetExampleByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataServiceServer).GetExampleByName(ctx, req.(*NameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetadataService_ListExample_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataServiceServer).ListExample(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai_flow.MetadataService/ListExample",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataServiceServer).ListExample(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetadataService_RegisterExample_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterExampleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataServiceServer).RegisterExample(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai_flow.MetadataService/RegisterExample",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataServiceServer).RegisterExample(ctx, req.(*RegisterExampleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetadataService_RegisterExampleWithCatalog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterExampleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataServiceServer).RegisterExampleWithCatalog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai_flow.MetadataService/RegisterExampleWithCatalog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataServiceServer).RegisterExampleWithCatalog(ctx, req.(*RegisterExampleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetadataService_RegisterExamples_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterExamplesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataServiceServer).RegisterExamples(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai_flow.MetadataService/RegisterExamples",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataServiceServer).RegisterExamples(ctx, req.(*RegisterExamplesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetadataService_UpdateExample_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateExampleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataServiceServer).UpdateExample(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai_flow.MetadataService/UpdateExample",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataServiceServer).UpdateExample(ctx, req.(*UpdateExampleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetadataService_DeleteExampleById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataServiceServer).DeleteExampleById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai_flow.MetadataService/DeleteExampleById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataServiceServer).DeleteExampleById(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetadataService_DeleteExampleByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataServiceServer).DeleteExampleByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai_flow.MetadataService/DeleteExampleByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataServiceServer).DeleteExampleByName(ctx, req.(*NameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetadataService_GetModelRelationById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataServiceServer).GetModelRelationById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai_flow.MetadataService/GetModelRelationById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataServiceServer).GetModelRelationById(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetadataService_GetModelRelationByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataServiceServer).GetModelRelationByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai_flow.MetadataService/GetModelRelationByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataServiceServer).GetModelRelationByName(ctx, req.(*NameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetadataService_ListModelRelation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataServiceServer).ListModelRelation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai_flow.MetadataService/ListModelRelation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataServiceServer).ListModelRelation(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetadataService_RegisterModelRelation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterModelRelationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataServiceServer).RegisterModelRelation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai_flow.MetadataService/RegisterModelRelation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataServiceServer).RegisterModelRelation(ctx, req.(*RegisterModelRelationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetadataService_DeleteModelRelationById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataServiceServer).DeleteModelRelationById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai_flow.MetadataService/DeleteModelRelationById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataServiceServer).DeleteModelRelationById(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetadataService_DeleteModelRelationByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataServiceServer).DeleteModelRelationByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai_flow.MetadataService/DeleteModelRelationByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataServiceServer).DeleteModelRelationByName(ctx, req.(*NameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetadataService_GetModelById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataServiceServer).GetModelById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai_flow.MetadataService/GetModelById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataServiceServer).GetModelById(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetadataService_GetModelByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataServiceServer).GetModelByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai_flow.MetadataService/GetModelByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataServiceServer).GetModelByName(ctx, req.(*NameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetadataService_RegisterModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataServiceServer).RegisterModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai_flow.MetadataService/RegisterModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataServiceServer).RegisterModel(ctx, req.(*RegisterModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetadataService_DeleteModelById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataServiceServer).DeleteModelById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai_flow.MetadataService/DeleteModelById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataServiceServer).DeleteModelById(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetadataService_DeleteModelByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataServiceServer).DeleteModelByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai_flow.MetadataService/DeleteModelByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataServiceServer).DeleteModelByName(ctx, req.(*NameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetadataService_GetModelVersionRelationByVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModelVersionNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataServiceServer).GetModelVersionRelationByVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai_flow.MetadataService/GetModelVersionRelationByVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataServiceServer).GetModelVersionRelationByVersion(ctx, req.(*ModelVersionNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetadataService_ListModelVersionRelation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListModelVersionRelationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataServiceServer).ListModelVersionRelation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai_flow.MetadataService/ListModelVersionRelation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataServiceServer).ListModelVersionRelation(ctx, req.(*ListModelVersionRelationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetadataService_RegisterModelVersionRelation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterModelVersionRelationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataServiceServer).RegisterModelVersionRelation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai_flow.MetadataService/RegisterModelVersionRelation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataServiceServer).RegisterModelVersionRelation(ctx, req.(*RegisterModelVersionRelationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetadataService_DeleteModelVersionRelationByVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModelVersionNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataServiceServer).DeleteModelVersionRelationByVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai_flow.MetadataService/DeleteModelVersionRelationByVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataServiceServer).DeleteModelVersionRelationByVersion(ctx, req.(*ModelVersionNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetadataService_GetModelVersionByVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModelVersionNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataServiceServer).GetModelVersionByVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai_flow.MetadataService/GetModelVersionByVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataServiceServer).GetModelVersionByVersion(ctx, req.(*ModelVersionNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetadataService_RegisterModelVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterModelVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataServiceServer).RegisterModelVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai_flow.MetadataService/RegisterModelVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataServiceServer).RegisterModelVersion(ctx, req.(*RegisterModelVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetadataService_DeleteModelVersionByVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModelVersionNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataServiceServer).DeleteModelVersionByVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai_flow.MetadataService/DeleteModelVersionByVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataServiceServer).DeleteModelVersionByVersion(ctx, req.(*ModelVersionNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetadataService_GetDeployedModelVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModelNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataServiceServer).GetDeployedModelVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai_flow.MetadataService/GetDeployedModelVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataServiceServer).GetDeployedModelVersion(ctx, req.(*ModelNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetadataService_GetLatestValidatedModelVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModelNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataServiceServer).GetLatestValidatedModelVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai_flow.MetadataService/GetLatestValidatedModelVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataServiceServer).GetLatestValidatedModelVersion(ctx, req.(*ModelNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetadataService_GetLatestGeneratedModelVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModelNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataServiceServer).GetLatestGeneratedModelVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai_flow.MetadataService/GetLatestGeneratedModelVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataServiceServer).GetLatestGeneratedModelVersion(ctx, req.(*ModelNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetadataService_GetWorkFlowExecutionById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataServiceServer).GetWorkFlowExecutionById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai_flow.MetadataService/GetWorkFlowExecutionById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataServiceServer).GetWorkFlowExecutionById(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetadataService_GetWorkFlowExecutionByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataServiceServer).GetWorkFlowExecutionByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai_flow.MetadataService/GetWorkFlowExecutionByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataServiceServer).GetWorkFlowExecutionByName(ctx, req.(*NameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetadataService_ListWorkFlowExecution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataServiceServer).ListWorkFlowExecution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai_flow.MetadataService/ListWorkFlowExecution",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataServiceServer).ListWorkFlowExecution(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetadataService_RegisterWorkFlowExecution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterWorkFlowExecutionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataServiceServer).RegisterWorkFlowExecution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai_flow.MetadataService/RegisterWorkFlowExecution",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataServiceServer).RegisterWorkFlowExecution(ctx, req.(*RegisterWorkFlowExecutionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetadataService_UpdateWorkflowExecution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWorkflowExecutionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataServiceServer).UpdateWorkflowExecution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai_flow.MetadataService/UpdateWorkflowExecution",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataServiceServer).UpdateWorkflowExecution(ctx, req.(*UpdateWorkflowExecutionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetadataService_DeleteWorkflowExecutionById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataServiceServer).DeleteWorkflowExecutionById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai_flow.MetadataService/DeleteWorkflowExecutionById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataServiceServer).DeleteWorkflowExecutionById(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetadataService_DeleteWorkflowExecutionByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataServiceServer).DeleteWorkflowExecutionByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai_flow.MetadataService/DeleteWorkflowExecutionByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataServiceServer).DeleteWorkflowExecutionByName(ctx, req.(*NameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetadataService_UpdateWorkflowExecutionEndTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWorkflowExecutionEndTimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataServiceServer).UpdateWorkflowExecutionEndTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai_flow.MetadataService/UpdateWorkflowExecutionEndTime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataServiceServer).UpdateWorkflowExecutionEndTime(ctx, req.(*UpdateWorkflowExecutionEndTimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetadataService_UpdateWorkflowExecutionState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWorkflowExecutionStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataServiceServer).UpdateWorkflowExecutionState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai_flow.MetadataService/UpdateWorkflowExecutionState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataServiceServer).UpdateWorkflowExecutionState(ctx, req.(*UpdateWorkflowExecutionStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetadataService_GetJobById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataServiceServer).GetJobById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai_flow.MetadataService/GetJobById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataServiceServer).GetJobById(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetadataService_GetJobByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataServiceServer).GetJobByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai_flow.MetadataService/GetJobByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataServiceServer).GetJobByName(ctx, req.(*NameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetadataService_ListJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataServiceServer).ListJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai_flow.MetadataService/ListJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataServiceServer).ListJob(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetadataService_RegisterJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataServiceServer).RegisterJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai_flow.MetadataService/RegisterJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataServiceServer).RegisterJob(ctx, req.(*RegisterJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetadataService_UpdateJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataServiceServer).UpdateJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai_flow.MetadataService/UpdateJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataServiceServer).UpdateJob(ctx, req.(*UpdateJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetadataService_UpdateJobState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateJobStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataServiceServer).UpdateJobState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai_flow.MetadataService/UpdateJobState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataServiceServer).UpdateJobState(ctx, req.(*UpdateJobStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetadataService_UpdateJobEndTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateJobEndTimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataServiceServer).UpdateJobEndTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai_flow.MetadataService/UpdateJobEndTime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataServiceServer).UpdateJobEndTime(ctx, req.(*UpdateJobEndTimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetadataService_DeleteJobById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataServiceServer).DeleteJobById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai_flow.MetadataService/DeleteJobById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataServiceServer).DeleteJobById(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetadataService_DeleteJobByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataServiceServer).DeleteJobByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai_flow.MetadataService/DeleteJobByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataServiceServer).DeleteJobByName(ctx, req.(*NameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetadataService_GetProjectById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataServiceServer).GetProjectById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai_flow.MetadataService/GetProjectById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataServiceServer).GetProjectById(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetadataService_GetProjectByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataServiceServer).GetProjectByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai_flow.MetadataService/GetProjectByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataServiceServer).GetProjectByName(ctx, req.(*NameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetadataService_RegisterProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataServiceServer).RegisterProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai_flow.MetadataService/RegisterProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataServiceServer).RegisterProject(ctx, req.(*RegisterProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetadataService_UpdateProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataServiceServer).UpdateProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai_flow.MetadataService/UpdateProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataServiceServer).UpdateProject(ctx, req.(*UpdateProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetadataService_ListProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataServiceServer).ListProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai_flow.MetadataService/ListProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataServiceServer).ListProject(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetadataService_DeleteProjectById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataServiceServer).DeleteProjectById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai_flow.MetadataService/DeleteProjectById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataServiceServer).DeleteProjectById(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetadataService_DeleteProjectByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataServiceServer).DeleteProjectByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai_flow.MetadataService/DeleteProjectByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataServiceServer).DeleteProjectByName(ctx, req.(*NameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetadataService_GetArtifactById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataServiceServer).GetArtifactById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai_flow.MetadataService/GetArtifactById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataServiceServer).GetArtifactById(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetadataService_GetArtifactByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataServiceServer).GetArtifactByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai_flow.MetadataService/GetArtifactByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataServiceServer).GetArtifactByName(ctx, req.(*NameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetadataService_UpdateArtifact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateArtifactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataServiceServer).UpdateArtifact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai_flow.MetadataService/UpdateArtifact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataServiceServer).UpdateArtifact(ctx, req.(*UpdateArtifactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetadataService_RegisterArtifact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterArtifactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataServiceServer).RegisterArtifact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai_flow.MetadataService/RegisterArtifact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataServiceServer).RegisterArtifact(ctx, req.(*RegisterArtifactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetadataService_ListArtifact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataServiceServer).ListArtifact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai_flow.MetadataService/ListArtifact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataServiceServer).ListArtifact(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetadataService_DeleteArtifactById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataServiceServer).DeleteArtifactById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai_flow.MetadataService/DeleteArtifactById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataServiceServer).DeleteArtifactById(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetadataService_DeleteArtifactByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataServiceServer).DeleteArtifactByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai_flow.MetadataService/DeleteArtifactByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataServiceServer).DeleteArtifactByName(ctx, req.(*NameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MetadataService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ai_flow.MetadataService",
	HandlerType: (*MetadataServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getExampleById",
			Handler:    _MetadataService_GetExampleById_Handler,
		},
		{
			MethodName: "getExampleByName",
			Handler:    _MetadataService_GetExampleByName_Handler,
		},
		{
			MethodName: "listExample",
			Handler:    _MetadataService_ListExample_Handler,
		},
		{
			MethodName: "registerExample",
			Handler:    _MetadataService_RegisterExample_Handler,
		},
		{
			MethodName: "registerExampleWithCatalog",
			Handler:    _MetadataService_RegisterExampleWithCatalog_Handler,
		},
		{
			MethodName: "registerExamples",
			Handler:    _MetadataService_RegisterExamples_Handler,
		},
		{
			MethodName: "updateExample",
			Handler:    _MetadataService_UpdateExample_Handler,
		},
		{
			MethodName: "deleteExampleById",
			Handler:    _MetadataService_DeleteExampleById_Handler,
		},
		{
			MethodName: "deleteExampleByName",
			Handler:    _MetadataService_DeleteExampleByName_Handler,
		},
		{
			MethodName: "getModelRelationById",
			Handler:    _MetadataService_GetModelRelationById_Handler,
		},
		{
			MethodName: "getModelRelationByName",
			Handler:    _MetadataService_GetModelRelationByName_Handler,
		},
		{
			MethodName: "listModelRelation",
			Handler:    _MetadataService_ListModelRelation_Handler,
		},
		{
			MethodName: "registerModelRelation",
			Handler:    _MetadataService_RegisterModelRelation_Handler,
		},
		{
			MethodName: "deleteModelRelationById",
			Handler:    _MetadataService_DeleteModelRelationById_Handler,
		},
		{
			MethodName: "deleteModelRelationByName",
			Handler:    _MetadataService_DeleteModelRelationByName_Handler,
		},
		{
			MethodName: "getModelById",
			Handler:    _MetadataService_GetModelById_Handler,
		},
		{
			MethodName: "getModelByName",
			Handler:    _MetadataService_GetModelByName_Handler,
		},
		{
			MethodName: "registerModel",
			Handler:    _MetadataService_RegisterModel_Handler,
		},
		{
			MethodName: "deleteModelById",
			Handler:    _MetadataService_DeleteModelById_Handler,
		},
		{
			MethodName: "deleteModelByName",
			Handler:    _MetadataService_DeleteModelByName_Handler,
		},
		{
			MethodName: "getModelVersionRelationByVersion",
			Handler:    _MetadataService_GetModelVersionRelationByVersion_Handler,
		},
		{
			MethodName: "listModelVersionRelation",
			Handler:    _MetadataService_ListModelVersionRelation_Handler,
		},
		{
			MethodName: "registerModelVersionRelation",
			Handler:    _MetadataService_RegisterModelVersionRelation_Handler,
		},
		{
			MethodName: "deleteModelVersionRelationByVersion",
			Handler:    _MetadataService_DeleteModelVersionRelationByVersion_Handler,
		},
		{
			MethodName: "getModelVersionByVersion",
			Handler:    _MetadataService_GetModelVersionByVersion_Handler,
		},
		{
			MethodName: "registerModelVersion",
			Handler:    _MetadataService_RegisterModelVersion_Handler,
		},
		{
			MethodName: "deleteModelVersionByVersion",
			Handler:    _MetadataService_DeleteModelVersionByVersion_Handler,
		},
		{
			MethodName: "getDeployedModelVersion",
			Handler:    _MetadataService_GetDeployedModelVersion_Handler,
		},
		{
			MethodName: "getLatestValidatedModelVersion",
			Handler:    _MetadataService_GetLatestValidatedModelVersion_Handler,
		},
		{
			MethodName: "getLatestGeneratedModelVersion",
			Handler:    _MetadataService_GetLatestGeneratedModelVersion_Handler,
		},
		{
			MethodName: "getWorkFlowExecutionById",
			Handler:    _MetadataService_GetWorkFlowExecutionById_Handler,
		},
		{
			MethodName: "getWorkFlowExecutionByName",
			Handler:    _MetadataService_GetWorkFlowExecutionByName_Handler,
		},
		{
			MethodName: "listWorkFlowExecution",
			Handler:    _MetadataService_ListWorkFlowExecution_Handler,
		},
		{
			MethodName: "registerWorkFlowExecution",
			Handler:    _MetadataService_RegisterWorkFlowExecution_Handler,
		},
		{
			MethodName: "updateWorkflowExecution",
			Handler:    _MetadataService_UpdateWorkflowExecution_Handler,
		},
		{
			MethodName: "deleteWorkflowExecutionById",
			Handler:    _MetadataService_DeleteWorkflowExecutionById_Handler,
		},
		{
			MethodName: "deleteWorkflowExecutionByName",
			Handler:    _MetadataService_DeleteWorkflowExecutionByName_Handler,
		},
		{
			MethodName: "updateWorkflowExecutionEndTime",
			Handler:    _MetadataService_UpdateWorkflowExecutionEndTime_Handler,
		},
		{
			MethodName: "updateWorkflowExecutionState",
			Handler:    _MetadataService_UpdateWorkflowExecutionState_Handler,
		},
		{
			MethodName: "getJobById",
			Handler:    _MetadataService_GetJobById_Handler,
		},
		{
			MethodName: "getJobByName",
			Handler:    _MetadataService_GetJobByName_Handler,
		},
		{
			MethodName: "listJob",
			Handler:    _MetadataService_ListJob_Handler,
		},
		{
			MethodName: "registerJob",
			Handler:    _MetadataService_RegisterJob_Handler,
		},
		{
			MethodName: "updateJob",
			Handler:    _MetadataService_UpdateJob_Handler,
		},
		{
			MethodName: "updateJobState",
			Handler:    _MetadataService_UpdateJobState_Handler,
		},
		{
			MethodName: "updateJobEndTime",
			Handler:    _MetadataService_UpdateJobEndTime_Handler,
		},
		{
			MethodName: "deleteJobById",
			Handler:    _MetadataService_DeleteJobById_Handler,
		},
		{
			MethodName: "deleteJobByName",
			Handler:    _MetadataService_DeleteJobByName_Handler,
		},
		{
			MethodName: "getProjectById",
			Handler:    _MetadataService_GetProjectById_Handler,
		},
		{
			MethodName: "getProjectByName",
			Handler:    _MetadataService_GetProjectByName_Handler,
		},
		{
			MethodName: "registerProject",
			Handler:    _MetadataService_RegisterProject_Handler,
		},
		{
			MethodName: "updateProject",
			Handler:    _MetadataService_UpdateProject_Handler,
		},
		{
			MethodName: "listProject",
			Handler:    _MetadataService_ListProject_Handler,
		},
		{
			MethodName: "deleteProjectById",
			Handler:    _MetadataService_DeleteProjectById_Handler,
		},
		{
			MethodName: "deleteProjectByName",
			Handler:    _MetadataService_DeleteProjectByName_Handler,
		},
		{
			MethodName: "getArtifactById",
			Handler:    _MetadataService_GetArtifactById_Handler,
		},
		{
			MethodName: "getArtifactByName",
			Handler:    _MetadataService_GetArtifactByName_Handler,
		},
		{
			MethodName: "updateArtifact",
			Handler:    _MetadataService_UpdateArtifact_Handler,
		},
		{
			MethodName: "registerArtifact",
			Handler:    _MetadataService_RegisterArtifact_Handler,
		},
		{
			MethodName: "listArtifact",
			Handler:    _MetadataService_ListArtifact_Handler,
		},
		{
			MethodName: "deleteArtifactById",
			Handler:    _MetadataService_DeleteArtifactById_Handler,
		},
		{
			MethodName: "deleteArtifactByName",
			Handler:    _MetadataService_DeleteArtifactByName_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "metadata_service.proto",
}

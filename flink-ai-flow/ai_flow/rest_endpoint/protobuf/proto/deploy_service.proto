/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
syntax = "proto3";

option java_generic_services = true;
option java_package = "com.aiflow.proto";
option py_generic_services = true;
option go_package = "/ai_flow";

import "google/api/annotations.proto";

package ai_flow;

message WorkflowRequest {
    int64 id = 1;
    string workflow_json = 2;
}

message ScheduleResponse {
    int64 return_code = 1;
    string return_msg = 2;
    string data = 3;
}

message MasterConfigRequest {
    int64 id = 1;
}

message MasterConfigResponse {
    int64 return_code = 1;
    string return_msg = 2;
    map<string, string> config = 3;
}

service DeployService {
    rpc startScheduleWorkflow (WorkflowRequest) returns (ScheduleResponse) {
        option (google.api.http) = {
        post: "/aiflow/deployer/workflow/start"
        body: "*"
        };
    };

    rpc stopScheduleWorkflow (WorkflowRequest) returns (ScheduleResponse) {
        option (google.api.http) = {
        post: "/aiflow/deployer/workflow/stop"
        body: "*"
        };
    };

    rpc getWorkflowExecutionResult (WorkflowRequest) returns (ScheduleResponse) {
        option (google.api.http) = {
        post: "/aiflow/deployer/workflow/result"
        body: "*"
        };
    };

    rpc isWorkflowExecutionAlive (WorkflowRequest) returns (ScheduleResponse) {
        option (google.api.http) = {
        post: "/aiflow/deployer/workflow/alive"
        body: "*"
        };
    };

    rpc getMasterConfig (MasterConfigRequest) returns (MasterConfigResponse) {
        option (google.api.http) = {
        post: "/aiflow/deployer/workflow/master_config"
        body: "*"
        };
    };
}

